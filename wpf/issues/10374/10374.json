{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hi\n \n \nThe following scenario might be a bit unusual, but I wanted to share the problem anyway.\n \nI created a DataGrid in source code and added it to an UI element. \nImportant is that RowHeaders of the DataGridRows are shown and that there are enough columns to make the horizontal scrollbar appear.\n \nAfter creating the DataGrid I subscribed to the Loaded event to set the focus to a cell in the DataGrid.\nIn the method handling that event I set the focus to the last cell of the first DataGridRow and right after that to the first cell.\n \nThese two actions somehow trigger scrolling in the DataGrid and result in an infinite loop (that somehow seems to be recalculating DataGrid.CellsPanelHorizontalOffset all the time).\nThe application cannot be used anymore after entering that loop.\n \nIt's easy to solve the problem. Just set the focus to one cell (and not two cells).\nBut I discovered another behavior that might be a bug that should be fixed. After the DataGrid is scrolled to the right, setting the focus to the first cell in a row does not cause the cell to scroll into view completly. \nThe cell is just scrolled to the left starting position of the DataGridRowHeader. That means if the RowHeader has a width of 20 pixels the first 20 pixels of the first cell are still hidden by the RowHeader.\nThis might be an unwanted behavior and could also solve the problem with the infinite loop.\n \n \nDDPommes\n \nI attached a solution with the source code of a program showing the problem. Clicking the button causes the infinite loop.\n(By the way, the approach of getting the cells is just like this to make the code shorter. Walking the VisualTree would probably be better. Having a method for that would be the best ;-).)\n \n \nWindow1.xaml\n-----------------\n<Window x:Class=\"DataGridFlickeringTest.Window1\"\n\t\t  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n\t\t  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n\t\t  xmlns:dg=\"http://schemas.microsoft.com/wpf/2008/toolkit\"\n\t\t  Title=\"Window1\"\n\t\t  Height=\"300\"\n\t\t  Width=\"200\">\n\t<DockPanel LastChildFill=\"True\">\n\t\t<Button Content=\"Load Grid and start flickering\"\n\t\t\t\t  Click=\"Button_Click\"\n\t\t\t\t  DockPanel.Dock=\"Top\" />\n\t\t<Border x:Name=\"placeHolder\"\n\t\t\t\t  BorderBrush=\"Black\"\n\t\t\t\t  BorderThickness=\"2\"\n\t\t\t\t  DockPanel.Dock=\"Bottom\" />\n\t</DockPanel>\n</Window>\n \n \nWindow1.xaml.cs\n-----------------\nusing System.Reflection;\nusing System.Windows;\nusing System.Windows.Data;\nusing Microsoft.Windows.Controls;\n \nnamespace DataGridFlickeringTest\n{\n\t/// <summary>\n\t/// Interaction logic for Window1.xaml\n\t/// </summary>\n\tpublic partial class Window1 : Window\n\t{\n\t\tpublic Window1()\n\t\t{\n\t\t\tInitializeComponent();\n\t\t}\n \n\t\tprivate void Button_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tif (this.placeHolder.Child == null)\n\t\t\t{\n\t\t\t\tDataGrid dataGrid = new DataGrid();\n\t\t\t\tdataGrid.RowHeaderWidth = 20;\n\t\t\t\tdataGrid.HeadersVisibility = DataGridHeadersVisibility.All;\n\t\t\t\tdataGrid.AutoGenerateColumns = false;\n \n\t\t\t\tDataGridTextColumn column1 = new DataGridTextColumn();\n\t\t\t\tcolumn1.Header = \"Column 1\";\n\t\t\t\tcolumn1.IsReadOnly = true;\n\t\t\t\tcolumn1.Binding = new Binding();\n \n\t\t\t\tDataGridTextColumn column2 = new DataGridTextColumn();\n\t\t\t\tcolumn2.Header = \"Column 2\";\n\t\t\t\tcolumn2.IsReadOnly = true;\n\t\t\t\tcolumn2.Binding = new Binding();\n \n\t\t\t\tDataGridTextColumn column3 = new DataGridTextColumn();\n\t\t\t\tcolumn3.Header = \"Column 3\";\n\t\t\t\tcolumn3.IsReadOnly = true;\n\t\t\t\tcolumn3.Binding = new Binding();\n \n\t\t\t\tdataGrid.Columns.Add(column1);\n\t\t\t\tdataGrid.Columns.Add(column2);\n\t\t\t\tdataGrid.Columns.Add(column3);\n \n\t\t\t\tdataGrid.ItemsSource = new string[] { \"Test 1\", \"Test 2\", \"Test 3\" };\n\t\t\t\tthis.placeHolder.Child = dataGrid;\n \n\t\t\t\tdataGrid.Loaded += this.dataGrid_Loaded;\n\t\t\t}\n\t\t}\n \n\t\tvoid dataGrid_Loaded(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tDataGrid grid = sender as DataGrid;\n\t\t\tDataGridRow firstRow = grid.ItemContainerGenerator.ContainerFromIndex(0) as DataGridRow;\n \n\t\t\t// We could also get the cell by walking the VisualTree ...\n\t\t\tMethodInfo getCellMethod = typeof(DataGridRow).GetMethod(\"TryGetCell\", BindingFlags.NonPublic | BindingFlags.Instance);\n\t\t\tDataGridCell lastCell = getCellMethod.Invoke(firstRow, new object[] { 2 }) as DataGridCell;\n\t\t\tDataGridCell firstCell = getCellMethod.Invoke(firstRow, new object[] { 0 }) as DataGridCell;\n \n\t\t\t// Set the focus to the last and after that to the first cell.\n\t\t\tlastCell.Focus();\n\t\t\tfirstCell.Focus();\n \n\t\t\tgrid.Loaded -= this.dataGrid_Loaded;\n\t\t}\n\t}\n}",
    "LastUpdatedDate": "2013-02-21T18:41:03.89-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2009-07-30T10:08:00.893-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Setting Focus to first cell in row causes infinite loop",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 10374
  },
  "FileAttachments": [
    {
      "FileId": 3230,
      "FileName": "DataGridFlickering.zip",
      "DownloadUrl": ".\\3230"
    }
  ],
  "Comments": []
}