{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "When CanUserAddRows is set to false and ItemsSource is bound to a collection that is empty, the DataGrid stops working.",
    "LastUpdatedDate": "2013-02-21T18:41:00.187-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2009-08-25T10:22:54.307-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "DataGrid crashes when setting CanUserAddRows to false",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 3,
    "Id": 10530
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "We were not able to repro this. Can you please provide us with simple repro application.",
      "PostedDate": "2009-08-25T13:34:24.653-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I too am getting this issue. I haven't been able to reproduce it in another app yet although I have narrowed it down to specifying both CanUserAddRows=\"False\" and the columns.\r\n\r\n<tk:DataGrid Grid.Row=\"2\" CanUserAddRows=\"False\"\r\n             ItemsSource=\"{Binding Results}\"\r\n             SelectedItem=\"{Binding SelectedResult}\"\r\n             SelectionMode=\"Single\">\r\n    <tk:DataGrid.Columns>\r\n        <tk:DataGridTextColumn Header=\"Code\" Binding=\"{Binding Code, Mode=OneWay}\" IsReadOnly=\"True\"/>\r\n        <tk:DataGridTextColumn Header=\"Name\" Binding=\"{Binding Name, Mode=OneWay}\" IsReadOnly=\"True\"/>\r\n        <tk:DataGridTextColumn Header=\"Manufacturer\" Binding=\"{Binding Manufacturer, Mode=OneWay}\" IsReadOnly=\"True\"/>\r\n    </tk:DataGrid.Columns>\r\n</tk:DataGrid>\r\n\r\nThe above code will freeze the application (not a crash out). By removing the specified columns, it will work and likewise, keeping the columns and removing the CanUserAddRows works.\r\n\r\np.s. This is using the June 2009 release.",
      "PostedDate": "2009-10-16T00:37:53.483-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-10-21T04:14:58.497-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Hello,\r\n\r\nI'm having the same issue when using a datagrid bound to an empty ObservableCollection and without allowing the user to add rows (CanUserAddRows=\"False\"). Under this situation the grid seems to generate in loops something that could be columns (the horizontal scroll appears and display like the grid would contain a very large amount of cols).\r\nI dig the problem and tried to reproduce it within a smallest project in order to attach it to this post. However I wasn't able to achieve this. When I create a simpler example the grid behaves well. I built quasi the same visual tree (contained within a UserControl and not directly the Window). But it did work... \r\n\r\nI'm still investigating the case but I just wanted to add my feedback to the initial. I'll add some more detailed information as soon as I would found something new helpful.\r\n\r\nThanks\r\n\r\nGautier",
      "PostedDate": "2009-10-22T09:54:59.49-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-10-22T10:40:59.99-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Hello,\r\n\r\nJust a small correction to my post, my problem is due to the styling applied by default to Button instances.... So I'm assuming the DataGrid isn't in fault, at all.\r\n\r\nSorry for the mistake.\r\n\r\nCheers\r\n\r\nGautier",
      "PostedDate": "2009-10-26T01:38:11.153-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I encountered this issue when following the design pattern for a WPF wizard:\r\nhttp://www.codeproject.com/KB/WPF/InternationalizedWizard.aspx\r\n\r\nThat project uses the following button styling on a parent user control:\r\n<Style TargetType=\"{x:Type Button}\">\r\n      <Setter Property=\"Padding\" Value=\"3.5,0\" />\r\n      <Setter Property=\"Margin\" Value=\"3.5\" />\r\n      <Setter Property=\"MinWidth\" Value=\"80\" />\r\n    </Style>\r\n\r\nIf you then add a DataGrid with at least 1 column to a child user control (and it ends up inheriting that button styling) if will cause the DataGrid to freeze on rendering the columns.  The behavior seems a little unpredictable and I had issues previously when adding the CanUserAddRows=false property, but I believe root cause is the styling inheritance and not the property.  I'm not sure why the Datagrid would freeze though...",
      "PostedDate": "2010-01-05T11:10:00.54-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:41:00.187-08:00",
      "Id": -2147483648
    }
  ]
}