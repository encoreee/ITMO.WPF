{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Using custom XAML for ColumnDataPoint combined with explicit setting of X and Y axis results in locking up of the chart (the chart doesn't resize properly when the container is resized) and not all of the bars are displayed (typically 2 series are displayed while the rest are not visible). ToolTip is displayed in the upper-left corner of the screen instead of near the the hovering point. The issue is not occurring 100% of the time and sometimes resizing actually fixes the chart. Output window in VS doesn't show any errors generated during the display. When debugged line by line the data for ColumnSeries.ItemsSource is complete and correct. Only two Axes show up in the Chart.Axes. However, the displayed chart simply doesn't draw half the series. The DataGrid that is displayed below the chart (ItemsSource is shared but DataGrid comes from a different UserControl) is a little screwed up as well (the scroll bars are disabled, however, mouse scroll still works). If the window containing the two controls is resized the plot contents stay in the same position but the chart area, title and legend are resized and repositioned. If the RowSplitter between Chart and DataGrid controls is moved then the chart fixes itself (sometimes) and scrollbars on the DataGrid come back.\n \nHere is the code that populates the graph and attached is the XAML. Not sure what to make of this issue. Any help would be appreciated.\n \npublic virtual void DrawGraph()\n        {\n            chtGraph.Axes.Clear();\n            ChartTitle chtTitle = new ChartTitle();\n            chtTitle.tbxMainTitle.Text = Title;\n            chtTitle.tbxSubTitle.Text = SubTitle;\n            chtTitle.tbxSubSubTitle.Text = SubSubTitle;\n            tbxDateCreated.Text = \"Created: \" + DateTime.Now.ToString(\"G\");\n            chtTitle.ShowHideTitles();\n            chtGraph.SetBinding(Chart.TitleProperty, new Binding() { Source = chtTitle });\n            Style plotAreaStyle = new Style(typeof(Grid));\n            plotAreaStyle.Setters.Add(new Setter(Grid.BackgroundProperty, Brushes.White));\n            chtGraph.PlotAreaStyle = plotAreaStyle;\n            Style titleStyle = new Style(typeof(System.Windows.Controls.DataVisualization.Title));\n            Setter marginSetter = new Setter(TextBlock.MarginProperty, new Thickness(5.0));\n            Setter fontSizeSetter = new Setter(TextBlock.FontSizeProperty, 14.0);\n            Setter fontWeightSetter = new Setter(TextBlock.FontWeightProperty, FontWeights.Bold);\n            titleStyle.Setters.Add(marginSetter);\n            titleStyle.Setters.Add(fontSizeSetter);\n            titleStyle.Setters.Add(fontWeightSetter);\n            CategoryAxis catAxis = new CategoryAxis();\n            catAxis.Orientation = AxisOrientation.X;\n            if (ReverseXAxis)\n            {\n                catAxis.SortOrder = CategorySortOrder.Descending;\n            }\n            else\n            {\n                catAxis.SortOrder = CategorySortOrder.Ascending;\n            }\n            if (IsXAxisLabelCustom)\n            {\n                Style XAxisLblStyle = new Style(typeof(AxisLabel), this.Resources[\"AxisLabelStyle\"] as Style);\n                catAxis.AxisLabelStyle = XAxisLblStyle;\n            }\n            catAxis.Location = AxisLocation.Bottom;\n            if (!string.IsNullOrEmpty(XAxisName))\n            {\n                catAxis.Title = XAxisName;\n                catAxis.TitleStyle = titleStyle;\n                catAxis.ShowGridLines = false;\n            }\n            LinearAxis xAxis = new LinearAxis();\n            xAxis.Orientation = AxisOrientation.X;\n            xAxis.Location = AxisLocation.Bottom;\n            if (!string.IsNullOrEmpty(XAxisName))\n            {\n                xAxis.Title = XAxisName;\n                xAxis.TitleStyle = titleStyle;\n            }\n            xAxis.ShowGridLines = false;\n            if (ReverseXAxis)\n            {\n                xAxis.AxisLabelStyle = new Style(typeof(AxisLabel));\n                Setter removeMinus = new Setter(AxisLabel.StringFormatProperty, \"{0:0.#;0.#}\");\n                xAxis.AxisLabelStyle.Setters.Add(removeMinus);\n            }\n            LinearAxis yAxis = new LinearAxis();\n            yAxis.Orientation = AxisOrientation.Y;\n            yAxis.Location = AxisLocation.Left;\n            if (!string.IsNullOrEmpty(YAxisName))\n            {\n                yAxis.Title = YAxisName;\n                yAxis.TitleStyle = titleStyle;\n            }\n            if (YInterval.HasValue)\n            {\n                yAxis.Interval = YInterval;\n            }\n            if (YMinimum.HasValue)\n            {\n                yAxis.Minimum = YMinimum;\n            }\n            yAxis.ShowGridLines = true;\n            LinearAxis y2Axis = new LinearAxis();\n            y2Axis.Orientation = AxisOrientation.Y;\n            y2Axis.Location = AxisLocation.Right;\n            if (!string.IsNullOrEmpty(Y2AxisName))\n            {\n                y2Axis.Title = Y2AxisName;\n                y2Axis.TitleStyle = titleStyle;\n            }\n            y2Axis.ShowGridLines = false;\n            chtGraph.Series.Clear();\n            foreach (KeyValuePair<string, GraphSeries> kvp in GraphSeriesDict)\n            {\n                Series series = null;\n                Style style = new Style(typeof(LegendItem), this.Resources[\"DefaultLegendItemStyle\"] as Style);\n                if (kvp.Value.UseY2Axis)\n                {\n                    if (!chtGraph.Axes.Contains(y2Axis))\n                    {\n                        chtGraph.Axes.Add(y2Axis);\n                    }\n                }\n                else\n                {\n                    if (!chtGraph.Axes.Contains(yAxis))\n                    {\n                        chtGraph.Axes.Add(yAxis);\n                    }\n                }\n                switch (kvp.Value.Type)\n                {\n                    case GraphType.Column:\n                        ColumnSeries colSeries = new ColumnSeries();\n                        colSeries.ItemsSource = kvp.Value.Data.Where(x => x.Show);\n                        if (kvp.Value.IsStyleCustom)\n                        {\n                            Style colDPStyle = new Style(typeof(ColumnDataPoint), this.Resources[\"ColumnPointStyle\"] as Style);\n                            if (kvp.Value.Color != null)\n                            {\n                                Setter backgroundSetter = new Setter(ColumnDataPoint.BackgroundProperty, kvp.Value.Color);\n                                colDPStyle.Setters.Add(backgroundSetter);\n                            }\n                            colSeries.DataPointStyle = colDPStyle;\n                        }\n                        if (IsXAxisLabelCustom)\n                        {\n                            colSeries.IndependentValuePath = \"Value\";\n                            colSeries.IndependentValueBinding = new Binding(\"XAxis\");\n                        }\n                        else\n                        {\n                            colSeries.IndependentValueBinding = new Binding(\"XValue\");\n                        }\n                        if (!chtGraph.Axes.Contains(catAxis))\n                        {\n                            chtGraph.Axes.Add(catAxis);\n                        }\n                        colSeries.IndependentAxis = catAxis;\n                        colSeries.DependentValueBinding = new Binding(\"YValue\");\n                        if (kvp.Value.UseY2Axis)\n                        {\n                            colSeries.DependentRangeAxis = y2Axis;\n                        }\n                        else\n                        {\n                            colSeries.DependentRangeAxis = yAxis;\n                        }\n                        if (YAxisLabelFormat != null && !string.IsNullOrEmpty(YAxisLabelFormat.Trim()))\n                        {\n                            colSeries.DependentValueBinding.StringFormat = YAxisLabelFormat;\n                        }\n                        if (colSeries.DataPointStyle == null)\n                        {\n                            colSeries.DataPointStyle = new Style(typeof(ColumnDataPoint));\n                        }\n                        AddShowHideSetter(colSeries.DataPointStyle);\n                        series = colSeries;\n                        break;\n                    case GraphType.Line:\n                        LineSeries linSeries = new LineSeries();\n                        linSeries.ItemsSource = kvp.Value.Data.Where(x => x.Show);\n                        linSeries.IndependentValueBinding = new Binding(\"XValue\");\n                        linSeries.DependentValueBinding = new Binding(\"YValue\");\n                        Style linePointStyle = new Style(typeof(LineDataPoint), this.Resources[\"LinePointStyle\"] as Style);\n                        if (kvp.Value.Color != null)\n                        {\n                            Setter backgroundSetter = new Setter(LineDataPoint.BackgroundProperty, kvp.Value.Color);\n                            linePointStyle.Setters.Add(backgroundSetter);\n                        }\n                        linSeries.DataPointStyle = linePointStyle;\n                        if (linSeries.DataPointStyle == null)\n                        {\n                            linSeries.DataPointStyle = new Style(typeof(LineDataPoint));\n                        }\n                        AddShowHideSetter(linSeries.DataPointStyle);\n                        if (kvp.Value.UseY2Axis)\n                        {\n                            linSeries.DependentRangeAxis = y2Axis;\n                        }\n                        else\n                        {\n                            linSeries.DependentRangeAxis = yAxis;\n                        }\n                        linSeries.IndependentAxis = xAxis;\n                        series = linSeries;\n                        style = new Style(typeof(LegendItem), this.Resources[\"LineLegendItemStyle\"] as Style);\n                        break;\n                    case GraphType.Point:\n                        ScatterSeries ptSeries = new ScatterSeries();\n                        ptSeries.ItemsSource = kvp.Value.Data.Where(x => x.Show);\n                        ptSeries.IndependentValueBinding = new Binding(\"XValue\");\n                        ptSeries.DependentValueBinding = new Binding(\"YValue\");\n                        Style scatterPointStyle = new Style(typeof(ScatterDataPoint), this.Resources[\"ScatterPointStyle\"] as Style);\n                        if (kvp.Value.Color != null)\n                        {\n                            Setter backgroundSetter = new Setter(ScatterDataPoint.BackgroundProperty, kvp.Value.Color);\n                            scatterPointStyle.Setters.Add(backgroundSetter);\n                        }\n                        ptSeries.DataPointStyle = scatterPointStyle;\n                        if (ptSeries.DataPointStyle == null)\n                        {\n                            ptSeries.DataPointStyle = new Style(typeof(ScatterDataPoint));\n                        }\n                        AddShowHideSetter(ptSeries.DataPointStyle);\n                        if (kvp.Value.UseY2Axis)\n                        {\n                            ptSeries.DependentRangeAxis = y2Axis;\n                        }\n                        else\n                        {\n                            ptSeries.DependentRangeAxis = yAxis;\n                        }\n                        ptSeries.IndependentAxis = xAxis;\n                        series = ptSeries;\n                        style = new Style(typeof(LegendItem), this.Resources[\"ScatterLegendItemStyle\"] as Style);\n                        break;\n                    default:\n                        break;\n                }\n                if (series != null)\n                {\n                    series.Title = kvp.Key;\n                    chtGraph.Series.Add(series);\n                    if (series.LegendItems.Count > 0)\n                    {\n                        foreach (LegendItem li in series.LegendItems)\n                        {\n                            li.Visibility = kvp.Value.LegendItemVisibility;\n                            li.Style = style;\n                        }\n                    }\n                }\n            }\n            if (LegendItems != null && LegendItems.Count > 0)\n            {\n                foreach (LegendItem lItem in LegendItems)\n                {\n                    if (lItem.DataContext == null)\n                    {\n                        DataPoint dp = new ColumnDataPoint();\n                        dp.Background = lItem.Background;\n                        dp.BorderBrush = lItem.BorderBrush;\n                        lItem.DataContext = dp;\n                    }\n                    Style style = new Style(typeof(LegendItem), this.Resources[\"DefaultLegendItemStyle\"] as Style);\n                    if (lItem.Tag != null && this.Resources.Contains(lItem.Tag))\n                    {\n                        style = new Style(typeof(LegendItem), this.Resources[lItem.Tag] as Style);\n                    }\n                    lItem.Style = style;\n                    chtGraph.Series[chtGraph.Series.Count - 1].LegendItems.Add(lItem);\n                }\n            }\n            if (!ShowLegend)\n            {\n                Style legendStyle = new Style(typeof(Legend), chtGraph.LegendStyle);\n                legendStyle.Setters.Add(new Setter(Legend.WidthProperty, 0.0));\n                legendStyle.Setters.Add(new Setter(Legend.HeightProperty, 1.0));\n                chtGraph.LegendStyle = legendStyle;\n            }\n        }",
    "LastUpdatedDate": "2013-02-21T18:40:46.683-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2010-01-21T09:00:56.703-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Disappearing column bars",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 11577
  },
  "FileAttachments": [
    {
      "FileId": 3730,
      "FileName": "Graph.xaml",
      "DownloadUrl": ".\\3730"
    }
  ],
  "Comments": []
}