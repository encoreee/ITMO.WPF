{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Xaml bindings on the Ribbon.ContextualTabGroupsSource property don't seem to work properly if the binding source is changed after the binding has been established.\n \nThe RibbonWindowMvvm sample can be easily modified the reproduce the issue. In UserControlMvvm.xaml, change the ribbon's bindings to:\n \nItemsSource=\"{Binding TabDataCollection}\"\nContextualTabGroupsSource=\"{Binding ContextualTabGroupDataCollection}\"\n \nThen in the code-behind set the ribbon's data context after the call to InitializeComponent():\n \nribbon.DataContext = ViewModel.ViewModelData.RibbonData;\n \nAfter these changes, the tabs all show up properly, but the contextual headers are not shown. In addition, the application is very \"laggy\" and switching tabs seems impossible.\n \nWork-arounds:\n \nOption 1) Set the DataContext in the xaml so its available before the binding occurs:\n \nDataContext=\"{Binding Source={x:Static data:ViewModelData.RibbonData}}\n \nOption 2) Bind relative to the element so that changes to the DataContext are seen:\n \nContextualTabGroupsSource=\"{Binding ElementName=ribbon, Path=DataContext.ContextualTabGroupDataCollection}\"\n \nOption 3) Explicitly set the ContextualTabGroupsSource in the code-behind:\n \nribbon.ContextualTabGroupsSource = ViewModel.ViewModelData.RibbonData.ContextualTabGroupDataCollection;",
    "LastUpdatedDate": "2013-02-21T18:40:12.96-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2011-04-01T13:30:56.437-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Ribbon ContextualTabGroupsSource Binding Problem",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 5,
    "Id": 15630
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I second this issue. The ribbon doesn't seem to bind anything, since in the debugger it showcases that always \"0\" elements are in the contextual tabs group collection albeit I've added like 3 to it in my VM.\r\nThe behavior is still odd, sometimes it messes up the layout and rendering of the other tabs.",
      "PostedDate": "2011-10-21T08:13:10.47-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Although the binding doesn't work like it should, the good news is that I can confirm that Option 2 works great. So should you look for a solution, I'd recommend you to pick that one.",
      "PostedDate": "2011-10-21T08:22:17.59-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-11-09T00:27:19.533-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I can also confirm this issue and that option 2) resolved the issue for me too.\r\n\r\n By running the debugger through the ribbon code provided by Microsoft, it seems that when binding the contextual groups as described in the issue, the Contextual the ribbon goes into an infinite meassure/invalidate meassure loop which results in poor performance of the WPF application and the ribbon not rendering correclty.\r\nI actually saw in the code that there was a comment on a boolean flag called \"WaitinfForMeasurement\" which said that this was implemented to avoid the meassure/invaldiate meassure loop. Apparently, it is not working :-)\r\n\r\n",
      "PostedDate": "2011-11-09T00:31:44.73-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Regarding my previous comment:\r\nWhile Option 2) seems to resolve the issue at first glance, the infinite meassure loop wil reinccour if the data which contexttualtab group is bound is changed somehow during runtime , e.g. my raising property changes due to a new collection or binding to a observablecollection.\r\n\r\nI have chosen to just extend the control creating new properties to bind to and managing the whole thing in the controls code behind. Howewer it requires a lot of unncecessary code and less flexibility because i copy data rather than actually binding to it, so i really belive this is an issue which should be fixed rather quickly. ",
      "PostedDate": "2011-11-09T04:43:24.49-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-06-05T17:49:09.483-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-10-12T06:10:37.813-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:40:12.96-08:00",
      "Id": -2147483648
    }
  ]
}