{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "DatePicker",
      "DisplayName": "DatePicker"
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "I have bound a DatePicker to a property in my class (using Mode=TwoWay so the binding will work).  When I type in a new value in the DatePicker, the set in my property is called twice.  Looking at the stack trace, the first time it's called from DatePicker.TextBox_LostFocus.  The second time it is called from DatePicker.Calendar_SelectedDatesChanged which is called from CalendarSelectionChangedEventArgs.InvokeEventHandler.\n \nHere is the stacktrace from the first time it's called (from the point where WPFToolkit is first involved):\n>\tInGen.UtilityBilling.Models.dll!InGen.UtilityBilling.Models.WorkOrderCollectionViewModel.BeginScheduledDateFilter.set(System.DateTime? value = {12/12/2008 12:00:00 AM})\n \t[Native to Managed Transition]\t\n \t[Managed to Native Transition]\t\n \tPresentationFramework.dll!MS.Internal.Data.PropertyPathWorker.SetValue(object item, object value) + 0xb1 bytes\t\n \tPresentationFramework.dll!MS.Internal.Data.ClrBindingWorker.UpdateValue(object value) + 0x70 bytes\t\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.UpdateSource(object value = {12/12/2008 12:00:00 AM}) + 0x80 bytes\t\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.UpdateValue() + 0x62 bytes\t\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.Update(bool synchronous) + 0x60 bytes\t\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.Dirty() + 0x33 bytes\t\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.SetValue(System.Windows.DependencyObject d, System.Windows.DependencyProperty dp, object value) + 0x27 bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp = {SelectedDate}, object value = {12/12/2008 12:00:00 AM}, System.Windows.PropertyMetadata metadata = {System.Windows.FrameworkPropertyMetadata}, bool coerceWithDeferredReference = false, System.Windows.OperationType operationType = Unknown, bool isInternal) + 0x397 bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty dp, object value) + 0x2e bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.SelectedDate.set(System.DateTime? value = {12/12/2008 12:00:00 AM}) + 0x38 bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.SetSelectedDate() + 0x22b bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.ProcessDatePickerKey(System.Windows.Input.KeyEventArgs e = {System.Windows.Input.KeyEventArgs}) + 0x8c bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.TextBox_KeyDown(object sender = {Microsoft.Windows.Controls.Primitives.DatePickerTextBox: 12/12/2008}, System.Windows.Input.KeyEventArgs e = {System.Windows.Input.KeyEventArgs}) + 0x2c bytes\t\n \n \nAnd the stacktrace from the second time it's called:\n>\tInGen.UtilityBilling.Models.dll!InGen.UtilityBilling.Models.WorkOrderCollectionViewModel.BeginScheduledDateFilter.set(System.DateTime? value = {12/12/2008 12:00:00 AM}) \n \t[Native to Managed Transition]\t\n \t[Managed to Native Transition]\t\n \tPresentationFramework.dll!MS.Internal.Data.PropertyPathWorker.SetValue(object item, object value) + 0xb1 bytes\t\n \tPresentationFramework.dll!MS.Internal.Data.ClrBindingWorker.UpdateValue(object value) + 0x70 bytes\t\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.UpdateSource(object value = {12/12/2008 12:00:00 AM}) + 0x80 bytes\t\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.UpdateValue() + 0x62 bytes\t\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.Update(bool synchronous) + 0x60 bytes\t\n \tPresentationFramework.dll!System.Windows.Data.BindingExpressionBase.Dirty() + 0x33 bytes\t\n \tPresentationFramework.dll!System.Windows.Data.BindingExpression.SetValue(System.Windows.DependencyObject d, System.Windows.DependencyProperty dp, object value) + 0x27 bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp = {SelectedDate}, object value = {12/12/2008 12:00:00 AM}, System.Windows.PropertyMetadata metadata = {System.Windows.FrameworkPropertyMetadata}, bool coerceWithDeferredReference = false, System.Windows.OperationType operationType = Unknown, bool isInternal) + 0x397 bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty dp, object value) + 0x2e bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.SelectedDate.set(System.DateTime? value = {12/12/2008 12:00:00 AM}) + 0x38 bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.Calendar_SelectedDatesChanged(object sender = {12/12/2008 12:00:00 AM}, System.Windows.Controls.SelectionChangedEventArgs e = {Microsoft.Windows.Controls.CalendarSelectionChangedEventArgs}) + 0x1c0 bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.CalendarSelectionChangedEventArgs.InvokeEventHandler(System.Delegate genericHandler = {Method = {Void Calendar_SelectedDatesChanged(System.Object, System.Windows.Controls.SelectionChangedEventArgs)}}, object genericTarget = {12/12/2008 12:00:00 AM}) + 0x56 bytes\t\n \tPresentationCore.dll!System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate handler, object target) + 0x27 bytes\t\n \tPresentationCore.dll!System.Windows.RoutedEventHandlerInfo.InvokeHandler(object target, System.Windows.RoutedEventArgs routedEventArgs) + 0x3e bytes\t\n \tPresentationCore.dll!System.Windows.EventRoute.InvokeHandlersImpl(object source = {12/12/2008 12:00:00 AM}, System.Windows.RoutedEventArgs args = {Microsoft.Windows.Controls.CalendarSelectionChangedEventArgs}, bool reRaised = false) + 0x1bf bytes\t\n \tPresentationCore.dll!System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject sender = {12/12/2008 12:00:00 AM}, System.Windows.RoutedEventArgs args = {Microsoft.Windows.Controls.CalendarSelectionChangedEventArgs}) + 0x79 bytes\t\n \tPresentationCore.dll!System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs e) + 0x17 bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.Calendar.OnSelectedDatesChanged(System.Windows.Controls.SelectionChangedEventArgs e = {Microsoft.Windows.Controls.CalendarSelectionChangedEventArgs}) + 0x25 bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.Calendar.OnSelectedDatesCollectionChanged(System.Windows.Controls.SelectionChangedEventArgs e = {Microsoft.Windows.Controls.CalendarSelectionChangedEventArgs}) + 0xc4 bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.SelectedDatesCollection.RaiseSelectionChanged(System.Collections.IList removedItems = Count = 1, System.Collections.IList addedItems = Count = 1) + 0x53 bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.SelectedDatesCollection.InsertItem(int index = 0, System.DateTime item = {12/12/2008 12:00:00 AM}) + 0x30f bytes\t\n \tmscorlib.dll!System.Collections.ObjectModel.Collection<System.DateTime>.Add(System.DateTime item) Line 59\tC#\n \tWPFToolkit.dll!Microsoft.Windows.Controls.Calendar.OnSelectedDateChanged(System.Windows.DependencyObject d = {12/12/2008 12:00:00 AM}, System.Windows.DependencyPropertyChangedEventArgs e = {System.Windows.DependencyPropertyChangedEventArgs}) + 0x1ca bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) + 0x4a bytes\t\n \tPresentationFramework.dll!System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) + 0x50 bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs args) + 0x2c bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex entryIndex = {System.Windows.EntryIndex}, System.Windows.DependencyProperty dp = {SelectedDate}, System.Windows.PropertyMetadata metadata, System.Windows.EffectiveValueEntry oldEntry, ref System.Windows.EffectiveValueEntry newEntry = {System.Windows.EffectiveValueEntry}, bool coerceWithDeferredReference, System.Windows.OperationType operationType) + 0x515 bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, System.Windows.OperationType operationType, bool isInternal) + 0x1eb bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty dp, object value) + 0x2e bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.Calendar.SelectedDate.set(System.DateTime? value = {12/12/2008 12:00:00 AM}) + 0x38 bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.CoerceSelectedDate(System.Windows.DependencyObject d = {12/11/2008 12:00:00 AM}, object value = {12/12/2008 12:00:00 AM}) + 0x68 bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.ProcessCoerceValue(System.Windows.DependencyProperty dp = {SelectedDate}, System.Windows.PropertyMetadata metadata, ref System.Windows.EntryIndex entryIndex = {System.Windows.EntryIndex}, ref int targetIndex = 870, ref System.Windows.EffectiveValueEntry newEntry = {System.Windows.EffectiveValueEntry}, ref System.Windows.EffectiveValueEntry oldEntry = {System.Windows.EffectiveValueEntry}, ref object oldValue = {12/11/2008 12:00:00 AM}, object baseValue = {12/12/2008 12:00:00 AM}, System.Windows.CoerceValueCallback coerceValueCallback, bool coerceWithDeferredReference, bool skipBaseValueChecks) + 0x36 bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex entryIndex = {System.Windows.EntryIndex}, System.Windows.DependencyProperty dp = {SelectedDate}, System.Windows.PropertyMetadata metadata = {System.Windows.FrameworkPropertyMetadata}, System.Windows.EffectiveValueEntry oldEntry, ref System.Windows.EffectiveValueEntry newEntry = {System.Windows.EffectiveValueEntry}, bool coerceWithDeferredReference, System.Windows.OperationType operationType = Unknown) + 0x361 bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, System.Windows.OperationType operationType, bool isInternal) + 0x1eb bytes\t\n \tWindowsBase.dll!System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty dp, object value) + 0x2e bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.SelectedDate.set(System.DateTime? value = {12/12/2008 12:00:00 AM}) + 0x38 bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.SetSelectedDate() + 0x22b bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.ProcessDatePickerKey(System.Windows.Input.KeyEventArgs e = {System.Windows.Input.KeyEventArgs}) + 0x8c bytes\t\n \tWPFToolkit.dll!Microsoft.Windows.Controls.DatePicker.TextBox_KeyDown(object sender = {Microsoft.Windows.Controls.Primitives.DatePickerTextBox: 12/12/2008}, System.Windows.Input.KeyEventArgs e = {System.Windows.Input.KeyEventArgs}) + 0x2c bytes",
    "LastUpdatedDate": "2013-02-21T18:41:39.24-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2008-12-13T06:48:50.943-08:00",
    "Status": {
      "Name": "Active",
      "Id": 2
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "DatePicker sets bound data twice on change",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 8526
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "We have filed a bug in our internal database to be fixed in a future release.",
      "PostedDate": "2009-02-18T17:46:50.49-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-02-18T17:46:51.19-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-04-21T02:48:22.487-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:41:39.24-08:00",
      "Id": -2147483648
    }
  ]
}