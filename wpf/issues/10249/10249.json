{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "I would like to change the default ElementStyle and EditingStyle of the DataGridColumns to match our company UI style.\n \nAssociated Discussion: http://wpf.codeplex.com/Thread/View.aspx?ThreadId=51163\n \n------------------------------\n \nI tried to some up with a workaround but I don't know why it doesn't work:\n \n1. Create a new Column \"NewDataGridTextColumn\" that inherits from DataGridTextColumn\n2. Create a new class \"DataGridTextElement\" that inherits from TextBlock\n3. Create a new class \"DataGridTextEditingElement\" that inherits from TextBox\n4. Override the Generate(Editing)Element methods in the column and create the new classes DataGridTextElement and DataGridTextEditingElement.\n5. Use this new column within the DataGrid.\n \nThe attached file shows a small sample solution that implements this approach. Unfortunately, in edit mode the DataGridTextEditingElement isn't shown correct. Has anyone an idea how to get this work?\n \nthx\n  jbe",
    "LastUpdatedDate": "2013-02-21T18:41:07.707-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2009-07-02T07:54:41.193-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "DataGrid: Define new default ElementStyle and EditingElementStyle",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 10249
  },
  "FileAttachments": [
    {
      "FileId": 3174,
      "FileName": "DataGridDemo.zip",
      "DownloadUrl": ".\\3174"
    }
  ],
  "Comments": [
    {
      "Message": "I just forgot the BasedOn in the theme „Generic.xaml“. Add the BasedOn attribute and the approach shown above should work.\r\n  \r\n<Style TargetType=\"local:DataGridTextEditingElement\" BasedOn=\"{StaticResource {x:Type TextBox}}\">\r\n    <Setter Property=\"Foreground\" Value=\"Red\"/>\r\n</Style>\r\n  \r\nHowever, my approach copies some code from the DataGridColumn base class into the own Column class because it is all internal.\r\n  \r\n@Microsoft: Please consider to open some of the “internal” API so that we can inherit from the DataGridColumn classes.",
      "PostedDate": "2009-07-02T08:05:23.833-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-07-16T01:04:19.83-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Hello\r\n\r\n I have difficulties to use this approach when I want to use a simple usercontrol (textbox + button) instead of the textbox in generateeditingelement.\r\n\r\nIs it possible that you post an example showing how to bind the textbox in this case?\r\n\r\nRegards\r\nKlaus Wiesel",
      "PostedDate": "2010-03-19T14:41:49.27-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:41:07.707-08:00",
      "Id": -2147483648
    }
  ]
}