{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Hi,\n \nthe application crashes when i am sorting a column that has System.DBNull() Values.\n \nEX.GetType:System.InvalidOperationException\nEX.Message:The SortDescriptions added are not valid. The probable solutions are to set the CanUserSort on the Column to false, or to use SortMemberPath property on the Column, or to handle the Sorting event on DataGrid.\nEX.Stacktrace: bei Microsoft.Windows.Controls.DataGrid.DefaultSort(DataGridColumn column, Boolean clearExistingSortDescriptions); bei Microsoft.Windows.Controls.DataGrid.OnSorting(DataGridSortingEventArgs eventArgs); bei Microsoft.Windows.Controls.DataGrid.PerformSort(DataGridColumn sortColumn); bei Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnClick(); bei System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(MouseButtonEventArgs e); bei Microsoft.Windows.Controls.Primitives.DataGridColumnHeader.OnMouseLeftButtonUp(MouseButtonEventArgs e); bei System.Windows.UIElement.OnMouseLeftButtonUpThunk(Object sender, MouseButtonEventArgs e); bei System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget); bei System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target); bei System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs); bei System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised); bei System.Windows.UIElement.ReRaiseEventAs(DependencyObject sender, RoutedEventArgs args, RoutedEvent newEvent); bei System.Windows.UIElement.CrackMouseButtonEventAndReRaiseEvent(DependencyObject sender, MouseButtonEventArgs e); bei System.Windows.UIElement.OnMouseUpThunk(Object sender, MouseButtonEventArgs e); bei System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget); bei System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target); bei System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs); bei System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised); bei System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args); bei System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted); bei System.Windows.Input.InputManager.ProcessStagingArea(); bei System.Windows.Input.InputManager.ProcessInput(InputEventArgs input); bei System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport); bei System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel); bei System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled); bei System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled); bei MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled); bei MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o); bei System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Boolean isSingleParameter); bei System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Boolean isSingleParameter, Delegate catchHandler); bei System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, Object args, Boolean isSingleParameter, Delegate catchHandler); bei System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Boolean isSingleParameter); bei System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, Object arg); bei MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\n \nregards \nironvegeta",
    "LastUpdatedDate": "2013-02-21T18:40:56.94-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2009-09-25T00:43:01.363-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Sorting in datagrid Bug with System.DBNull()",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 10686
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Check the following link:\r\n\r\nhttp://stackoverflow.com/questions/1645823/wpf-datagrid-sort-on-column-with-null-elements",
      "PostedDate": "2009-12-29T02:33:44.633-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I understand the Stackoverflow thread has an answer, but doing the following for 100 different datagrids is just overkill. Can't DataGrid support nulls? \r\n \r\n  10:                  {  11:                      case \"Id\":  12:                          myCompare = (a, b) => { return a.Id.CompareTo(b.Id) * dir; };  13:                          break;  14:                      case \"Name\":  15:                          myCompare = (a, b) => { return a.Name.CompareTo(b.Name) * dir; };  16:                          break;  17:                      case \"Position\":  18:                          myCompare = (a, b) => { return a.Position.CompareTo(b.Position) * dir; };  19:                          break;  20:                      case \"Tel\":  21:                          myCompare = (a, b) => { return a.Telephone.CompareTo(b.Telephone) * dir; };  22:                          break;  23:                      case \"Email\":  24:                          myCompare = (a, b) => { return a.Email.CompareTo(b.Email) * dir; };  25:                          break;  26:                      case \"Enabled\":  27:                          myCompare = (a, b) => { return a.Enabled.CompareTo(b.Enabled) * dir; };  28:                          break;  29:                      case \"City\":  30:                          myCompare = (a, b) => { return a.City.CompareTo(b.City) * dir; };  31:                          break;  32:                      case \"Country\":  33:                          myCompare = (a, b) => { return a.Country.CompareTo(b.Country) * dir; };  34:                          break;  35:                      default:  36:                          myCompare = (a, b) => { return 0; };  37:                          break;  38:                  }\r\n\r\n\r\n",
      "PostedDate": "2010-03-26T14:19:20.357-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:40:56.94-08:00",
      "Id": -2147483648
    }
  ]
}