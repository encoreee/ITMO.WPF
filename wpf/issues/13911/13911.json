{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Attached is a simple application thast loads 100K ColorDetails { String Name, String Code, Brush BgColor } objects in a virtualised list box. \nAfter running the application, keep the task manager Memory View loaded by side and start scrolling using mouse click on the scrollbar of the list box or by using Page Up / Down keys.\nAfter a few minutes of random bidirectional scrolling, the application would hog around 500MB of memory!\n \nEven if you stop for few minutes waiting for the GC to happen, it wouldnt. Closing the window automatically comes back to the same memory level.\n \nWhy so? Doesn't virtualisation perform GC for the virtualised items?",
    "LastUpdatedDate": "2013-02-21T18:40:26.167-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2010-08-05T03:01:46.91-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Scrolling Hogs Memory.",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 3,
    "Id": 13911
  },
  "FileAttachments": [
    {
      "FileId": 4711,
      "FileName": "Basic Dot Net 3.5 VS2008 App.zip",
      "DownloadUrl": ".\\4711"
    }
  ],
  "Comments": []
}