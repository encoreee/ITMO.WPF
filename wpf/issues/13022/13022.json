{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "selecteditem property automatically set null when i set the grid.IsEnabled = false",
    "LastUpdatedDate": "2013-02-21T18:40:34.203-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2010-05-13T01:44:39.387-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Datagrid's SelectedItem automatically set null when grid control is disabled",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 10,
    "Id": 13022
  },
  "FileAttachments": [
    {
      "FileId": 5697,
      "FileName": "IsEnabledProblem.png",
      "DownloadUrl": ".\\5697"
    }
  ],
  "Comments": [
    {
      "Message": "In new version of DataGrid IsEnabledChanged was changed:\r\n\r\nprivate static void OnIsEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            d.CoerceValue(CanUserAddRowsProperty);\r\n            d.CoerceValue(CanUserDeleteRowsProperty);\r\n\r\n            //this was added in new version !!!\r\n            if (!(bool)(e.NewValue))\r\n            {\r\n                ((DataGrid)d).UnselectAllCells();\r\n            }\r\n\r\n            // Many commands use IsEnabled to determine if they are enabled or not\r\n            CommandManager.InvalidateRequerySuggested();\r\n        }\r\n\r\nTo solve this issue I've overriden this behaviour in my subclass of DataGrid:\r\n\r\nIsEnabledProperty.OverrideMetadata(typeof(MyDataGrid), new FrameworkPropertyMetadata(new PropertyChangedCallback(OnIsEnabledChanged)));\r\nWhere my OnIsEnabledChanged does not call UnselectAllCells();\r\n\r\nI have the question what was the reason to add that call in the new version? What are the consequences of overriding it? \r\n",
      "PostedDate": "2010-06-09T01:23:37.053-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-06-09T01:23:42.28-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-06-17T03:19:57.117-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I have found disappearing of selected item a very annoying change.  It is also seriously breaks a lot of my code and will break people’s code too.\r\n\r\nI have a number of UI with master-details layout.  Before I can select a record in Data Grid and see details bounded to SelectedItem.  If I want to edit details I click edit. Data Grid becomes disabled, and detail controls enabled for editing. \r\n\r\nNow, when I click edit Data Grid becomes disabled, current selection disappear, and all details records become blank (as being data bound to the null selection in Grid).\r\n\r\nSo it seems that, instead of disabling DataGrid now I gave to intercept mouse & keyboard events to manually ‘disable Data Grid’, or follow Maciej's suggestion. Both ways are not a good permanent solution for the control of that visibility. \r\n\r\nAnd why do Data Grid need to lose selected item when disabled? List View doesn’t. \r\n",
      "PostedDate": "2010-06-21T06:19:23.9-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Actually I would suggest moving impact of that issue from Low to High, since a lot of folks are using master-detail pattern.",
      "PostedDate": "2010-06-21T06:22:11.04-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-08-12T05:25:28.923-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Its so annoying..\r\nAlso when DataGrid.IsEnabled back to True, the SelectedItem property doesn refresh self from viewmodel. So MVVM pattern dosnt help to persist selected item.\r\nIs there any workaround to solve this issue without changing that behaviour in a custom datagrid?",
      "PostedDate": "2010-08-12T05:40:34.03-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-09-03T01:16:19.3-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-09-28T07:57:27.537-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-10-12T11:43:12.31-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-02-24T10:39:25.623-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-03-07T19:27:50.66-08:00",
      "Id": -2147483648
    },
    {
      "Message": "This completely breaks master / detail view!  I'm still on 3.5 + toolkit, did this behavior make it into 4?",
      "PostedDate": "2011-03-07T19:30:24.65-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Its really a big problem of datagrid when using MVVM",
      "PostedDate": "2011-04-27T02:59:26.317-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-05-24T09:26:43.57-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Overriding is not solving the problem. Is there any other way to resolve this problem?",
      "PostedDate": "2011-06-01T03:30:40.71-07:00",
      "Id": -2147483648
    },
    {
      "Message": "It solved the issue for us (We haven't had any issues with that so far), what kind of problems do you have?",
      "PostedDate": "2011-06-01T04:13:06.03-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-06-01T22:53:58.117-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-06-07T01:11:27.52-07:00",
      "Id": -2147483648
    },
    {
      "Message": "According to your solution it should work, but i am confused that first the base OnIsEnabledChanged and then my override function OnIsEnabledChanged is fired. You can see the attachment for call stack",
      "PostedDate": "2011-06-07T01:11:29.563-07:00",
      "Id": -2147483648
    },
    {
      "Message": "It is important to call overridemetadata before datagrid is used, otherwise both metadata are registered (see: http://msdn.microsoft.com/en-us/library/ms754209.aspx). We override this property on application startup.",
      "PostedDate": "2011-06-07T04:15:50.477-07:00",
      "Id": -2147483648
    },
    {
      "Message": "i am also using it in Static constructor\r\n\r\npublic class MyGrid: DataGrid\r\n    {\r\n        static MyGrid()\r\n        {\r\n                 IsEnabledProperty.OverrideMetadata(typeof(MyGrid), new FrameworkPropertyMetadata(new PropertyChangedCallback(OnIsEnabledChanged)));\r\n        }\r\n....\r\n}",
      "PostedDate": "2011-06-07T06:38:08.79-07:00",
      "Id": -2147483648
    },
    {
      "Message": "@ashrafulasif That's the problem you cannot register it in static constructor, because DataGrids's static constructor will be called before yours. That's why we override it in application startup.\r\n\r\n public partial class App : Application\r\n    {\r\n        protected override void OnStartup(StartupEventArgs e)\r\n        {\r\n           //here\r\n            base.OnStartup(e);\r\n        }\r\n    }",
      "PostedDate": "2011-06-07T08:10:39.077-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Thanks the provided way is ok to resolve this problem",
      "PostedDate": "2011-06-07T09:21:42.507-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2011-06-18T20:58:31.693-07:00",
      "Id": -2147483648
    },
    {
      "Message": "This is still a really annoying behaviour.  I suppose this will also make it into WPF 4.5.  It would be nice if this behaviour could at least be controlled via property: DataGrid.SelectionToNullOnDisable = false;\r\n\r\nIt doesn't appear that this ever got onto MS radar.",
      "PostedDate": "2012-05-17T08:27:19.627-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Shortly after adding my last comment I ran a test and found that the behaviour has indeed changed in .NET 4.5 - disabling the Grid does NOT set the SelectedItem to null.\r\n\r\nHowever, this opens up a can of worms as .NET 4.5 is not a side-by-side installation but a replacement.",
      "PostedDate": "2012-05-17T11:20:35.543-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:40:34.203-08:00",
      "Id": -2147483648
    }
  ]
}