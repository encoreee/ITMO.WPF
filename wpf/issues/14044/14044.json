{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Forgive me, perhaps I'm missing something...  but how do I get the new WPFToolkit DataPicker to NOT throw an exception, and crash, \nwhen I type in an invalid date (eg 17/18/2010), then make the control lose focus ?\n \nI tried declaring a new UserControl, based on the DatePicker control, and adding whatever events I could think of to catch such an \nevent, but none seem to prevent the Exception from being shown.\n \nFor example:\n \n    public class DatePickerWithValidation : DatePicker\n    {\n        public override void OnApplyTemplate()\n        {\n            this.DateValidationError += new EventHandler<DatePickerDateValidationErrorEventArgs>(DatePickerWithValidation_DateValidationError);\n            base.OnApplyTemplate();\n        }\n        void DatePickerWithValidation_DateValidationError(object sender, DatePickerDateValidationErrorEventArgs e)\n        {\n            e.ThrowException = false;\n \n            DateTime result;\n            if (!DateTime.TryParse(e.Text.Trim(), out result))\n            {\n                MessageBox.Show(\"Invalid date\", \"Error\");\n            }\n        }\n        protected override void OnDateValidationError(DatePickerDateValidationErrorEventArgs e)\n        {\n            e.ThrowException = false;\n \n            base.OnDateValidationError(e);\n        }\n \nI know, I know...  I just need the \"override\" function, not both of these...  but I was trying anything by this\npoint !!!\n \nWhen I used this code, I entered my invalid date, it threw an exception...   and THEN ran my two \"DateValidationError\" \nfunctions, which tell the DatePicker not to...  errrr..  throw an exception.\n \n \nI've looked at the \"DatePicker.cs\" source code, where the exception is thrown by the DateTime.Parse function:\n \n        private DateTime? ParseText(string text)\n        {\n            DateTime newSelectedDate;\n \n            // TryParse is not used in order to be able to pass the exception to the TextParseError event\n            try\n            {\n                newSelectedDate = DateTime.Parse(text, DateTimeHelper.GetDateFormat(DateTimeHelper.GetCulture(this)));\n                ....\n            }\n            catch (FormatException ex)\n            {\n                ....\n            }\n \n \nProblem is, this code only checks for a FormatException exception, but even though my Output window suggests \nthat a \"System.FormatException\" has occurred, the catch(...) code does not get run:\n \n           A first chance exception of type 'System.FormatException' occurred in mscorlib.dll\n           Additional information: String was not recognized as a valid DateTime.\n \nI also tried to replace this \"DateTime.Parse\" with a \"DateTime.TryParse\", and to replace the catch with\n            catch (Exception ex)\n \nbut each of these just makes the exception get thrown elsewhere, on the \"base.OnLostFocus\" function  (which I can't step into):\n \n    public sealed partial class DatePickerTextBox : TextBox\n    {\n        ...\n        protected override void OnLostFocus(RoutedEventArgs e)\n        {\n            base.OnLostFocus(e);\n            ChangeVisualState(true);\n        }\n \n \n \nI surrender...\nIs this a bug, or am I missing something ?\n \nI just want Forgive me, perhaps I'm missing something...  but how do I get the new WPFToolkit DataPicker to NOT throw an exception, and crash, \nwhen I type in an invalid date (eg 17/18/2010), then make the control lose focus ?\n \nI tried declaring a new UserControl, based on the DatePicker control, and adding whatever events I could think of to catch such an \nevent, but none seem to prevent the Exception from being shown.\n \nFor example:\n \n    public class DatePickerWithValidation : DatePicker\n    {\n        public override void OnApplyTemplate()\n        {\n            this.DateValidationError += new EventHandler<DatePickerDateValidationErrorEventArgs>(DatePickerWithValidation_DateValidationError);\n            base.OnApplyTemplate();\n        }\n        void DatePickerWithValidation_DateValidationError(object sender, DatePickerDateValidationErrorEventArgs e)\n        {\n            e.ThrowException = false;\n \n            DateTime result;\n            if (!DateTime.TryParse(e.Text.Trim(), out result))\n            {\n                MessageBox.Show(\"Invalid date\", \"Error\");\n            }\n        }\n        protected override void OnDateValidationError(DatePickerDateValidationErrorEventArgs e)\n        {\n            e.ThrowException = false;\n \n            base.OnDateValidationError(e);\n        }\n \nI know, I know...  I just need the \"override\" function, not both of these...  but I was trying anything by this\npoint !!!\n \nWhen I used this code, I entered my invalid date, it threw an exception...   and THEN ran my two \"DateValidationError\" \nfunctions, which tell the DatePicker not to...  errrr..  throw an exception.\n \n \nI've looked at the \"DatePicker.cs\" source code, where the exception is thrown by the DateTime.Parse function:\n \n        private DateTime? ParseText(string text)\n        {\n            DateTime newSelectedDate;\n \n            // TryParse is not used in order to be able to pass the exception to the TextParseError event\n            try\n            {\n                newSelectedDate = DateTime.Parse(text, DateTimeHelper.GetDateFormat(DateTimeHelper.GetCulture(this)));\n                ....\n            }\n            catch (FormatException ex)\n            {\n                ....\n            }\n \n \nProblem is, this code only checks for a FormatException exception, but DateTime.Parse doesn't seem to be throwing this type \nof exception, so it doesn't get handled.  Having said that, my Output window suggests perhaps it is this type of Exception,\nor it's being thrown elsewhere, so isn't being caught:\n \n           A first chance exception of type 'System.FormatException' occurred in mscorlib.dll\n           Additional information: String was not recognized as a valid DateTime.\n \nI also tried to replace this \"DateTime.Parse\" with a \"DateTime.TryParse\", and to replace the catch with\n            catch (Exception ex)\n \nbut each of these just makes the exception get thrown elsewhere, on the \"base.OnLostFocus\" function  (which I can't step into):\n \n    public sealed partial class DatePickerTextBox : TextBox\n    {\n        ...\n        protected override void OnLostFocus(RoutedEventArgs e)\n        {\n            base.OnLostFocus(e);\n            ChangeVisualState(true);\n        }\n \nI also tried changing the Binding on this control to a string (rather than DateTime) variable, then removing the \nbinding completely, but exactly the same Exception problem occurred.\n \n \nI surrender...\nIs this a bug, or am I missing something ?",
    "LastUpdatedDate": "2013-04-12T05:38:22.853-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2010-08-19T04:41:07.51-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "DatePicker: Always throws an exception, when a valid date is encountered.",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 14044
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Microsoft have to do something or suggest us how to handle this situation because of only this issue and end user can get easily pissed off... and all your effort in your entire project will become zero... :(",
      "PostedDate": "2013-04-12T05:38:22.853-07:00",
      "Id": -2147483648
    }
  ]
}