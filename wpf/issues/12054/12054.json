{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "I couldn't narrow down the exact course of events needed to reproduce the problem. But it seems that sometimes when the text box text changes due to IsTextCompletionEnabled the underlying Text property of the AutoCompleteBox doesn't get updated. The following fix for UpdateTextValue worked for me:\n \n        /// <summary>\n        /// Updates both the text box value and underlying text dependency \n        /// property value if and when they change. Automatically fires the \n        /// text changed events when there is a change.\n        /// </summary>\n        /// <param name=\"value\">The new string value.</param>\n        /// <param name=\"userInitiated\">A nullable bool value indicating whether\n        /// the action was user initiated. In a user initiated mode, the \n        /// underlying text dependency property is updated. In a non-user \n        /// interaction, the text box value is updated. When user initiated is \n        /// null, all values are updated.</param>\n        private void UpdateTextValue(string value, bool? userInitiated)\n        {\n            // Update the Text dependency property\n            if ((userInitiated == null || userInitiated == true) && Text != value)\n            {\n                _ignoreTextPropertyChange++;\n\t\t\t\tText = value ?? string.Empty;\n#if SILVERLIGHT\n                OnTextChanged(new RoutedEventArgs());\n#else\n                OnTextChanged(new RoutedEventArgs(TextChangedEvent));\n#endif\n            }\n \n            // Update the TextBox's Text dependency property\n            if ((userInitiated == null || userInitiated == false) && TextBox != null && TextBox.Text != value)\n            {\n                _ignoreTextPropertyChange++;\n                TextBox.Text = value ?? string.Empty;\n \n                // Text dependency property value was set, fire event\n                if (Text != value || Text == null)\n\t\t\t\t{\n\t\t\t\t\tText = value ?? string.Empty;\n#if SILVERLIGHT\n                    OnTextChanged(new RoutedEventArgs());\n#else\n                    OnTextChanged(new RoutedEventArgs(TextChangedEvent));\n#endif\n                }\n            }\n        }\n \nThe crucial line of code is \"if (Text != value || Text == null)\" originally it was \"if (Text == value || Text == null)\" and of course Text = value. It's strange to fire the OnTextChanged event when the Text itself isn't changed at all!\n \nHope this helps.\n \nGr.\n \nLokhan Wong\nDTZ Zadelhoff v.o.f.",
    "LastUpdatedDate": "2013-02-21T18:40:42.193-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2010-03-10T02:10:54.077-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "AutoCompleteBox Text Property not the same as TextBox.Text property fix",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 12054
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Thanks Lokhan, definitely helpful. I'll make a note of this.",
      "PostedDate": "2010-03-10T12:24:47.78-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:40:42.193-08:00",
      "Id": -2147483648
    }
  ]
}