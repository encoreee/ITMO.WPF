{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "DataGrid",
      "DisplayName": "DataGrid"
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "I believe I have found a bug in the way the DataGrid from the WPF Toolkit handles resizing when using RowDetailTemplates.\n \nMore specifically, I use a RowDetailTemplate that contains content aligned to the right (originally, it was a textbox that was supposed to fill all the space, but for the purpose of reporting this issue, it is simpler to demonstrate with a right-aligned text block).\nWhen the width of the datagrid is increased (window is made wider), the width of the RowDetail-area is also increased, which is fine.\nIf, then, the width is decreased again, the RowDetail area stays wide, which means right-aligned contents disappears.\n \nHere is a minimal demonstrator:\n \n<Window x:Class=\"QuickTest.Window1\"    \n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:toolkit=\"http://schemas.microsoft.com/wpf/2008/toolkit\"\n        Title=\"Window1\" Height=\"300\" Width=\"300\">\n    <toolkit:DataGrid AutoGenerateColumns=\"False\" SelectionUnit=\"FullRow\" \n                          RowDetailsVisibilityMode=\"VisibleWhenSelected\">\n        <toolkit:DataGrid.Columns>\n            <toolkit:DataGridTextColumn Header=\"Sample column - click empty row\" Width=\"*\"></toolkit:DataGridTextColumn>\n        </toolkit:DataGrid.Columns>\n        <toolkit:DataGrid.RowDetailsTemplate>\n            <DataTemplate>\n                <Grid Margin=\"5\">\n                    <Grid.RowDefinitions>\n                        <RowDefinition Height=\"Auto\"></RowDefinition>\n                    </Grid.RowDefinitions>\n                    <Grid.ColumnDefinitions>\n                        <ColumnDefinition Width=\"*\"></ColumnDefinition>\n                        <ColumnDefinition Width=\"Auto\"></ColumnDefinition>\n                    </Grid.ColumnDefinitions>\n                    <TextBlock Grid.Column=\"1\">move right window border further right and then left again - behold, this text disappears!</TextBlock>\n                </Grid>\n            </DataTemplate>\n        </toolkit:DataGrid.RowDetailsTemplate> >\n    </toolkit:DataGrid>\n</Window>\n \n \nCode-behind is not necessary for this example. To make the problem appear, make the window first wider and then narrow again.",
    "LastUpdatedDate": "2013-02-21T18:41:10.287-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2009-06-26T03:47:18.973-07:00",
    "Status": {
      "Name": "Active",
      "Id": 2
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "DataGrid RowDetailTemplate will only adjust to width increase, not decrease",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 10196
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Hi Onca,\r\n\r\nThank you for reporting this issue.  We actually have a bug tracking this already in our interal database, but since I believe this is the first bug filed on Codeplex, I will leave this one open and let you know when we are able to fix it.  \r\n\r\nThanks!\r\nSamantha",
      "PostedDate": "2009-06-26T10:40:44.673-07:00",
      "Id": -2147483648
    },
    {
      "Message": "For anyone else dealing with this problem, try this as a temporary fix.  Create the following IValueConverter and use it on the highest level grid of your RowDetailsTemplate.  Note the OneWayToSource binding.\r\n\r\n    public class ForceHorizontalAlignmentConverter : IValueConverter\r\n    {\r\n        #region IValueConverter Members\r\n\r\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\r\n        {\r\n            return HorizontalAlignment.Left;\r\n        }\r\n\r\n        #endregion\r\n    }\r\n\r\n\r\nUse this for your RowDetailsTemplate:\r\n\r\n        <toolkit:DataGrid.RowDetailsTemplate>\r\n            <DataTemplate>\r\n                <Grid \r\n                    Margin=\"5\"\r\n                    HorizontalAlignment=\"{Binding Path=HorizontalAlignment, Mode=OneWayToSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Converter={StaticResource forceHorizontalAlignmentConverter}}\"\r\n                    >\r\n                    <Grid.RowDefinitions>\r\n                        <RowDefinition Height=\"Auto\"></RowDefinition>\r\n                    </Grid.RowDefinitions>\r\n                    <Grid.ColumnDefinitions>\r\n                        <ColumnDefinition Width=\"*\"></ColumnDefinition>\r\n                        <ColumnDefinition Width=\"Auto\"></ColumnDefinition>\r\n                    </Grid.ColumnDefinitions>\r\n                    <TextBlock Grid.Column=\"1\">move right window border further right and then left again - behold, this text disappears!</TextBlock>\r\n                </Grid>\r\n            </DataTemplate>\r\n        </toolkit:DataGrid.RowDetailsTemplate>\r\n\r\n\r\nDon't forget to create an instance of the converter:\r\n    <Window.Resources>\r\n        <local:ForceHorizontalAlignmentConverter x:Key=\"forceHorizontalAlignmentConverter\" />\r\n    </Window.Resources>\r\n\r\n\r\nJustin",
      "PostedDate": "2009-11-19T13:57:21.66-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:41:10.287-08:00",
      "Id": -2147483648
    }
  ]
}