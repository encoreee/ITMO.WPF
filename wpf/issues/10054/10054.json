{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "Remark:\n---------\nThis test is a follow up on Samantha's information (thank you) about how to interpret correctly \" item currency \".\n \nPlse read the issue :  Datagrid : 'datagrid.CurrentItem' information disappears when focus outside datagrid [wpf: 9992]\n \nDear,\n \nThe annexed file demonstrates :\n- said discrepancy when the user tabs from outside the grid into the first cell of the grid (cell A).\n- the discrepancy disappears when the user tabs into the second colum aside cell A.\n \nThanks,\n \nJulie\n \n \nProcedure\n------------\nUnzip annexed file\nStart Visual Studio 2008 and adjust the reference to 'WPFToolkit.dll' (I used v3.5.40128.1) in the  solution project\n \nScenario\n----------\nStart Application \n \nStep 1:\n--------\n1.1. Tab once : \nthe 'Items.CurrentItem' textbox remains empty (strange) while the DOS window reports 'DataGrid.Items.CurrentItem: A' (correct)\nthe 'CurrentItem' textbox reports 'A' : correct\n1.2. Tab once : the 'Items.CurrentItem' textbox now contains the correct information\n \nconclusion : when tabbing into cell 'A', the information is not in sync in 'textbox : Items.CurrentItem'; otherwise it is\n \nStep 2:\n--------\n2.1. Tab all grid around, as well as the textboxes until cell A is framed again. The result is\nthe 'Items.CurrentItem' textbox and the DOS window report 'DataGrid.Items.CurrentItem: C'\nthe 'CurrentItem' textbox reports 'A'\n2.2. Tab once to focus the cell next to A: all information is again correct\n \nconclusion : when tabbing into cell 'A', the information is not in sync in both 'textbox : Items.CurrentItem' and MS-DOS console with respect to 'DataGrid.CurrentItem'; otherwise it is\n \nEnd",
    "LastUpdatedDate": "2013-02-21T18:41:15.347-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2009-05-28T00:20:46.11-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Datagrid : discrepancy between 'datagrid.CurrentItem' & 'datagrid.Items.CurrentItem' when datagrid acquires focus",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 4,
    "Id": 10054
  },
  "FileAttachments": [
    {
      "FileId": 3108,
      "FileName": "07 current item discrepancy.zip",
      "DownloadUrl": ".\\3108"
    },
    {
      "FileId": 3109,
      "FileName": "07 current item discrepancy - version 2.zip",
      "DownloadUrl": ".\\3109"
    }
  ],
  "Comments": [
    {
      "Message": "Three additional comments :\r\n\r\n1.- The concept of DataGrid.CurrentItem looks to me like a DataGrid.FocusedItem/Cell concept. Am I wrong ?\r\n\r\nI produced a 'version 2' (enriches the original version) with MS-DOS console displaying 'Keyboard.FocusedElement' as well as 'FocusManager.GetFocusedElement'. The Datagrid now has attribute FocusManager.IsFocusScope=\"True\". This will provide even better insight into the necessary synchronization of all this information.\r\n\r\n2.- From a general WPF design standpoint, I find it regrettable that the concept 'CurrentItem' (FocusedItem) introduced by the DataGrid team is not elevated to the base class ItemsControl.\r\n\r\n3.- The .Net 4 beta 1 WPF documentation states :\r\n\tDataGrid.CurrentItem : Gets the data item bound to the row that contains the current cell.\r\n\tDataGrid.CurrentCell : Gets or sets the cell that has focus.\r\nThis is consistent with Samantha's explanation in work item [wpf: 9992]. However, I would like to know whether we are talking here about Keyboard focus or FocusManager scope (logical) focus or both.",
      "PostedDate": "2009-05-28T01:47:31.873-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-05-28T01:47:34.547-07:00",
      "Id": -2147483648
    },
    {
      "Message": "And to move my comment from the old thread - how can I achieve the following:\r\n\r\nCurrentCell=\"{Binding CurrentGridCell, Mode=OneWayToSource}\r\n\r\nI currently subscribe to the event, but it breaks the whole MVVM pattern. It seems that binding is lost with focus. Moreover, it seems that binding is lost when ItemsSource is changed on the DataGrid",
      "PostedDate": "2009-05-28T01:59:43.087-07:00",
      "Id": -2147483648
    },
    {
      "Message": "My answer to Snovik:\r\n\r\n1.- When dealing with MVVM, I have so far always referred to the CollectionView.CurrentItem value. I guess I did this out of habit with other ItemsControls like ListBox, etc. that do not have\r\na \"ItemsControl.CurrentItem\" property. Of course, I am then missing the \"CurrentCell\" aspect on the DataGrid since the CollectionView does not provide me with a \"CurrentProperty\" value.\r\nBut because of standard DataBinding notification aspects from datagrid cell to business object property, I have not come yet to require this \"CurrentCell/Property\" in my MVVM. Do you have a compelling case against this theory ?\r\n\r\n2.- When dealing with Commands in MVVM, I rely on the standard RoutedUICommand system of WPF and that works perfectly for me. This system relies largely on the principle of\r\nFocusedElement to \"CanExecute\" a command and I must say that works despite the many reported difficulties about this on the MSFT WPF forum.\r\n\r\n3.- Comes in the DataGrid.CurrentItem. I am still in the process of understanding what it \"really\" means with respect to the above two concepts and how it deviates or not from them.\r\nFrom my previous comments / questions, you see I still am quite puzzled and \"for the time being\" still not using this property in my projects.\r\n\r\nHope all this helps you,\r\n\r\nKind regards.",
      "PostedDate": "2009-05-28T06:27:57.493-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-08-21T11:15:47.847-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-02-07T03:15:04.12-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-02-22T14:24:22.563-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:41:15.347-08:00",
      "Id": -2147483648
    }
  ]
}