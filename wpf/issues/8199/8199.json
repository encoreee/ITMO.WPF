{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "DataGrid",
      "DisplayName": "DataGrid"
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": null,
    "Description": "If I make a style for a DataGridColumnHeader, and use a static resource to it, the data grid does not appear to use the style.  Only way to do it is to use the default style.\n \nThis doesn't work:\n            <Style x:Key=\"MyDataGridColumnHeaderStyle\" TargetType=\"{x:Type dg:DataGridColumnHeader}\" >\n               <Setter Property=\"Background\" Value=\"Orange\" />\n            <Style>\n \n        <dg:DataGrid\n            ColumnHeaderStyle\"=\"{StaticResource MyDataGridColumnHeaderStyle}\"\n         </dg:DataGrid>\n \nThis does work:\n            <Style TargetType=\"{x:Type dg:DataGridColumnHeader}\" >\n               <Setter Property=\"Background\" Value=\"Orange\" />\n            <Style>\n \n        <dg:DataGrid\n         </dg:DataGrid>",
    "LastUpdatedDate": "2013-02-21T18:41:43.32-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2008-11-22T19:05:39.12-08:00",
    "Status": {
      "Name": "Active",
      "Id": 2
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "key for DataGridColumnHeader style doesn't work",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 8199
  },
  "FileAttachments": [
    {
      "FileId": 2332,
      "FileName": "ColumnHeaderProblemTest.zip",
      "DownloadUrl": ".\\2332"
    },
    {
      "FileId": 2408,
      "FileName": "ColumnHeaderProblem_Solution.zip",
      "DownloadUrl": ".\\2408"
    }
  ],
  "Comments": [
    {
      "Message": "Hi Dan,\r\n\r\nCould you send the full xaml file for where you're seeing this issue?  If you look through the forums, you'll see that many people have used ColumnHeaderStyle with an x:Key without issue, so I'm not sure what the problem could be here.  I'd like to take a closer look at your code if you don't mind.\r\n\r\nThanks!\r\nSamantha",
      "PostedDate": "2008-11-25T08:02:24.34-08:00",
      "Id": -2147483648
    },
    {
      "Message": "hi samantha, thanks for replying. sure, i think i was able to extract it from my huge project.  See attached, window1.xaml.  if you remove the key for \r\nStyle x:Key=\"StudiesListDataGridColumnHeader\" TargetType=\"{x:Type dg:DataGridColumnHeader}\" BasedOn=\"{StaticResource 14PointWhiteTextStyle}\">\r\n\r\nand then the reference to this style in the datagrid\r\n        ColumnHeaderStyle=\"{StaticResource StudiesListDataGridColumnHeader}\"\r\n\r\n\r\nthey look totally different - if the style is specified in both places, it's gray, if it's not, then it's blue (how it should).  shouldn't they both be the same?\r\n\r\nregards,\r\n\r\ndan\r\n\r\n",
      "PostedDate": "2008-11-25T09:08:17.217-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-11-25T09:08:18.747-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Hello, any ideas about this?  Would be nice to be able to use a header style with a key...",
      "PostedDate": "2008-12-04T21:02:00.547-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Hi Dan,\r\n\r\nThe team took a look at this issue and we believe it's being caused by an error in our DataGridColumnHeadersPresenter template.  The template is defined as such:\r\n\r\n<Style x:Key=\"{x:Type dgp:DataGridColumnHeadersPresenter}\" TargetType=\"{x:Type dgp:DataGridColumnHeadersPresenter}\">\r\n    <Setter Property=\"Template\">\r\n      <Setter.Value>\r\n        <ControlTemplate TargetType=\"{x:Type dgp:DataGridColumnHeadersPresenter}\">\r\n            <Grid>\r\n                <dgp:DataGridColumnHeader IsHitTestVisible=\"False\"/>\r\n                <ItemsPresenter />\r\n            </Grid>\r\n        </ControlTemplate>\r\n      </Setter.Value>\r\n    </Setter>\r\n  </Style>\r\n\r\nAs you'll notice, there's a DataGridColumnHeader instance sharing the space of the Grid.  This is the \"dummy\" header which is used to fill the remaining space on the right if the width of the DataGrid is greater than the width of the all the columns.  It turns out that if we have an implicit Style for DataGridColumnHeader defined, then the Style gets applied correctly to the \"dummy\" header also, but if there is an explicit Style defined, we have a bug where the Style doesn't get applied to the \"dummy\" header.\r\n\r\nThe workaround is to retemplate the DataGridColumnHeadersPresenter and apply a Style to the \"dummy\" header (in your case, I think you just need to put a transparent background on it), so I added the following Styles to your project to fix the issue:\r\n\r\n          <Style x:Key=\"dgColHeadersPresenterStyle\" TargetType=\"{x:Type dg:DataGridColumnHeader}\">\r\n            <Setter Property=\"Background\" Value=\"Transparent\"/>\r\n          </Style>\r\n\r\n          <!--Re-template DataGridColumnHeadersPresenter so that the background is transparent-->\r\n          <Style x:Key=\"{x:Type dg:DataGridColumnHeadersPresenter}\" TargetType=\"{x:Type dg:DataGridColumnHeadersPresenter}\">\r\n            <Setter Property=\"Template\">\r\n              <Setter.Value>\r\n                <ControlTemplate TargetType=\"{x:Type dg:DataGridColumnHeadersPresenter}\">\r\n                  <Grid>\r\n                    <dg:DataGridColumnHeader Style=\"{StaticResource dgColHeadersPresenterStyle}\" IsHitTestVisible=\"False\"/>\r\n                    <ItemsPresenter />\r\n                  </Grid>\r\n                </ControlTemplate>\r\n              </Setter.Value>\r\n            </Setter>\r\n          </Style>\r\n\r\nIt will still need a little tweaking I think, but it should get you going in the right direction.  \r\n\r\nThanks for reporting this issue!\r\nSamantha",
      "PostedDate": "2008-12-08T11:28:32.293-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I've attached a copy of the project with the solution implemented.",
      "PostedDate": "2008-12-08T11:30:12.043-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-12-08T11:30:13.293-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-02-18T17:35:26.293-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I've fixed it using this generic style for DataGridColumnHeadersPresenter on my projects:\r\n\r\n    <Style x:Key=\"{x:Type dgp:DataGridColumnHeadersPresenter}\"\r\n           TargetType=\"{x:Type dgp:DataGridColumnHeadersPresenter}\">\r\n        <Setter Property=\"Template\">\r\n            <Setter.Value>\r\n                <ControlTemplate TargetType=\"{x:Type dgp:DataGridColumnHeadersPresenter}\">\r\n                    <Grid>\r\n                        <dgp:DataGridColumnHeader IsHitTestVisible=\"False\"\r\n                                                  Style=\"{Binding RelativeSource={RelativeSource AncestorType={x:Type dg:DataGrid}}, Path=ColumnHeaderStyle}\"/>\r\n                        <ItemsPresenter />\r\n                    </Grid>\r\n                </ControlTemplate>\r\n            </Setter.Value>\r\n        </Setter>\r\n    </Style>",
      "PostedDate": "2009-07-31T03:57:16.483-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2012-07-09T04:16:06.38-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:41:43.32-08:00",
      "Id": -2147483648
    }
  ]
}