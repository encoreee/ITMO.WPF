{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "DataGrid",
      "DisplayName": "DataGrid"
    },
    "ClosedComment": "Please see my comment from February 18.",
    "ClosedDate": "2009-04-01T11:59:53.513-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "If I set the RowHeaderTemplate of a data grid and try to use data binding inside of it, the controls are rendered, but data bound properties are not set.",
    "LastUpdatedDate": "2013-05-16T05:31:11.657-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "wpf",
    "ReportedDate": "2009-02-06T18:03:16.08-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Databinding inside the RowHeaderTemplate of a datagrid does not work.",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 9193
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I have no idea what the root cause is, but the problem is with the DataContext of the ContentPresenter used inside the DataGridHeaderBorder in the DataGridRow. It's value get's set to null, which is why data binding wasn't working.\r\n\r\nI was able to work around the problem by using a \"relative source\" binding to the DataContext of the containing DataGridRow.\r\n\r\nIt's a bit irritating, however, because I have to repeat the relative source binding on any style triggers used in the template, which means copying a lot of crud all over the place.\r\n\r\n\r\n",
      "PostedDate": "2009-02-08T14:38:23.78-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Try setting RowHeaderStyle on DataGrid to a Style that sets the Content property. The RowHeader should have the DataContext of the row, but the ContentPresenter within it will have its DataContext set to the Content property of DataGridRowHeader.\r\n\r\nExample:\r\n<Style TargetType=\"{x:Type DataGridRowHeader}\">\r\n        <Setter Property=\"Content\" Value=\"{Binding Id}\"/>\r\n</Style>",
      "PostedDate": "2009-02-18T10:45:17.13-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-02-19T11:00:16.147-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-04-01T11:59:53.513-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Can you supply a code snipped that shows the workaround you used?\r\n\r\n",
      "PostedDate": "2009-07-14T08:59:43.893-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Something like this should work.  (In this example, I’m binding to an ID property on the data object which is displayed in the row.)\r\n\r\n    <Grid.Resources>\r\n      <Style x:Key=\"RowHeadersWithId\" TargetType=\"{x:Type dg:DataGridRowHeader}\">\r\n        <Setter Property=\"Content\" Value=\"{Binding Id}\"/>\r\n        <Setter Property=\"ContentTemplate\">\r\n            <Setter.Value>\r\n                <DataTemplate>\r\n                    <Grid>\r\n                        <TextBox Text=\"{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type dg:DataGridRowHeader}}, Path=Content}\" Width=\"50\"/>\r\n                    </Grid>\r\n                </DataTemplate>\r\n            </Setter.Value>\r\n        </Setter>\r\n      </Style>\r\n    </Grid.Resources>\r\n...\r\n\r\n    <dg:DataGrid RowHeaderStyle=\"{StaticResource RowHeadersWithId}\">    \r\n...\r\n    </dg:DataGrid>\r\n\r\nAs long as the property you're bound to implements INotifyPropertyChanged, that should cause the header content to update if the data object changes.\r\n\r\nThe binding from the RowHeaderTemplate doesn't work because RowHeaderTemplate’s ContentPresenter sets its own DataContext instead of inheriting.  We are looking into changing this in a future release so that this scenario is simpler to achieve.",
      "PostedDate": "2009-07-14T13:41:44.72-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Correction to my earlier comment:\r\n\r\nThis is actually by design, so we won't be changing this in a future release.  The reasoning is as follows: DataGridRowHeader is a ContentControl, and RowHeaderTemplate sets the ContentTemplate property of the row header.  ContentTemplate’s DataContext is set to the Content property, so when you try to set a binding directly from RowHeaderTemplate, the row header's Content property is not set and therefore defaults to null, and therefore the ContentTemplate’s DataContext is null and the binding doesn’t work.",
      "PostedDate": "2009-07-14T14:00:17.547-07:00",
      "Id": -2147483648
    },
    {
      "Message": "You could also try something like this if you prefer to avoid the use of Styles:\r\n\r\n            <wpftoolkit:DataGrid.RowHeaderTemplate>\r\n                <DataTemplate>\r\n                    <StackPanel>                        \r\n                        <TextBox Text=\"{Binding Path=DataContext.Id, \r\nMode=TwoWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type wpftoolkit:DataGridRow}}}\"/>\r\n                    </StackPanel>\r\n                </DataTemplate>\r\n            </wpftoolkit:DataGrid.RowHeaderTemplate>\r\n",
      "PostedDate": "2009-07-14T14:04:45.343-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:41:33.827-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T05:31:11.657-07:00",
      "Id": -2147483648
    }
  ]
}