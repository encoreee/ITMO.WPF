[
  {
    "Id": "129974",
    "ThreadId": "39187",
    "Html": "Is there any simple way to connect a RibbonCommand to an existing ICommand instance, or will I have to add Execute &amp; CanExecute handlers in code-behind that forward through to the original?<br>\r\n<br>\r\nThe two scenarios I'm thinking of:<br>\r\n<ol>\r\n    <li>Using the built in commands: System.Windows.Input.ApplicationCommands.Copy, et al</li>\r\n    <li>Using a DelegateCommand&lt;T&gt; in Prism (Composite Application Guidance for WPF)</li>\r\n</ol>\r\nCheers,<br>\r\nJames \r\n",
    "PostedDate": "2008-11-04T09:50:29.893-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130010",
    "ThreadId": "39187",
    "Html": "<p>Hi James,<br>\r\n<br>\r\nCurrently there is no built-in way to use an existing ICommand instance in RibbonCommand - this a feature which we are designing now and will add in V1.  The two scenarios you mentioned are some of the main scenarios we are considering, so you should be able to do this in V1.  For now, however, you'll have to add Execute &amp; CanExecute handlers.</p>\r\n<p>If you have any requests or recommendations for how you'd like this feature to work in V1, please let us know as we will definitely consider your input while finalizing our designs.</p>\r\n<p>Thanks!<br>\r\nSamantha</p>\r\n",
    "PostedDate": "2008-11-04T11:20:20.547-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130165",
    "ThreadId": "39187",
    "Html": "Great to hear you've got this targeted for V1. <br>\r\n<br>\r\nWhat I was initially looking for was something like a &quot;Command&quot; property (or perhaps &quot;ContainedCommand&quot;, &quot;NestedComand&quot; or similar). That's not something I've thought about at any length though.<br>\r\n<br>\r\nIt will be important for us to be able to get the existing ICommand through binding, though. It may well be exposed on the PresentationModel as a property, as we're using Prism. The PresentationModel could have defined the command itself or it might have got it from a service or controller class. It will likely be a DelegateCommand&lt;T&gt;, with Execute/CanExecute handlers already attached.<br>\r\n<br>\r\nJames<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-05T01:12:34.437-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130854",
    "ThreadId": "39187",
    "Html": "<p style=\"margin:0cm 0cm 10pt\"><span style=\"font-family:calibri\">I actually spent the entire morning looking for that functionality :-)</span></p>\r\n<p style=\"margin:0cm 0cm 10pt\"><span style=\"font-family:calibri\">As a workaround, how can I call the application commands copy functionality manually using C#?</span></p>\r\n",
    "PostedDate": "2008-11-07T09:16:34.96-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "135281",
    "ThreadId": "39187",
    "Html": "Like Tarazi, I am looking to forward the ribbon command's executed call to the application commands. I have not been able to get this to work. <br>\r\n<br>\r\nAnybody have a working example of how to do this? <br>\r\n",
    "PostedDate": "2008-11-25T13:44:33.793-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "135299",
    "ThreadId": "39187",
    "Html": "Okay, I may have found a workable solution. I am a newby with C#, so this may not be the best way to do this.<br>\r\n<br>\r\nSay in the ribbon command you have Executed=&quot;OnNewFile&quot;, then the following codebehind seems to work:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void OnNewFile(object sender, ExecutedRoutedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RoutedCommand command = ApplicationCommands.New;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; command.Execute(sender, null);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-25T14:37:33.917-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "154642",
    "ThreadId": "39187",
    "Html": "It does not work for me for some reason; it loses the focus from the selected text when I click on the ribbon button.<br>\r\n<br>\r\nI still have a lot of work to do before my application goes live, I think by then there will be a new beta from the ribbon<br>\r\n<br>\r\nThank you\r\n",
    "PostedDate": "2009-02-05T06:19:37.757-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "154693",
    "ThreadId": "39187",
    "Html": "Hi Tarazi,<br>\r\n<br>\r\nthat is a known issue with this version of the ribbon:<br>\r\nhttp://www.codeplex.com/wpf/WorkItem/View.aspx?WorkItemId=8922<br>\r\n<br>\r\nI have the same slack in my timing, so like you I am hoping a new beta will be out before I need to release my product.<br>\r\n<br>\r\nRegards,<br>\r\nStefan <br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2009-02-05T07:55:36.33-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "154696",
    "ThreadId": "39187",
    "Html": "Us too. I think we better hope that we get the <strong>full release</strong> of the ribbon before we need to ship, though. The license precludes shipping the betas.<br>\r\n<br>\r\nNote that <a href=\"http://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=42317\">when I asked about this situation</a>, I found out that the whole RibbonCommand architecture is (most likely) going away.<br>\r\n",
    "PostedDate": "2009-02-05T08:02:45.907-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]