[
  {
    "Id": "542965",
    "ThreadId": "240215",
    "Html": "\r\n<p><span style=\"color:black; font-size:10pt\">Doing code-behind in WPF, I know how to click on a button on a window and within the click event, create an instance of another window, show that window and hide the current window. When finished with the new window,\r\n a click on a button on that window would result in the showing of the original window and then the closing of the new window. This pattern could be repeated to multiple levels of windows (with only the newest one visible).</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">In my MVVM solution, I have three projects, View project, ViewModel project and a Model project. The ViewModel project has a reference to the Model project and the View project has a reference to the ViewModel project.\r\n This project structure was suggested in a new book on MVVM that was published in December, 2010 (and the book is not very good). The author&rsquo;s intent was to maintain the discipline of the MVVM pattern.</span></p>\r\n<p>The Views are aware of the other views but the ViewModels are not aware of the views. Therefore, I do not see how a ViewModel could launch a new view (WPF window). For a view to launch another view would require code-behind on the view, which is breaking\r\n the MVVM pattern (as I understand it.)</p>\r\n<p>I have searched of examples but have not found any. Life would be so much easier if there were a simple sample WPF MVVM app with a starting window that has two or three child windows and they in turn had a two or three child windows.</p>\r\n",
    "PostedDate": "2011-01-02T14:46:28.087-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "545894",
    "ThreadId": "240215",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Firstly, when implementing pure MVVM you really ought not to use click events to manage this form of interaction, instead you should bind buttons to\r\n<a href=\"http://blogs.msdn.com/b/morgan/archive/2010/06/24/simplifying-commands-in-mvvm-and-wpf.aspx\">\r\nCommands</a>. In your situation where ViewModels are not able to instantiate new Views I would recommend that you write a &quot;View Controller&quot; class which is responsible for creating/managing Views and exposes ICommand instances&nbsp;(usually something akin to\r\n a <a href=\"http://www.wpftutorial.net/DelegateCommand.html\">DelegateCommand</a>) which create the appropriate view when a command is executed. This &quot;View Controller&quot; class is passed to the ViewModel (preferably via\r\n<a href=\"http://martinfowler.com/articles/injection.html\">injection</a>) and exposed on the ViewModel (either directly or indirectly). The button&nbsp;responsible for creating the child view is then bound to the command much like any other type of binding;\r\n i.e. &lt;Button Command=&quot;{Binding ViewController.ShowWindowCommand}&quot;/&gt;. This will result in code being executed within your ViewController class (which is responsible for creating/managing views) when a user clicks a button in your view, therefore not breaking\r\n the strict View/ViewModel separation. Furthermore, you can employ the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.input.icommandsource.commandparameter.aspx\">\r\nCommandParameter</a>&nbsp;property to pass context to the execution of the command.</p>\r\n<p>Secondly, it seems you have a definite process in mind when the user clicks a button (hide the current window, show a new window, wait for interaction, close new window, show original window). If you have such long-running process flows in your application,\r\n I would suggest you look at Ron Jacob's recent Channel 9 screencast on writing <a href=\"http://channel9.msdn.com/Shows/Endpoint/endpointtv-A-Better-State-Machine-Driven-WPF-UI\">\r\nState-Machine Driven WPF UIs</a>&nbsp;as it would certainly provide a neat solution to this kind of process.</p>\r\n<p>Hope it helps.</p>\r\n<p>Ian</p>\r\n",
    "PostedDate": "2011-01-08T04:09:30.38-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546009",
    "ThreadId": "240215",
    "Html": "\r\n<p>Ian, thank you for your reply.&nbsp; I am working hard to both understand the MVVM pattern and the reasoning that supports it.&nbsp;</p>\r\n<p>Considering separation of concern, I understand that the View display the data while the ViewModel supplies and manages data. I do not have a solid understanding of which branch should be responsible for the interaction between the various views. This lack\r\n of understanding may simply be due to my lack of knowledge.</p>\r\n<p>I have tried for hours to design a ViewController without success.</p>\r\n<p>However and wherever it is performed, the following tasks need to be performed: the new window (view) is instantiated. Optionally data may be needed to be sent to the new window, either at construction or after the window instance is created. The parent\r\n window needs to be declared the owner of the new window. The new window needs to be shown (&ldquo;newWindow.Show();&rdquo;). The parent window needs to be hidden.</p>\r\n<p>Do you know where I may obtain a sample application that utilizes a ViewController? This seems so fundamental that many developers attempting to master the MVVM pattern would find it helpful.</p>\r\n<p>Below is a code snippet where I employed some code-behind to solve the issue. ( I know that it will probably get me voted off the island.)</p>\r\n<p><span style=\"font-size:10pt\">&nbsp;<span style=\"color:blue\">private</span>&nbsp;<span style=\"color:blue\">void</span>&nbsp;<span style=\"color:darkcyan\">btnResults_Click</span>(<span style=\"color:blue\">object</span>&nbsp;sender,&nbsp;<span style=\"color:darkblue\">RoutedEventArgs</span>&nbsp;e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">if</span>&nbsp;(<span style=\"color:purple\">viewModel</span>.<span style=\"color:darkcyan\">DataIsOk</span>())<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">object</span>&nbsp;results&nbsp;=&nbsp;<span style=\"color:purple\">viewModel</span>.<span style=\"color:darkcyan\">GetViewModelData</span>(<span style=\"color:#a31515\">&quot;Questionaires&quot;</span>);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:darkblue\">SurveyResultsView</span>&nbsp;window&nbsp;=&nbsp;<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:darkblue\">SurveyResultsView</span>(results);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.<span style=\"color:purple\">Owner</span>&nbsp;=&nbsp;<span style=\"color:blue\">this</span>;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.<span style=\"color:darkcyan\">Show</span>();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">this</span>.<span style=\"color:darkcyan\">Hide</span>();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue\">this</span>.<span style=\"color:purple\">Visibility</span>&nbsp;=&nbsp;<span style=\"color:darkblue\">Visibility</span>.<strong><span style=\"color:purple\">Hidden</span></strong>;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-08T11:15:55.317-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546729",
    "ThreadId": "240215",
    "Html": "\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">interface</span> ISurveyResultsController\r\n{\r\n   <span style=\"color:blue\">void</span> ShowWindow(<span style=\"color:blue\">object</span> results);\r\n}\r\n</pre>\r\n</div>\r\n<p>This is a very specific controller, and I'm not suggesting you have a separate controller for every View this way, but I think it does a better job of illustrating what you'd do than to illustrate any of the more generalized designs. This interface is injected\r\n into you're ViewModel so that you're ViewModel has no direct coupling to any UI. In tests this would be mocked out to do what ever is necessary for testing without creating any UI controls that are difficult to automate when testing. In production code the\r\n implementation of this interface would be pretty identical to what you have above in your event handler.</p>\r\n<p>The more generalized approach would be something that would allow you to write code more along the lines of the following:</p>\r\n<pre>IView view = controller.CreateViewFor&lt;SurveyResultsViewModel&gt;();\r\nview.ViewModel.Results = results;\r\nview.ShowWindow();</pre>\r\n<p>There's lots to flesh out from this, but for the most part, that's where the power of this pattern lies, and giving a full implementation of the idea isn't really possible in a post like this :).</p>\r\n",
    "PostedDate": "2011-01-10T07:25:23.897-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546858",
    "ThreadId": "240215",
    "Html": "\r\n<p><span style=\"color:black; font-size:10pt\">I really do appreciate when I get responses to my questions. The problem is that the responders tend to assume that I know more than I do. I have read and re-read the last response and I have searched the web (&ldquo;wpf\r\n iview&rdquo; and &ldquo;mvvm iview&rdquo; and &ldquo;mvvm viewcontroller&rdquo;) and I am still at a loss.</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">I found a real neat diagram at <a href=\"http://waf.codeplex.com/\">\r\nhttp://waf.codeplex.com/</a> (WPF Applications Framework &ndash; WAF) but not a complete example.</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">Does anyone have a complete example? Is there a web-site that covers the issue of MVVM screen management?</span></p>\r\n",
    "PostedDate": "2011-01-10T10:32:08.467-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546877",
    "ThreadId": "240215",
    "Html": "\r\n<p>Sorry, it's never possible to fully understand the level of understanding, and &quot;dumbing&quot; down a response too much can offend some people.</p>\r\n<p>IView isn't something you can search for, as it's a name made up on the spot to illustrate one design. As I said, I can't give you an implementation for IView or the implied IController from the sample code, as this generalized design is really too complex\r\n for a post. I'm trying to illustrate design concepts here, not give you a complete implementation. There's lots of implementations out there, some that won't resemble the interfaces I just gave at all (for instance,\r\n<a href=\"http://www.paulstovell.com/magellan\">http://www.paulstovell.com/magellan</a>).</p>\r\n<p>Start with the basics. The ISurveyResultsController is the most basic, being very specific to the scenario you've set out to solve. I told you how to implement it... the code from your event handler goes in almost verbatim into the ShowWindow implementation.\r\n All that's missing to get this up and running in a sample application is how to inject the service into your ViewModel. That's where MVVM frameworks come in to help, but to make things simple without a framework you could simply do something like this.</p>\r\n<pre>public SurveyResultsView()\r\n{\r\n   var controller = new SurveyResultsController(this);\r\n   this.DataContext = new SurveyResultsViewModel(controller);\r\n}</pre>\r\n<p>Are you trying to understand the concepts, or do you want a solution? Most of the MVVM frameworks will provide a solution here, each in their own way, but most are based around this concept of a View Controller. If you just want to understand the concepts,\r\n if this didn't enlighten you ask some more specific questions so I can elaborate for you.</p>\r\n",
    "PostedDate": "2011-01-10T11:03:30.403-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546982",
    "ThreadId": "240215",
    "Html": "\r\n<p><span style=\"color:black; font-size:10pt\">To begin with, I am not looking for a solution but rather an understanding of the pattern.</span></p>\r\n<p>The following is what I understand to be true:</p>\r\n<p>The View is dependent on the ViewModel.</p>\r\n<p>Via binding from the View is executing a command in the ViewModel.</p>\r\n<p>In this case, the command is to cause the instantiation of another View, an object that is not exposed directly to the ViewModel.</p>\r\n<p>It is at this point that I start to loss control. The following interface was suggested:</p>\r\n<pre><span style=\"color:blue; font-size:11.5pt\">public</span><span style=\"color:black; font-size:11.5pt\"> </span><span style=\"color:blue; font-size:11.5pt\">interface</span><span style=\"color:black; font-size:11.5pt\"> ISurveyResultsController</span></pre>\r\n<pre><span style=\"color:black; font-size:11.5pt\">{</span></pre>\r\n<pre><span style=\"color:black; font-size:11.5pt\">&nbsp;&nbsp; </span><span style=\"color:blue; font-size:11.5pt\">void</span><span style=\"color:black; font-size:11.5pt\"> ShowWindow(</span><span style=\"color:blue; font-size:11.5pt\">object</span><span style=\"color:black; font-size:11.5pt\"> results);</span></pre>\r\n<p><span style=\"color:black; font-size:11.5pt\">}</span></p>\r\n<p><span style=\"color:black; font-size:11.5pt\">It was suggested that &ldquo;</span><span style=\"font-size:9pt\">This interface is injected into you're ViewModel so that you're ViewModel has no direct coupling to any UI.&rdquo; I do not have a clue as to how\r\n to do this. Is this interface declared in the project containing the Views or the project containing the ViewModels? Where is this interface implemented? Are we trying to get to the point where we are sending from the View project to the ViewModel &ldquo;call\r\n me when you want me to create this view&rdquo;?</span></p>\r\n",
    "PostedDate": "2011-01-10T14:57:58.373-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "547277",
    "ThreadId": "240215",
    "Html": "\r\n<p>I showed the simple manual way to inject this.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> SurveyResultsView()\r\n{\r\n   <span style=\"color:blue\">var</span> controller = <span style=\"color:blue\">new</span> SurveyResultsController(<span style=\"color:blue\">this</span>);\r\n   <span style=\"color:blue\">this</span>.DataContext = <span style=\"color:blue\">new</span> SurveyResultsViewModel(controller);\r\n}\r\n</pre>\r\n</div>\r\n<p>This I think is the best way to illustrate the concepts, but it's not how you'd do things normally. Normally you'd rely on an IoC (Inversion of Control) Container (such as Autofac/Unity/StructureMap/etc.) or similar mechanism (such as MEF). Entire MVVM frameworks\r\n are built around these concepts (Onyx, Caliburn, and MVVM Light to name just a few) which you could look at for much more complete implementations of the concept, but really, the above is enough to give you insight into how the pattern(s) work.</p>\r\n<p>To answer some specific questions:</p>\r\n<p><em>Is this interface declared in the project containing the Views or the project containing the ViewModels?</em> This is not really a meaningful question, as patterns don't care about details like this. All of the code can be in a single project (assembly)\r\n and you'll be following the pattern correctly, for instance. If you're going to decide to seperate the Views and ViewModels into different assemblies (I'm not sure that I would, BTW), then the fact that the Views project is going to reference the ViewModels\r\n project and not the other way around means that this interface would have to go in the ViewModels project, or in a third project.</p>\r\n<p><em>Where is this interface implemented?</em> This is sort of like the last question, and not really a meaningful question. It doesn't really matter where you implement it. However, since the implementation is going to have to have a hard dependency on the\r\n View that will determine where it can&nbsp;and cannot go, just like in the last question.</p>\r\n<p><em>Are we trying to get to the point where we are sending from the View project to the ViewModel &quot;call me when you want to create this view&quot;?</em> Sort of, yes. I say sort of because in the more generalised implementation the ViewController will usually\r\n be decoupled from the concrete Views as well by having the controller pick a View based on either configuration or convention. So the real point is that we're getting to the point where the ViewModel doesn't interact with the View, but rather interacts with\r\n an intermediary (a &quot;service&quot;) that is passed (injected) into the ViewModel. By doing so the ViewModel is no longer coupled to any specific View. This allows it to be reused with multiple Views, and also allows it to be unit tested without any need to do UI\r\n automation, which is a brittle and difficult way to do automated testing.</p>\r\n",
    "PostedDate": "2011-01-11T06:06:39.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "547280",
    "ThreadId": "240215",
    "Html": "\r\n<p>I just reread your original post, and maybe I can provide better answers directly related to the project layout that you are using.</p>\r\n<p>Define the ISurveryResultsController interface in the ViewModels project. It has to be here since your ViewModels need to reference this interface and this project does not reference the Views project.</p>\r\n<p>Implement the SurveyResultsController class in the Views project. It has to be here since the SurveyResultsController will reference the SurveyResultsView.</p>\r\n<p>Keep in mind that these decisions are not relevant to the pattern, but will help you in implementing the naive design I've discussed here, and therefore may help you to understand the pattern(s).</p>\r\n",
    "PostedDate": "2011-01-11T06:14:52.793-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]