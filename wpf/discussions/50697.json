[
  {
    "Id": "169994",
    "ThreadId": "50697",
    "Html": "Hi,<br>\r\n<br>\r\nI want my data grid to enter edit mode whenever a user tabs into a new cell.<br>\r\n<br>\r\nI can get this to work for DataGridTextColumn's by handling the grid.CurrentCellChanged event and calling grid.BeginEdit()<br>\r\n<br>\r\nHowever, this does not seem to work for a DataGridTemplateColumn. I tried a simple case of a DataGridTemplateColumn whose celledittemplate is just a textbox.<br>\r\n<br>\r\nIs there anything special required to beginEdit for a template column?<br>\r\n<br>\r\nthanks,<br>\r\nAdam<br>\r\n",
    "PostedDate": "2009-03-19T14:01:34.71-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "170223",
    "ThreadId": "50697",
    "Html": "Found this workaround for now:\r\n<pre><code>\r\nprivate void grid_CurrentCellChanged(object sender, EventArgs e)\r\n{\r\n  grid.BeginEdit();\r\n\t\t\r\n  // After begin edit shouldnt be a DataGridCell so if it is it means we have a template \r\n  // column and therefore need another tab to enter edit mode\r\n  if (Keyboard.FocusedElement is DataGridCell)\r\n  {\r\n    // Send the grid another tab press\r\n    var keyEvt = new KeyEventArgs(Keyboard.PrimaryDevice, Keyboard.PrimaryDevice.ActiveSource, 0, Key.Tab){RoutedEvent = Keyboard.KeyDownEvent};\r\n    InputManager.Current.ProcessInput( keyEvt);\r\n  }\r\n}\r\n</code></pre>\r\n",
    "PostedDate": "2009-03-20T08:54:09.103-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "248869",
    "ThreadId": "50697",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>adamtaub wrote:</strong><br>Found this workaround for now:\r\n<pre><code>\r\nprivate void grid_CurrentCellChanged(object sender, EventArgs e)\r\n{\r\n  grid.BeginEdit();\r\n\t\t\r\n  // After begin edit shouldnt be a DataGridCell so if it is it means we have a template \r\n  // column and therefore need another tab to enter edit mode\r\n  if (Keyboard.FocusedElement is DataGridCell)\r\n  {\r\n    // Send the grid another tab press\r\n    var keyEvt = new KeyEventArgs(Keyboard.PrimaryDevice, Keyboard.PrimaryDevice.ActiveSource, 0, Key.Tab){RoutedEvent = Keyboard.KeyDownEvent};\r\n    InputManager.Current.ProcessInput( keyEvt);\r\n  }\r\n}\r\n</code></pre>\r\n</blockquote>\r\n<p>&nbsp;</p>\r\n<p>This only works if you are tabbing forward through the grid. If you are tabbing backwards (shift-tab), then it will actually end up skipping the cell. A better way to do this is with a traversal request (this is what the grid does internally when it detects a tab key press):</p>\r\n<p><span style=\"color:#2b91af;font-size:12pt\">DataGridCell</span><strong><span style=\"font-size:12pt\"> FocusedCell = </span></strong><span style=\"color:#2b91af;font-size:12pt\">Keyboard</span><span style=\"font-size:12pt\">.FocusedElement <span style=\"color:blue\">as</span><strong> </strong><span style=\"color:#2b91af\">DataGridCell</span><strong>;</strong></span></p>\r\n<p><span style=\"color:blue;font-size:12pt\">if</span><strong><span style=\"font-size:12pt\"> (FocusedCell != </span></strong><span style=\"color:blue;font-size:12pt\">null</span><strong><span style=\"font-size:12pt\">)</span></strong></p>\r\n<p><strong><span style=\"font-size:12pt\">{</span></strong></p>\r\n<p><strong><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; </span></strong><span style=\"color:green;font-size:12pt\">// if we try to send a simulated &quot;tab&quot; key, and the shift button is being held down,</span></p>\r\n<p><strong><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; </span></strong><span style=\"color:green;font-size:12pt\">// the focus will skip in an unintended way. By using a traversal request, we can</span></p>\r\n<p><strong><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; </span></strong><span style=\"color:green;font-size:12pt\">// tell the cell to send focus to the next control in the focus sequence - which in</span></p>\r\n<p><strong><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; </span></strong><span style=\"color:green;font-size:12pt\">// the case of a template column will be the first visible child control</span></p>\r\n<p><strong><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; </span></strong><span style=\"color:#2b91af;font-size:12pt\">TraversalRequest</span><strong><span style=\"font-size:12pt\"> Traversal = </span></strong><span style=\"color:blue;font-size:12pt\">new</span><strong><span style=\"font-size:12pt\"> </span></strong><span style=\"color:#2b91af;font-size:12pt\">TraversalRequest</span><strong><span style=\"font-size:12pt\">(</span></strong><span style=\"color:#2b91af;font-size:12pt\">FocusNavigationDirection</span><span style=\"font-size:12pt\">.Next);</span></p>\r\n<p><strong><span style=\"font-size:12pt\">&nbsp;&nbsp;&nbsp; FocusedCell.MoveFocus(Traversal);</span></strong></p>\r\n<p><strong><span style=\"font-size:12pt\">}</span></strong></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-22T23:16:58.84-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "267429",
    "ThreadId": "50697",
    "Html": "<p>Keith's answer worked pretty well, I wound up with this:&nbsp;</p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> grid_CurrentCellChanged(<span style=\"color:Blue\">object</span> sender, EventArgs e)\r\n      {\r\n      DataGrid dg = sender <span style=\"color:Blue\">as</span> DataGrid;\r\n      dg.BeginEdit();\r\n      DataGridCell FocusedCell = Keyboard.FocusedElement <span style=\"color:Blue\">as</span> DataGridCell;\r\n      <span style=\"color:Blue\">if</span> (FocusedCell != <span style=\"color:Blue\">null</span>)\r\n        {\r\n        TraversalRequest Traversal = <span style=\"color:Blue\">new</span> TraversalRequest(FocusNavigationDirection.Next);\r\n        FocusedCell.MoveFocus(Traversal);\r\n        }\r\n      }\r\n</pre>\r\n</div>\r\n</span></span></p>\r\n<p>The other method I found of getting the textbox and setting focus to it seemed to work at first, but was unreliable.</p>",
    "PostedDate": "2009-12-14T22:23:32.087-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]