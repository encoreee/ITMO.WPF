[
  {
    "Id": "113875",
    "ThreadId": "34312",
    "Html": "In the DataGrid, does anyone know why the DataGridBoundColumn property Setter for the DataFieldBinding Property calls the &quot;EnsureTwoWay&quot;? This bascially eliminates the possibility to data bind to a read only property.<br>\r\n<br>\r\nDoes anyone know what assumptions are built around this? If I just remove the call to &quot;EnsureTwoWay&quot; what else might break?<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-08-26T10:28:47.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "113895",
    "ThreadId": "34312",
    "Html": "This is mainly for cell editing to work properly.&nbsp; General row editing will use the IEditableObject pattern for transactional editing but cell editing uses a custom implementation in the DataGridBoundColumn class.&nbsp; Here is what you can do for read-only properties to work (which is&nbsp;a snippet from DataGridColumn.cs when columns are auto-generated):&nbsp; Notice that you have to do this after setting boundColumn.DataFieldBinding since it is in that setter where EnsureTwoWay is applied.<br>\r\n<br>\r\n<span style=\"font-size:13px;color:#008000\"><span style=\"font-size:13px;color:#008000\">\r\n<p>//Set the data field binding for such created columns and </p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px;color:#008000\"><span style=\"font-size:13px;color:#008000\">//choose the BindingMode based on editability of the property.<br>\r\n</span></span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGridBoundColumn</span></span><span style=\"font-size:13px\"> boundColumn = dataGridColumn </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">as</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGridBoundColumn</span></span><span style=\"font-size:13px\">;<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">if</span></span><span style=\"font-size:13px\"> (boundColumn != </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">null</span></span><span style=\"font-size:13px\">)<br>\r\n{<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;Binding</span></span><span style=\"font-size:13px\"> binding = </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">Binding</span></span><span style=\"font-size:13px\">(itemProperty.Name);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;boundColumn.DataFieldBinding = binding;<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;PropertyDescriptor</span></span><span style=\"font-size:13px\"> pd = itemProperty.Descriptor </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">as</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">PropertyDescriptor</span></span><span style=\"font-size:13px\">;<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;if</span></span><span style=\"font-size:13px\"> (pd != </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">null</span></span><span style=\"font-size:13px\">)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if</span></span><span style=\"font-size:13px\"> (pd.IsReadOnly)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binding.Mode = </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">BindingMode</span></span><span style=\"font-size:13px\">.OneWay;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundColumn.IsReadOnly = </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">true</span></span><span style=\"font-size:13px\">;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;else<br>\r\n</span></span><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PropertyInfo</span></span><span style=\"font-size:13px\"> pi = itemProperty.Descriptor </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">as</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">PropertyInfo</span></span><span style=\"font-size:13px\">;<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if</span></span><span style=\"font-size:13px\"> (pi != </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">null</span></span><span style=\"font-size:13px\">)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if</span></span><span style=\"font-size:13px\"> (!pi.CanWrite)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binding.Mode = </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">BindingMode</span></span><span style=\"font-size:13px\">.OneWay;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boundColumn.IsReadOnly = </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">true</span></span><span style=\"font-size:13px\">;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n}<br>\r\n<br>\r\n<br>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n",
    "PostedDate": "2008-08-26T11:46:39.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "113900",
    "ThreadId": "34312",
    "Html": "I got it&nbsp;working with this technique in my procedural code but:<br>\r\n<br>\r\n1) It looks like the current released code has &quot;IsReadOnly&quot; on DataGridColumn set as &quot;internal&quot; which means I either compile the toolkit into my own exec or&nbsp;I modify the toolkit source (which is what I did).<br>\r\n<br>\r\n2) This must be&nbsp;done through procedural code (not XAML) correct?<br>\r\n<br>\r\nMy object structures are pretty lengthy/complex so would I be better&nbsp;off auto generating and in the autogeneration event and only including the columns I want?\r\n",
    "PostedDate": "2008-08-26T12:03:26.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "113917",
    "ThreadId": "34312",
    "Html": "IsReadOnly will be public in the final release version.<br>\r\n<br>\r\nThat is correct that it has to be done in procedural code after setting the DataFieldBinding.&nbsp; <br>\r\n<br>\r\nValidating which columns you want in the autogeneration event is a valid solution since you plan to write procedure code for initalizing the columns anyway.&nbsp; If you have a standard set of columns that will always be displayed you can declare them statically in xaml and then update the read-only ones in code if you want.&nbsp; There are pro's and con's to each.\r\n",
    "PostedDate": "2008-08-26T13:09:45.263-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "114110",
    "ThreadId": "34312",
    "Html": "In the final release will we be able to not require the procedural code? Meaning, if we do not AutoGenerateColumns and manually add the mappings and the Bindings are set in XAML as OneWay, will the datagrid observe these settings?\r\n",
    "PostedDate": "2008-08-27T06:10:54.813-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "114215",
    "ThreadId": "34312",
    "Html": "In the final release this will actually be fixed so you won't need to write the procedural code for it and the TwoWay binding will not happen when you set the DataFieldBinding for a read-only property.\r\n",
    "PostedDate": "2008-08-27T11:50:35.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "114848",
    "ThreadId": "34312",
    "Html": "Well hurry up then!&nbsp;&nbsp; :)\r\n",
    "PostedDate": "2008-08-29T20:30:48.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]