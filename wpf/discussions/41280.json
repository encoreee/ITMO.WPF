[
  {
    "Id": "136949",
    "ThreadId": "41280",
    "Html": "I need to extract the default ColumnHeaderStyle for the DataGrid in order to make a minor cosmetic change.  I was able to do this for a standard GridViewColumnHeader using Expression Blend, but when I try editing the style for a column header in a DataGrid I only have the option to create a new style rather than edit the existing one.<br>\r\n<br>\r\nI want the overall style and behaviour to remain the same as the default, the only thing I want to change is the colour of the header border for a selected column (or when a mouseover occurs on the column header).  Microsoft seem to like setting the default colour to orange, which doesn't fit in with the rest of our application style.<br>\r\n<br>\r\nHas anyone managed to extract the default style?   I know I can create a new one from scratch, but for such  a minor change that seems a little drastic.<br>\r\n<br>\r\nThanks in advance\r\n",
    "PostedDate": "2008-12-02T07:30:14.603-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136955",
    "ThreadId": "41280",
    "Html": "Hi,<br>\r\n<br>\r\nA few techniques, extract the control template at runtime:<br>\r\n<br>\r\nhttp://learnwpf.com/Posts/Post.aspx?postId=a3e4319b-b790-40b6-b92a-4b9b0b9d65b9<br>\r\n<br>\r\nUse Reflector to decompile the BAML (birnary XAML) from the assembly:<br>\r\n<br>\r\nhttp://wpfwonderland.wordpress.com/2007/01/23/latest-version-of-reflector-can-dissemble-baml-to-xaml/<br>\r\n<br>\r\nOr, just download the WPF Toolkit sources and open up the Generic.xaml directly. Here you go:<br>\r\n<br>\r\n&nbsp; &lt;Style x:Key=&quot;ColumnHeaderGripperStyle&quot; TargetType=&quot;{x:Type Thumb}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Width&quot; Value=&quot;8&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Background&quot; Value=&quot;Transparent&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Cursor&quot; Value=&quot;SizeWE&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Template&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter.Value&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ControlTemplate TargetType=&quot;{x:Type Thumb}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Border Padding=&quot;{TemplateBinding Padding}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Background=&quot;{TemplateBinding Background}&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ControlTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Setter.Value&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/Setter&gt;<br>\r\n&nbsp; &lt;/Style&gt;<br>\r\n<br>\r\n<br>\r\n&nbsp; &lt;Style x:Key=&quot;{x:Type dgp:DataGridColumnHeader}&quot; TargetType=&quot;{x:Type dgp:DataGridColumnHeader}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;VerticalContentAlignment&quot; Value=&quot;Center&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Template&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter.Value&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ControlTemplate TargetType=&quot;{x:Type dgp:DataGridColumnHeader}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Grid&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dg:DataGridHeaderBorder SortDirection=&quot;{TemplateBinding SortDirection}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IsHovered=&quot;{TemplateBinding IsMouseOver}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IsPressed=&quot;{TemplateBinding IsPressed}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IsClickable=&quot;{TemplateBinding CanUserSort}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Background=&quot;{TemplateBinding Background}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Padding =&quot;{TemplateBinding Padding}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SeparatorVisibility=&quot;{TemplateBinding SeparatorVisibility}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SeparatorBrush=&quot;{TemplateBinding SeparatorBrush}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ContentPresenter SnapsToDevicePixels=&quot;{TemplateBinding SnapsToDevicePixels}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VerticalAlignment=&quot;{TemplateBinding VerticalContentAlignment}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalAlignment=&quot;{TemplateBinding HorizontalContentAlignment}&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dg:DataGridHeaderBorder&gt;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Thumb x:Name=&quot;PART_LeftHeaderGripper&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalAlignment=&quot;Left&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Style=&quot;{StaticResource ColumnHeaderGripperStyle}&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Thumb x:Name=&quot;PART_RightHeaderGripper&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalAlignment=&quot;Right&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Style=&quot;{StaticResource ColumnHeaderGripperStyle}&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Grid&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ControlTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Setter.Value&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/Setter&gt;<br>\r\n&nbsp; &lt;/Style&gt;<br>\r\n<br>\r\nRegards,<br>\r\nColin E.<br>\r\n--<br>\r\nhttp://wpfadventures.wordpress.com/ - my WPF blog<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx - WPF DataGrid Practical Examples <br>\r\n<br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-12-02T07:49:15.96-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136959",
    "ThreadId": "41280",
    "Html": "Thanks Colin, I can't believe I completely missed Generic.xaml, I must be blind, I had the solution open right in front of me!  <br>\r\n<br>\r\nThanks again, would probably have taken me ages to spot that!\r\n",
    "PostedDate": "2008-12-02T07:53:23.997-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136961",
    "ThreadId": "41280",
    "Html": "Doh!  It seems that the part of the style that I want to override must be inherited from the base control as it isn't defined in Generic.xaml <br>\r\n<br>\r\nI think it's time to try extracting it at runtime or using Reflector, hopefully I'll be able to find what I need that way.\r\n",
    "PostedDate": "2008-12-02T08:03:41.03-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137273",
    "ThreadId": "41280",
    "Html": "I extracted the control template at runtime, hoping that the ColumnHeaderStyle might be included, but it wasn't, just got the same template defined in Generic.xaml (probably rather predictable really!)<br>\r\n<br>\r\nI thought I might be able to extract the ColumnHeaderStyle in the same way by using the code provided in Colin's first link...<br>\r\n<br>\r\n<span style=\"font-size:10pt;color:#0000ff;font-family:'courier new'\">StringBuilder sb = new StringBuilder();<br>\r\nusing (TextWriter writer = new StringWriter(sb))<br>\r\n{<br>\r\n    System.Windows.Markup.XamlWriter.Save(MyDataGrid.ColumnHeaderStyle, writer);<br>\r\n}</span> <br>\r\n<br>\r\nHowever, the ColumnHeaderStyle seemed to be null, which is puzzling.  I know I haven't specifically assigned a style, but there is obviously some default styling being applied and I can't find a way to extract it. <br>\r\n<br>\r\nI need to retain the general style of the control as I need to keep the little triangle/arrow that is displayed when a column is sorted, all I want to change is the bottom border on the column headers - it turns orange when a mouseover or click event occurs on the column header, whereas I want to be able to use a brush defined in my resource dictionary as the orange just doesn't look right on our application.<br>\r\n<br>\r\nHas anyone got any other ideas as to how I can extract this style information?<br>\r\n<br>\r\nThanks\r\n",
    "PostedDate": "2008-12-03T07:22:23.253-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137357",
    "ThreadId": "41280",
    "Html": "Hi,<br>\r\n<br>\r\nYou will not find the xaml which for those effects of DataGridColumnHeader and DataGridRowHeader in generic.xaml. The core logic for these controls is implemented in code (for perf reasons similar to that of ButtonChrome) as DataGridHeaderBorder class. If you look at this class you will find all the rendering logic which does this.<br>\r\n<br>\r\nThe options are....<br>\r\n<br>\r\n<ol>\r\n    <li>Take the code from DataGridHeaderBorder and create your own class with appropriate modifications and use it instead.</li>\r\n    <li>Or retemplate DataGridColumnHeader from the scratch (without using DataGridHeaderBorder)</li>\r\n</ol>\r\n",
    "PostedDate": "2008-12-03T10:48:30.26-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137575",
    "ThreadId": "41280",
    "Html": "Thanks VamseeP, you may have just saved the day!<br>\r\n<br>\r\nI assumed that the styling would have been done in the same way as the standard GridViewColumnHeader, but obviously not!  I think I'll try modifying the code for the DataGridHeaderBorder, it should be as simple as adding a new dependency property to bind the border colour to.\r\n",
    "PostedDate": "2008-12-04T01:42:27.883-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137609",
    "ThreadId": "41280",
    "Html": "Hi Tabby,<br>\r\n<br>\r\nPersonally - I would go for the second option. Adding the sort glyphs to your control template is not that tricky:<br>\r\n<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx#header<br>\r\n<br>\r\nRegards,<br>\r\nColin E.<br>\r\n--<br>\r\nhttp://wpfadventures.wordpress.com/ - my WPF blog<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx - WPF DataGrid Practical Examples <br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-12-04T04:19:42.573-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137942",
    "ThreadId": "41280",
    "Html": "Thanks Colin, <br>\r\n<br>\r\nAfter looking at the DataGrid a bit more it seems that it doesn't quite have what we need for our application - we need to be able to bind a RoutedCommand to the grid, so that the command is executed when a row is double-clicked.  We had previously customised the ListView control to allow the binding of commands, but have realised that we need more features and are looking at third-party controls rather than having to do all of the work ourselves.  I'm currently looking at the DevExpress GridControl for WPF, but I'm not entirely sure that's got everything we need either. \r\n",
    "PostedDate": "2008-12-05T02:33:47.12-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137949",
    "ThreadId": "41280",
    "Html": "Hi Tabby,<br>\r\n<br>\r\nBy some coincidence Marlon Grech has just posted an article on his blog about binging commands to event via attached properties. I have not had a chance to look at it in detail yet, but from a brief read it looks very simple and neat. It might be just what you are looking for:<br>\r\n<br>\r\nhttp://marlongrech.wordpress.com/2008/12/04/attachedcommandbehavior-aka-acb/<br>\r\n<br>\r\nRegards,<br>\r\nColin E.<br>\r\n--<br>\r\nhttp://wpfadventures.wordpress.com/ - my WPF blog<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx - WPF DataGrid Practical Examples <br>\r\n<br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-12-05T03:20:52.103-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]