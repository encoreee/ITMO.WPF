[
  {
    "Id": "131502",
    "ThreadId": "39630",
    "Html": "A previous post stated that there is no way to override the default watermark for the date picker.  Is this correct?  Is there really no way to apply a template to clear out the silly &quot;Show Calendar&quot; text?\r\n",
    "PostedDate": "2008-11-10T14:21:08.63-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131537",
    "ThreadId": "39630",
    "Html": "Well... you could modify the template, technically. The real source of that String is hardcoded in ExceptionStringTable.txt in the Resources folder in the source. This file contains the Default/US-EN String Table for the Toolkit. In this file you could change DatePicker_WatermarkText  and  DatePickerTextBox_DefaultWatermarkText to change this. The second attribute controls a different String that appears under different circumstances (ie: when you have a Date, then remove it).<br>\r\n<br>\r\nIf you would rather alter the Template, you could copy the entire Style for DatePickerTextBox from Generic.xaml in the DatePicker's Themes folder and reuse it as your own personal style. You will have to change the the Content Property of the ContentControl element with the x:Name PART_Watermark. This will not though change the text that changing DatePickerTextBox_DefaultWatermarkText (mentioned above) will change.<br>\r\n<p> This should help you out.<br>\r\n<br>\r\n-Eric Fabricant, MSFT</p>\r\n<p><span style=\"font-size:13px\"> P.S.  This thread may be of some use to readers concerned with localization: <a href=\"http://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=39596\">http://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=39596</a> </span></p>\r\n",
    "PostedDate": "2008-11-10T17:51:55.76-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "156739",
    "ThreadId": "39630",
    "Html": "arackaf,<br>\r\n<br>\r\nEasy way to fix for your self:<br>\r\n1.  Get source code.<br>\r\n2.  Add the following dependency property to the DatePicker.cs file:  (I added in #Data region)<br>\r\n<span style=\"font-size:10px\"><span style=\"color:#0000ff\">            public</span> <span style=\"color:#0000ff\">static</span> <span style=\"color:#2b91af\">DependencyProperty</span> WatermarkProperty = <span style=\"color:#2b91af\">DependencyProperty</span>.Register( <span style=\"color:#a31515\">&quot;Watermark&quot;</span>, <span style=\"color:#0000ff\">typeof</span>( <span style=\"color:#0000ff\">string</span> ), <span style=\"color:#0000ff\">typeof</span>( <span style=\"color:#2b91af\">DatePicker</span> ), <span style=\"color:#0000ff\">new</span> <span style=\"color:#2b91af\">PropertyMetadata</span>( <span style=\"color:#a31515\">&quot;Show Calendar&quot;</span> ) );<br>\r\n<span style=\"color:#0000ff\">            public</span> <span style=\"color:#0000ff\">string</span> Watermark<br>\r\n            {<br>\r\n                <span style=\"color:#0000ff\">get</span> { <span style=\"color:#0000ff\">return</span> ( <span style=\"color:#0000ff\">string</span> ) GetValue( WatermarkProperty ); }<br>\r\n<span style=\"color:#0000ff\">                set</span> { SetValue( WatermarkProperty, <span style=\"color:#0000ff\">value</span> ); }<br>\r\n            }<br>\r\n</span><br>\r\n3.  Replace existing SetWatermarkText() with the following:<br>\r\n<span style=\"font-size:10px\"><span style=\"color:#0000ff\">            private</span> <span style=\"color:#0000ff\">void</span> SetWaterMarkText()<br>\r\n            {<br>\r\n                <span style=\"color:#0000ff\">if</span> (<span style=\"color:#0000ff\">this</span>._textBox != <span style=\"color:#0000ff\">null</span>)<br>\r\n                {<br>\r\n                    <span style=\"color:#0000ff\">this</span>.SetTextInternal(<span style=\"color:#0000ff\">string</span>.Empty);<br>\r\n                    <span style=\"color:#0000ff\">this</span>._defaultText = <span style=\"color:#0000ff\">string</span>.Empty;<br>\r\n                    <span style=\"color:#0000ff\">this</span>._textBox.Watermark = Watermark;<br>\r\n                }<br>\r\n            }<br>\r\n<br>\r\n</span>4.  Recompile WPFToolkit, and you're in business.<br>\r\n",
    "PostedDate": "2009-02-11T10:51:13.537-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "159194",
    "ThreadId": "39630",
    "Html": "Hello!<br>\r\n<br>\r\nHow do you properly recompile and install the new dlls? <br>\r\n<br>\r\nI have tried bmatalus idea. I have managed to make it work to a certain extent, but not entirely. I managed to correct the source code. Produce the new dlls. I also managed to somehow substitute the old ones, but the problem remaind in the visual studio. I couldn't drag and drop the controls on my wpf window or user control anymore. I was able to manually add controls by typing XAML code. But I couldn't drag and drop them from the toolbar flyout.<br>\r\n<br>\r\nSo how do you properly recompile and install the new dlls.<br>\r\n<br>\r\nThank you very much!!<br>\r\n<br>\r\nBest regards,<br>\r\nJurij \r\n",
    "PostedDate": "2009-02-18T15:38:34.163-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "163415",
    "ThreadId": "39630",
    "Html": "Request from me:<br>\r\nCould this solution (making Watermark property accessible) be integrated in the datepicker control plz?<br>\r\nMy obvious next question is of course: any ideas when next release will be available?<br>\r\n<br>\r\nBut I have to say that for the moment I still have a problem with the solution from bmatalus.<br>\r\nWhen the language is changed at run-time, the watermark doesn't get updated correctly...<br>\r\nAnyone any thoughts on that?<br>\r\n<br>\r\nThx!<br>\r\nNico<br>\r\n",
    "PostedDate": "2009-03-02T01:07:46.65-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "163920",
    "ThreadId": "39630",
    "Html": "sodjaj,<div><br></div><div>I think the problem that you are running into is that the *.msi that installs the toolkit puts these DLLs into the GAC (Global Assembly Cache)... which is great if you are planning on using them out of the box.  I think it is a really bad idea for open source or beta projects where the functionality is likely to need minor modifications and fixes... especially if the release cycle is long (like this one).</div><div><br></div><div>I think you have two options:</div><div>1. Remove/uninstall the toolkit instance in GAC, and move the re-compiled *.dll(s) into the Visual Studio path(s) so that it finds them at runtime.</div><div>    - C:\\&lt;Visual Studio 9.0 Path&gt;\\Common7\\IDE</div><div><br></div><div>2. Install the re-compiled *.dll(s) into the GAC.</div><div><br></div><div>Brian</div>",
    "PostedDate": "2009-03-03T08:26:12.347-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "163938",
    "ThreadId": "39630",
    "Html": "doolitle,<div><br></div><div>My application(s) do not need to be localized, so my little solution to the problem didn't include looking up the text as a resource.  But, it should be pretty simple to change the assignment of the watermark to include the lookup:</div><div><br></div><div>this._textbox.Watermark = MyResourceStrings.Lookup( Watermark);</div><div><br></div><div>Brian</div>",
    "PostedDate": "2009-03-03T09:03:46.383-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "202959",
    "ThreadId": "39630",
    "Html": "<p>You can easily derive from DatePicker and override method OnRender. In this example I set characteer &quot;-&quot; instead of text &quot;Show calendar&quot;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> OnRender(System.Windows.Media.DrawingContext drawingContext)\r\n{\r\n    <span style=\"color:Blue\">base</span>.OnRender(drawingContext);\r\n    FieldInfo fiTextBox = <span style=\"color:Blue\">typeof</span>(DatePicker).GetField(<span style=\"color:#A31515\">&quot;_textBox&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic);\r\n    <span style=\"color:Blue\">if</span> (fiTextBox != <span style=\"color:Blue\">null</span>)\r\n    {\r\n        DatePickerTextBox dateTextBox = (DatePickerTextBox)fiTextBox.GetValue(<span style=\"color:Blue\">this</span>);\r\n        PropertyInfo piWatermark = <span style=\"color:Blue\">typeof</span>(DatePickerTextBox).GetProperty(<span style=\"color:#A31515\">&quot;Watermark&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic);\r\n        <span style=\"color:Blue\">if</span> (piWatermark != <span style=\"color:Blue\">null</span>)\r\n        {\r\n            piWatermark.SetValue(dateTextBox, <span style=\"color:#A31515\">&quot;-&quot;</span>, <span style=\"color:Blue\">null</span>);\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-18T08:01:37.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "225852",
    "ThreadId": "39630",
    "Html": "<p>Is there an interface that I can inherit instead of deriving from DatePicker? My classes&nbsp;are already deriving other interfaces.</p>\r\n<p>Thanks</p>\r\n<p>- arch</p>",
    "PostedDate": "2009-08-20T06:19:08.823-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "363433",
    "ThreadId": "39630",
    "Html": "<p>Bit late, but...</p>\r\n<p>Arch it can be used as well in Loaded event, but requires bit of modification (thanks spud for great point of ref)</p>\r\n<p>Lets assume that in your wpf window wpftoolkit:datepick object is being placed and x:Name=&quot;datePick1&quot;.</p>\r\n<p>Now, add Loaded event to this object, and use code below:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> datePicker1_Loaded(<span style=\"color:Blue\">object</span> sender, RoutedEventArgs e)\r\n{\r\n  FieldInfo fiTextBox = datePicker1.GetType()\r\n    .GetField(<span style=\"color:#A31515\">&quot;_textBox&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic);\r\n\r\n  <span style=\"color:Blue\">if</span> (fiTextBox != <span style=\"color:Blue\">null</span>)\r\n  {\r\n    DatePickerTextBox dateTextBox =\r\n      (DatePickerTextBox)fiTextBox.GetValue(datePicker1);\r\n\r\n    <span style=\"color:Blue\">if</span> (dateTextBox != <span style=\"color:Blue\">null</span>)\r\n    {\r\n      PropertyInfo piWatermark = dateTextBox.GetType()\r\n        .GetProperty(<span style=\"color:#A31515\">&quot;Watermark&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic);\r\n\r\n      <span style=\"color:Blue\">if</span> (piWatermark != <span style=\"color:Blue\">null</span>)\r\n      {\r\n        piWatermark.SetValue(dateTextBox, <span style=\"color:#A31515\">&quot;-&quot;</span>, <span style=\"color:Blue\">null</span>);\r\n      }\r\n    }\r\n  }\r\n}\r\n</pre>\r\n</div>\r\n<p>Regards,&nbsp;</p>",
    "PostedDate": "2010-02-23T15:13:44.683-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "419621",
    "ThreadId": "39630",
    "Html": "<p>If you use DataTemplate in DataGrid(or other control):&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>\t     &lt;toolkit:DataGridTemplateColumn x:Name=&quot;DateColumn&quot; Header=&quot;{x:Static globalStr:GlobalStrings.Date}&quot; Width=&quot;auto&quot;&gt;\r\n                    &lt;toolkit:DataGridTemplateColumn.CellTemplate&gt;\r\n                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n                            &lt;toolkit:DatePicker x:Name=&quot;datePickerDateColumn&quot; SelectedDate=&quot;{Binding Date}&quot; Loaded=&quot;datePickerDateColumn_Loaded&quot; /&gt;\r\n                        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n                    &lt;/toolkit:DataGridTemplateColumn.CellTemplate&gt;\r\n                <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">toolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGridTemplateColumn</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>You have to use sender:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> datePickerDateColumn_Loaded(<span style=\"color:Blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            DatePicker picker = sender <span style=\"color:Blue\">as</span> DatePicker;\r\n\r\n            FieldInfo fiTextBox = picker.GetType().GetField(<span style=\"color:#A31515\">&quot;_textBox&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic);\r\n\r\n            <span style=\"color:Blue\">if</span> (fiTextBox != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                DatePickerTextBox dateTextBox =\r\n                  (DatePickerTextBox)fiTextBox.GetValue(picker);\r\n\r\n                <span style=\"color:Blue\">if</span> (dateTextBox != <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    PropertyInfo piWatermark = dateTextBox.GetType()\r\n                      .GetProperty(<span style=\"color:#A31515\">&quot;Watermark&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic);\r\n\r\n                    <span style=\"color:Blue\">if</span> (piWatermark != <span style=\"color:Blue\">null</span>)\r\n                    {\r\n                        piWatermark.SetValue(dateTextBox, <span style=\"color:#A31515\">&quot;&quot;</span>, <span style=\"color:Blue\">null</span>);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n</pre>\r\n</div>",
    "PostedDate": "2010-03-18T02:34:13.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "721112",
    "ThreadId": "39630",
    "Html": "<p>Here is a working VB example:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: blue;\">Private</span> <span style=\"color: blue;\">Sub</span> dtpEndDate_SelectedDateChanged(sender <span style=\"color: blue;\">As</span> System.Object, e <span style=\"color: blue;\">As</span> System.Windows.Controls.SelectionChangedEventArgs) <span style=\"color: blue;\">Handles</span> dtpEndDate.SelectedDateChanged\r\n        EraseDatePickerWaterMark(sender)\r\n    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Sub</span>\r\n\r\n    <span style=\"color: blue;\">Private</span> <span style=\"color: blue;\">Sub</span> dtpEndDate_Loaded(sender <span style=\"color: blue;\">As</span> System.Object, e <span style=\"color: blue;\">As</span> System.Windows.RoutedEventArgs) <span style=\"color: blue;\">Handles</span> dtpEndDate.Loaded\r\n        EraseDatePickerWaterMark(sender)\r\n    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Sub</span>\r\n\r\n    <span style=\"color: blue;\">Private</span> <span style=\"color: blue;\">Sub</span> EraseDatePickerWaterMark(sender <span style=\"color: blue;\">As</span> System.Object)\r\n        <span style=\"color: blue;\">Dim</span> picker <span style=\"color: blue;\">As</span> DatePicker = <span style=\"color: blue;\">CType</span>(sender, DatePicker)\r\n        <span style=\"color: blue;\">Dim</span> fieldInfo <span style=\"color: blue;\">As</span> Reflection.FieldInfo = _\r\n            picker.<span style=\"color: blue;\">GetType</span>().GetField(<span style=\"color: #a31515;\">\"_textBox\"</span>, _\r\n                Reflection.BindingFlags.Instance <span style=\"color: blue;\">Or</span> Reflection.BindingFlags.NonPublic)\r\n        <span style=\"color: blue;\">If</span> <span style=\"color: blue;\">Not</span> fieldInfo <span style=\"color: blue;\">Is</span> <span style=\"color: blue;\">Nothing</span> <span style=\"color: blue;\">Then</span>\r\n            <span style=\"color: blue;\">Dim</span> datePickerTextBox <span style=\"color: blue;\">As</span> Primitives.DatePickerTextBox = fieldInfo.GetValue(picker)\r\n            <span style=\"color: blue;\">If</span> <span style=\"color: blue;\">Not</span> datePickerTextBox <span style=\"color: blue;\">Is</span> <span style=\"color: blue;\">Nothing</span> <span style=\"color: blue;\">Then</span>\r\n                <span style=\"color: blue;\">Dim</span> propertyInfo <span style=\"color: blue;\">As</span> Reflection.PropertyInfo = _\r\n                    datePickerTextBox.<span style=\"color: blue;\">GetType</span>().GetProperty(<span style=\"color: #a31515;\">\"Watermark\"</span>, _\r\n                        Reflection.BindingFlags.Instance <span style=\"color: blue;\">Or</span> Reflection.BindingFlags.NonPublic)\r\n                <span style=\"color: blue;\">If</span> <span style=\"color: blue;\">Not</span> propertyInfo <span style=\"color: blue;\">Is</span> <span style=\"color: blue;\">Nothing</span> <span style=\"color: blue;\">Then</span>\r\n                    propertyInfo.SetValue(datePickerTextBox, <span style=\"color: blue;\">String</span>.Empty, <span style=\"color: blue;\">Nothing</span>)\r\n                <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n            <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">If</span>\r\n    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Sub</span>\r\n\r\n</pre>\r\n</div>",
    "PostedDate": "2012-01-05T15:06:52.35-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]