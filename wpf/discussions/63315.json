[
  {
    "Id": "215264",
    "ThreadId": "63315",
    "Html": "<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;padding:0px;border:0px initial initial\">I am trying to develop a filtering functionality for WPF DataGrid. I want a user to right-click any cell and select &quot;Filter&quot; from its context menu, and then the grid should be filtered by the cell's value.</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;padding:0px;border:0px initial initial\">I am trying the M-V-VM pattern. My windows's datacontext is MainWindowViewModel which has a property &quot;Transactions&quot;. This property returns ObservableCollection, and the data grid uses this collection as its items source. So basically each row is bounded to TransactionViewModel (as you can guess, this grid lists transactions). MainWindowsViewModel has ICollectionView which is used for filtering and tracking the currently selected row. The datagrid has its property IsSynchronizedWithCurrentItem set to &quot;true&quot;, so myCollectionView.CurrentItem gives me the currently selected TransactionViewModel.</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;padding:0px;border:0px initial initial\">The only thing I still need to know is by which column I need to filter. This depends on where the user clicked the context menu. So I am trying to pass this information using CommandProperty of the context menu item. And here I have a real problem. I tried this:</p>\r\n<pre style=\"margin-top:0px;margin-right:0px;margin-bottom:10px;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:#f5f5f5;font-family:Consolas, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New';overflow-x:auto;overflow-y:auto;width:auto;background-position:initial initial;padding:5px;border:0px initial initial\"><code style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;font-family:Consolas, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New';background-position:initial initial;padding:0px;margin:0px;border:0px initial initial\"><span style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;color:#2b91af;background-position:initial initial;padding:0px;margin:0px;border:0px initial initial\">CommandParameter</span><span style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;color:black;background-position:initial initial;padding:0px;margin:0px;border:0px initial initial\">=</span><span style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;color:maroon;background-position:initial initial;padding:0px;margin:0px;border:0px initial initial\">&quot;{Binding Column.Binding.Path.Path, <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RelativeSource={RelativeSource FindAncestor,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;AncestorType={x:Type tk:DataGridCell}}}&quot;</span><span style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;color:black;background-position:initial initial;padding:0px;margin:0px;border:0px initial initial\"> </span><span style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;color:black;background-position:initial initial;padding:0px;margin:0px;border:0px initial initial\">/&gt;</span><span style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;color:black;background-position:initial initial;padding:0px;margin:0px;border:0px initial initial\"><br></span></code></pre>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;padding:0px;border:0px initial initial\">This is really ugly, but this works for DataGridTextColumns. Unfortunately, I have also DataGridTemplateColumns, and they don't work (the path is different there, because I need to reach the actual cell template)...</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;padding:0px;border:0px initial initial\">So how can I implement this functionality? Perhaps the whole way is wrong? I didn't find any valuable example on that. The only thing I found is the WPF DataGrid autofilter implementatin on the Codeproject which doesn't work at all for some reason...</p>",
    "PostedDate": "2009-07-23T05:38:17.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "215276",
    "ThreadId": "63315",
    "Html": "<p>I know it is almost certainly not an ideal solution, but when I was faced with this exact problem, I solved it by building the context menu dynamically (in the ContextMenuOpening event, as I recall) and using the &quot;filter&quot; submenu's items' Tag property to reference the column in question. I could have subclassed MenuItem and given it a separate property for this, but Tag was readily available and a column reference was all I needed. The column, in turn, was enriched with a property holding the current filter condition, and the DataGrid's Items.Filter callback simply went over the collection of columns and applied each filter condition in turn if there was one defined. At least for reasonably limited data set sizes, this worked fine - I haven't tried with really large data sets, but on the order of 2000 rows by 25 columns proved completely manageable in terms of performance - and dynamically building the context menu made it very easy to provide user feedback on filtering status both per column and for the whole grid. And if you can live with needing to subclass the DataGrid class and the few data grid column types, it's relatively painless to implement. (I was already subclassing for other reasons, so that wasn't a concern for me.)</p>",
    "PostedDate": "2009-07-23T06:04:03.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "230937",
    "ThreadId": "63315",
    "Html": "<p>Hey guys... I'm in a similar spot you guys are in thow a bit more simple, so I was hoping you might have some insight.</p>\r\n<p>I have an MVVM application using a datagrid as well... same idea as dmitryp's in that I have a GridViewModel that exposes an OC&lt;BusinessObjectViewModel&gt;. My business object view model has an enum property for its business state: InProcess, Finalized, and Archived.</p>\r\n<p>What I am trying to do is implement 3 check boxes below the grid, that allow me to toggle the presence of items in my grid by their states. So that when &quot;Show InProcess&quot; is checked, they are included in the items source... when its not checked, they are removed from the items source collection... or if not removed from the OC, removed from display in the grid at least... that's probably better anyway.</p>\r\n<p>Any thoughts on how I could go about doing this?</p>\r\n<p>I've only seen examples of using ICV in the view's code-behind so I'm at a loss here.</p>\r\n<p>&nbsp;</p>\r\n<p>-Trey</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-03T16:55:08.69-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "231727",
    "ThreadId": "63315",
    "Html": "<p>I would again suggest looking at Items.Filter. It's a delegate implemented thus:</p>\r\n<p>bool myGreatFilterFunction(object item)<br>{<br>&nbsp;&nbsp;&nbsp; bool shouldShow = true;<br>&nbsp; &nbsp; BusinessObjectType bo = item as BusinessObjectType;<br>&nbsp;&nbsp;&nbsp; // do magic on &quot;bo&quot; and shouldShow //<br>&nbsp; &nbsp; return shouldShow;<br>}</p>\r\n<p>As long as you don't need to perform any lengthy operations (remember this is called once per row) this has worked well for me, and it leaves the collection untouched.</p>",
    "PostedDate": "2009-09-06T23:36:38.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "232291",
    "ThreadId": "63315",
    "Html": "<p>Thanks for the reply. I understand the idea of using a delegate I think. If I do a better job explaining myself, here's a little bit more accurately where I am stuck:</p>\r\n<p>1. I am trying to provide filter functionality in the ViewModel layer, and be one of those annoying purists who doesn't put stuff in the code-behind of the View. So the DataGrid object is inaccessible by nature in my goals.</p>\r\n<p>2. My three check boxes are independent of each other, and need to remain so. Meaning, if all three are checked, all three states are shown, and any combination of those may happen.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-08T10:06:46.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "232659",
    "ThreadId": "63315",
    "Html": "<p>Here's an example of applying a filter in a VM:</p>\r\n<pre>   <div style=\"color:Black;background-color:White\"><pre><div style=\"color:Black;background-color:White\"><pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> ViewModel : INotifyPropertyChanged\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> CollectionView _dpCollection;\r\n        <span style=\"color:Blue\">private</span> DataFilter _dataFilter;\r\n\r\n        <span style=\"color:Blue\">public</span> CollectionView DPCollection\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> _dpCollection;\r\n            }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                _dpCollection = value;\r\n\r\n                <span style=\"color:Blue\">this</span>.DataFilter = <span style=\"color:Blue\">new</span> DataFilter(_dpCollection);\r\n                _dpCollection.Filter = <span style=\"color:Blue\">new</span> Predicate(<span style=\"color:Blue\">this</span>.DataFilter.FilterItem);\r\n                OnPropertyChanged(<span style=\"color:#A31515\">&quot;DPCollection&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> DataFilter DataFilter\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _dataFilter; }\r\n            private <span style=\"color:Blue\">set</span>\r\n            {\r\n                _dataFilter = value;\r\n                OnPropertyChanged(<span style=\"color:#A31515\">&quot;DataFilter&quot;</span>);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> DataFilter : INotifyPropertyChanged\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> DataFilter(CollectionView view)\r\n        {\r\n            <span style=\"color:Blue\">this</span>.CollectionView = view;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> CollectionView CollectionView { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">bool</span> FilterItem(<span style=\"color:Blue\">object</span> item)\r\n        {\r\n            <span style=\"color:Blue\">bool</span> retVal = <span style=\"color:Blue\">true</span>;\r\n            <span style=\"color:Blue\">var</span> viewModel = item <span style=\"color:Blue\">as</span> DPViewModel;\r\n            <span style=\"color:Blue\">if</span> (viewModel != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                <span style=\"color:Green\">// filter here </span>\r\n            }\r\n            <span style=\"color:Blue\">return</span> retVal;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">virtual</span> <span style=\"color:Blue\">void</span> OnPropertyChanged(<span style=\"color:Blue\">string</span> propertyName)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (<span style=\"color:Blue\">this</span>.CollectionView != <span style=\"color:Blue\">null</span>)\r\n                <span style=\"color:Blue\">this</span>.CollectionView.Refresh();\r\n\r\n            <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                PropertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> PropertyChangedEventArgs(propertyName));\r\n            }\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>      </pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-09T06:23:40.79-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246705",
    "ThreadId": "63315",
    "Html": "<p>The biggest place I am stuck now with moving the filtering into the VM layer is with tying the filters to the necessary events.</p>\r\n<p>For instance, checkboxes' Checked and Unchecked events. The initial handlers have to be in code-behind in a View if I understand it right.</p>\r\n<p>In which case when I have an object state  filters (ex. 3 check boxes functioning in parallel to toggle display). The checkboxes have event handlers for Checked and Unchecked -- adding a filter to the grid's CollectionViewSource collection on Unchecked (thus removing the items of that state), and removing the filter when Checked fires.</p>\r\n<p>How could I do something like that in the ViewModel layer without coupling the two layers tightly?</p>\r\n<p>-T</p>",
    "PostedDate": "2009-10-16T14:03:41.967-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]