[
  {
    "Id": "236628",
    "ThreadId": "69531",
    "Html": "<p>I need to get notified after a row has been deleted from a DataGrid.</p>\r\n<p>What I'm going to do then, is to update a different object, which in turn will modify the datagrid contents.</p>\r\n<p>A method hooked up to&nbsp;&nbsp;RowEditEnding handles when new rows are added, or existing rows are modified, but isn't called when rows are deleted.</p>\r\n<p>I first tried looking for something similar &nbsp;to RowEditEnding, but there wasn't any.</p>\r\n<p>I then tried searching this forum, and found this thread &nbsp;http://wpf.codeplex.com/Thread/View.aspx?ThreadId=51987</p>\r\n<p>I added a preview executed handler as outlined in the thread, and everything was called, but nothing happened... and then it struck me that it was called before anything was changed.</p>\r\n<p>I then switched from using a preview executed handler to an executed handler. &nbsp;But that handler was never called.</p>\r\n<p>The ItemsSource of the datagrid is an ObservableCollection, so I tried listening for a Remove action there. &nbsp;But that failed with a stacktrace that was caused by</p>\r\n<p>&nbsp; System.InvalidOperationException: Cannot change ObservableCollection during a CollectionChanged event.<br><br>&nbsp;So... is there a way for me to get notification after a row has been deleted, that I haven't seen? &nbsp;Was adding an executed handler supposed to be the right way of listening for a completed delete command?</p>\r\n<p>&nbsp;</p>\r\n<p>thanx!</p>",
    "PostedDate": "2009-09-20T11:08:07.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "237181",
    "ThreadId": "69531",
    "Html": "<p>I'm guessing the reason the handler added with CommandManager.AddExecutedHandler wasn't called, is that something else &quot;ate&quot; the event...?</p>\r\n<p>Is there some way to get your own handler called early, and let your handler not &quot;eat&quot; the event, but pass it on to another handler that may need it?</p>\r\n<p>Or will that mean that it will be called before the actual delete operation again?</p>",
    "PostedDate": "2009-09-22T00:48:58.777-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "237187",
    "ThreadId": "69531",
    "Html": "<p>Hm... looking at this http://www.visual-studio-forum.info/8/5/596515.html &nbsp;it seems the approach is to use CommandManager.AddPreviewExecutedHandler to add a handler, and in the handler:</p>\r\n<ul>\r\n<li>do the command</li>\r\n<li>call the code I need to be called after the delete</li>\r\n</ul>\r\n<p>I'll try that.</p>",
    "PostedDate": "2009-09-22T01:01:08.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "237256",
    "ThreadId": "69531",
    "Html": "<p>&nbsp;</p>\r\n<p>Ok. &nbsp;That worked. &nbsp;Not pretty, because of the way I had to handle a loop that caused a stack overflow (gives me an icky feeling)</p>\r\n<p>CommandManager.AddPreviewExecutedHandler(schemaDataGrid, HandlePreviewSchemaRowDeleteCommands);<br><br>and then</p>\r\n<p>private void HandlePreviewSchemaRowDeleteCommands(object sender, ExecutedRoutedEventArgs e)<br>{<br>&nbsp; &nbsp; &nbsp;if (e.Command == DataGrid.DeleteCommand)<br>&nbsp; &nbsp; &nbsp;{<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;try<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (excutingDeleteCommand)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return; // Avoiding loop, and dying because of stack overflow...<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;excutingDeleteCommand = true;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;e.Command.Execute(sender);<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DeleteRowEventHandler();<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;e.Handled = true; // Set e.Handled=true here, to avoid the delete command being run twice.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;finally<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;excutingDeleteCommand = false;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>&nbsp; &nbsp; &nbsp;}<br>}</p>\r\n<p>Note that executingDeleteCommand is a bool field on the UserControl subclass containing the DataGrid, and the DeleteRowEventHandler contains the code I would have run from a method handling delete events (if the datagrid had had such).</p>\r\n<p>Suggestion for improvements are welcome.</p>",
    "PostedDate": "2009-09-22T04:26:53.747-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "237515",
    "ThreadId": "69531",
    "Html": "<p>Hi, the solution you stated in the original post is valid.&nbsp; Listen to item removed in the ItemsSource collection.&nbsp;&nbsp;In order to avoid the exception, what you can do is post your operation on the Dispatcher, instead of executing it syncronously on the collection changed&nbsp;event.</p>\r\n<p>Hope that helps,</p>\r\n<p>Saied K.</p>",
    "PostedDate": "2009-09-22T13:47:08.407-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]