[
  {
    "Id": "147466",
    "ThreadId": "44305",
    "Html": "Hi,<br>\r\n<br>\r\nI am using an <strong>expander</strong> as my DataGrid &lt;GroupStyle.ContainerStyle&gt; to provide data grouping.&nbsp; Once the grouping is applied, I need to provide a way to programmatically expand/collapse all groups.<br>\r\n<br>\r\nWhat I have so far is the following, which gives me a collection of GroupItems in my Data Grid.&nbsp; But from there, how do I get the Expander widget?<br>\r\n<br>\r\nAm I on the right track, or way off base?<br>\r\n<br>\r\nThanks for the help,<br>\r\nE.<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void toggleAllGroups(bool isExpanded) {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CollectionView myView;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myView = (CollectionView)CollectionViewSource.GetDefaultView(myDataGrid.ItemsSource);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (myView.CanGroup == true) {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // get all currently applied groups<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReadOnlyObservableCollection&lt;object&gt; groups = myView.Groups;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (object o in groups) {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CollectionViewGroup g = o as CollectionViewGroup;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DependencyObject container = PBDataGrid.ItemContainerGenerator.ContainerFromItem(g);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (container != null) {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GroupItem gi = container as GroupItem;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // TODO <span style=\"text-decoration:underline\"><strong>From the GroupItem, how do I get the Expander at this point, to call IsExpanded=true/false?</strong></span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\nMy container style definition is as follows:<br>\r\n&nbsp;&nbsp;&nbsp; &lt;!-- a grouping style that uses an expander to render the grouped data --&gt;<br>\r\n&nbsp;&nbsp; &nbsp;&lt;Style x:Key=&quot;GroupContainerStyle&quot;&nbsp; TargetType=&quot;{x:Type GroupItem}&quot;&gt;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;Setter Property=&quot;Template&quot;&gt;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;Setter.Value&gt;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;ControlTemplate TargetType=&quot;{x:Type GroupItem}&quot;&gt;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;Expander IsExpanded=&quot;False&quot; x:Name=&quot;groupExpander&quot;&gt;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;Expander.Header&gt;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;Grid&gt;...........<br>\r\n<br>\r\n",
    "PostedDate": "2009-01-15T11:48:01.607-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "147669",
    "ThreadId": "44305",
    "Html": "Hi,<br>\r\n<br>\r\nThis is the classic problem of how to locate the element you require in the visual tree. I always use a combination of Mole and the VisuaTreeHelper methods for walking the tree. See for example this blog post:<br>\r\n<br>\r\nhttp://wpfadventures.wordpress.com/2008/12/02/wpf-datagrid-detecting-clicked-cell-and-row/<br>\r\n<br>\r\nRegards,<br>\r\nColin E. <br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2009-01-16T04:22:07-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "147797",
    "ThreadId": "44305",
    "Html": "Fantastic - thanks very much!<br>\r\n<br>\r\nFrom my above code, all I needed was to go one child down, and I had my Expander:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DependencyObject dep = VisualTreeHelper.GetChild(gi, 0);<br>\r\n<br>\r\nThis solves my problem; but is this truly a recommended way of getting at things, in essence, circumventing the API (or in this instance, lack thereof)?<br>\r\n<br>\r\nBest,<br>\r\nE.<br>\r\n<br>\r\n",
    "PostedDate": "2009-01-16T11:13:22.87-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]