[
  {
    "Id": "162843",
    "ThreadId": "48764",
    "Html": "I initailly submitted this as a <a href=\"http://wpf.codeplex.com/WorkItem/View.aspx?WorkItemId=9328\">issue</a>, but maybe I'm just doing something wrong.<br>\r\n<br>\r\nTo reproduce the problem, I started with <a href=\"http://blogs.msdn.com/vinsibal/archive/2008/11/04/wpf-vsm-and-datagrid-sample.aspx\">Vincent Sibal’s sample</a> on using VSM with the DataGrid<br>\r\n<br>\r\nAnd I made the following changes:<br>\r\n1) Removed the WPFToolkit project and replaced it with a reference to the 3.5.40128.1 dll<br>\r\n2) Added a button to force garbage collection<br>\r\n3) Modified Window1 so it allocates 100MB of memory when it is instantiated<br>\r\n4) Added Window2, which is an exact copy of Window1 except I removed RowStyle=&quot;{DynamicResource defaultRowStyle}&quot; from the DataGrid<br>\r\n5) Added an OnDetatch override to DataGridRowBehavior<br>\r\n<br>\r\nI cannot attach a file tro this post, but you can download the project from the <a href=\"http://wpf.codeplex.com/WorkItem/View.aspx?WorkItemId=9328\">issue</a>.<br>\r\n<br>\r\nWhen you run the application, click the “Window1” button and you will see the memory jump up by 100MB. Close Window1 and click the “Garbage Collect” button. The memory allocated for Window1 does not get collected.<br>\r\n<br>\r\nNow click the “Window2” button to show the Window that does not have the RowStyle set. Again you will see the 100MB get allocated. Close Window2 and click the “Garbage Collect” button. This time the allocated memory is collected.<br>\r\n<br>\r\nThe only difference between the two windows is the use of VSM.<br>\r\n<br>\r\nHere is my implementation of OnAttach and OnDetach, perhaps I'm missing something there?<br>\r\n<br>\r\n<span style=\"font-size:13px\">\r\n<p> </p>\r\n</span>\r\n<p><span style=\"font-size:13px;color:#0000ff\">private</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\">EventHandler</span><span style=\"font-size:13px\"> handler = </span><span style=\"font-size:13px;color:#0000ff\">null</span><span style=\"font-size:13px\">; <br>\r\n<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">protected</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">override</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">void</span><span style=\"font-size:13px\"> OnAttach(</span><span style=\"font-size:13px;color:#2b91af\">Control</span><span style=\"font-size:13px\"> control) <br>\r\n{ <br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">   base</span><span style=\"font-size:13px\">.OnAttach(control); <br>\r\n</span><span style=\"font-size:13px;color:#2b91af\">   DataGridRow</span><span style=\"font-size:13px\"> dataGridRow = (</span><span style=\"font-size:13px;color:#2b91af\">DataGridRow</span><span style=\"font-size:13px\">)control; <br>\r\n</span><span style=\"font-size:13px;color:#2b91af\">   Type</span><span style=\"font-size:13px\"> targetType = </span><span style=\"font-size:13px;color:#0000ff\">typeof</span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#2b91af\">DataGridRow</span><span style=\"font-size:13px\">); <br>\r\n   handler = </span><span style=\"font-size:13px;color:#0000ff\">delegate</span><span style=\"font-size:13px\"> { UpdateState(dataGridRow, </span><span style=\"font-size:13px;color:#0000ff\">true</span><span style=\"font-size:13px\">); }; <br>\r\n   AddValueChanged(</span><span style=\"font-size:13px;color:#2b91af\">DataGridRow</span><span style=\"font-size:13px\">.IsMouseOverProperty, targetType, dataGridRow, handler); <br>\r\n   AddValueChanged(</span><span style=\"font-size:13px;color:#2b91af\">DataGridRow</span><span style=\"font-size:13px\">.IsSelectedProperty, targetType, dataGridRow, handler); <br>\r\n   AddValueChanged(</span><span style=\"font-size:13px;color:#2b91af\">DataGridRow</span><span style=\"font-size:13px\">.IsEditingProperty, targetType, dataGridRow, handler); <br>\r\n}<br>\r\n<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">protected</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">override</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">void</span><span style=\"font-size:13px\"> OnDetach(</span><span style=\"font-size:13px;color:#2b91af\">Control</span><span style=\"font-size:13px\"> control)  <br>\r\n{<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">   base</span><span style=\"font-size:13px\">.OnDetach(control); <br>\r\n</span><span style=\"font-size:13px;color:#2b91af\">   DataGridRow</span><span style=\"font-size:13px\"> dataGridRow = (</span><span style=\"font-size:13px;color:#2b91af\">DataGridRow</span><span style=\"font-size:13px\">)control; <br>\r\n</span><span style=\"font-size:13px;color:#2b91af\">   Type</span><span style=\"font-size:13px\"> targetType = </span><span style=\"font-size:13px;color:#0000ff\">typeof</span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#2b91af\">DataGridRow</span><span style=\"font-size:13px\">); <br>\r\n   RemoveValueChanged(</span><span style=\"font-size:13px;color:#2b91af\">DataGridRow</span><span style=\"font-size:13px\">.IsMouseOverProperty, targetType, dataGridRow, </span><span style=\"font-size:13px;color:#0000ff\">this</span><span style=\"font-size:13px\">.handler); <br>\r\n   RemoveValueChanged(</span><span style=\"font-size:13px;color:#2b91af\">DataGridRow</span><span style=\"font-size:13px\">.IsSelectedProperty, targetType, dataGridRow, </span><span style=\"font-size:13px;color:#0000ff\">this</span><span style=\"font-size:13px\">.handler); <br>\r\n   RemoveValueChanged(</span><span style=\"font-size:13px;color:#2b91af\">DataGridRow</span><span style=\"font-size:13px\">.IsEditingProperty, targetType, dataGridRow, </span><span style=\"font-size:13px;color:#0000ff\">this</span><span style=\"font-size:13px\">.handler); <br>\r\n}\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2009-02-27T10:59:54.273-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "162921",
    "ThreadId": "48764",
    "Html": "Hi, this sounds very similar to a memory leak we had in VSM that we fixed in the new version of the WPFToolkit.  I'll try to investigate this further and see what the problem could be.<br>\r\n<br>\r\nRegards,<br>\r\nSaied K\r\n",
    "PostedDate": "2009-02-27T14:01:58.593-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "164075",
    "ThreadId": "48764",
    "Html": "Hi Saied, did you have luck tracking this down?<br>\r\n<br>\r\nThanks<br>\r\nJohn \r\n",
    "PostedDate": "2009-03-03T14:11:56.213-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "172486",
    "ThreadId": "48764",
    "Html": "Hi John,<br>\r\n<br>\r\nVincent made a suggestion on the issue tracker.  He said that this is because the DataGridRowBehavior class was not updated to implement the OnDetach protected method for that particular behavior class. Once the events are detached it should eliminate the memory leak, as it has with the other controls.  If the memory leak persists after this modification, it is likely but improbable that it's related to VSM.<br>\r\n<br>\r\nThe release of VSM through the WPFToolKit was meant to introduce people to the feature and also to shorten the compatibility gap between Silverlight and WPF.  We're aware of the suggestions that people such as yourself have made regarding this feature, and we've been working to enhance VSM and integrate it into the .NET 4.0 framework.  The VSM in the .NET 4.0 release no longer relies on behavior classes and therefore eliminates any issues regarding memory leaks that it has had in the WPFToolKit.  John, if the fix above still causes VSM memory leaks then I personally suggest adopting this feature from the .NET 4.0 framework release.<br>\r\n<br>\r\nHope that helps,<br>\r\nSaied Khanahmadi\r\n",
    "PostedDate": "2009-03-26T13:24:18.823-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "172499",
    "ThreadId": "48764",
    "Html": "Thanks Saied - <br>\r\n<br>\r\nI tried implementing OnDetach, but that did not fix the leak.  The second file I posted in the issue demonstrates the leak with OnDetach implemented (assuming I implemented it correctly).  I'll keep messing with ii a little, but it looks like I will have to wait for 4.0.<br>\r\nJohn\r\n",
    "PostedDate": "2009-03-26T13:36:38.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]