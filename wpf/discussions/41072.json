[
  {
    "Id": "136214",
    "ThreadId": "41072",
    "Html": "I'm binding to an ObservableCollection and need a way to know that a cell/row has changed.<br>\r\n<br>\r\nMy first thought was to use some sort of validation rules.<br>\r\n<br>\r\nA previous poster had posted an example where the follow code was used to do row level validation:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dg:DataGrid.RowValidationRules&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dc:RowDummyValidation ValidationStep=&quot;UpdatedValue&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dg:DataGrid.RowValidationRules&gt;<br>\r\n<br>\r\nThis might work, but I don't know what RowDummyValidation is or how to make it.<br>\r\n<br>\r\nThanks,<br>\r\n<br>\r\nBill <br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-11-28T23:22:26.3-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136216",
    "ThreadId": "41072",
    "Html": "sorry, the xaml code was actually this:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dg:DataGrid.RowValidationRules&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;<strong>local</strong>:RowDummyValidation ValidationStep=&quot;UpdatedValue&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dg:DataGrid.RowValidationRules&gt;<br>\r\n<br>\r\nand in the code behind:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private override ValidationResult Validate(object value, System.Globalization.CultureInfo cultureInfo)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ValidationResult.ValidResult;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-28T23:33:01.37-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136272",
    "ThreadId": "41072",
    "Html": "Hi,<br>\r\n<br>\r\nThe best way to determine when a row has changed is to detect when the DataGrid commits the change. If your objects implement IEditableObject you can raise an event when the EndEdit methods is invoked by the DataGrid. See this article for details:<br>\r\n<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx<br>\r\n<br>\r\nEspecially the part about layered architectures:<br>\r\n<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx#layered<br>\r\n<br>\r\nRegards,<br>\r\nColin E. <br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-11-29T12:41:40.047-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136298",
    "ThreadId": "41072",
    "Html": "Hey Colin,<br>\r\n<br>\r\nThanks for getting back. I 've been using your fine article since the very beginning with DataGrid, but in this case, I seem to not be finding what I'm looking for. But I think you gave me an idea ...<br>\r\n<br>\r\nThe collection bound to the DataGrid implements ObservableCollection which (I think) means it must implement INotifyPropertyChanged.&nbsp; So each field has a PropertyChangedEventHandler event which I think I can look at.&nbsp; <br>\r\n<br>\r\nThanks,<br>\r\n<br>\r\nBill<br>\r\n",
    "PostedDate": "2008-11-29T19:07:57.45-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]