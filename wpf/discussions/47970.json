[
  {
    "Id": "160050",
    "ThreadId": "47970",
    "Html": "When I nest datagrids so that I add new datagrid to other grids RowDetailsTemplate, I would expect the layout of the outer grid dynamically change when the dimensions of the inner grids change. However, this seems not to be the case in all situations. The outer grid dynamically increases it's size to show it's content, but it won't decrease it's size after content's size decreases.<br>\r\n <br>\r\nThe following animation demonstrates the problem. When the animated rectangles increase in size the height of the outer grid increases respectively, but when the rectangles start to minimize, the outer grid doesn't minimize. Is this a bug or a feature, and how it possibly can be fixed?<br>\r\n<br>\r\n&lt;Window x:Class=&quot;Test.Window&quot;<br>\r\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>\r\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>\r\n    xmlns:Controls=&quot;clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit&quot;<br>\r\n    Width=&quot;1000&quot;<br>\r\n    Height=&quot;600&quot;&gt;<br>\r\n    &lt;Window.Resources&gt;<br>\r\n        &lt;XmlDataProvider x:Key=&quot;Data&quot; XPath=&quot;Data/Colors/Color&quot;&gt;<br>\r\n            &lt;x:XData&gt;<br>\r\n                &lt;Data xmlns=&quot;&quot;&gt;<br>\r\n                    &lt;Colors&gt;<br>\r\n                        &lt;Color Name=&quot;Red&quot;&gt;<br>\r\n                            &lt;Test /&gt;<br>\r\n                        &lt;/Color&gt;<br>\r\n                        &lt;Color Name=&quot;Green&quot;&gt;<br>\r\n                            &lt;Test /&gt;<br>\r\n                        &lt;/Color&gt;<br>\r\n                        &lt;Color Name=&quot;Blue&quot;&gt;<br>\r\n                            &lt;Test /&gt;<br>\r\n                        &lt;/Color&gt;<br>\r\n                        &lt;Color Name=&quot;Orange&quot;&gt;<br>\r\n                            &lt;Test /&gt;<br>\r\n                        &lt;/Color&gt;<br>\r\n                    &lt;/Colors&gt;<br>\r\n                &lt;/Data&gt;<br>\r\n            &lt;/x:XData&gt;<br>\r\n        &lt;/XmlDataProvider&gt;<br>\r\n    &lt;/Window.Resources&gt;<br>\r\n    &lt;Controls:DataGrid AutoGenerateColumns=&quot;False&quot;<br>\r\n                       ItemsSource=&quot;{Binding Source={StaticResource Data}}&quot;<br>\r\n                       RowDetailsVisibilityMode=&quot;Visible&quot;<br>\r\n                       CanUserAddRows=&quot;False&quot;<br>\r\n                       CanUserDeleteRows=&quot;False&quot;<br>\r\n                       ScrollViewer.CanContentScroll=&quot;False&quot;&gt;<br>\r\n        &lt;Controls:DataGrid.RowDetailsTemplate&gt;<br>\r\n            &lt;DataTemplate&gt;<br>\r\n                &lt;Controls:DataGrid DockPanel.Dock=&quot;Top&quot;<br>\r\n                                   AutoGenerateColumns=&quot;False&quot;<br>\r\n                                   ItemsSource=&quot;{Binding XPath=Test}&quot;<br>\r\n                                   RowDetailsVisibilityMode=&quot;Visible&quot;<br>\r\n                                   CanUserAddRows=&quot;False&quot;<br>\r\n                                   CanUserDeleteRows=&quot;False&quot;&gt;<br>\r\n                    &lt;Controls:DataGrid.RowDetailsTemplate&gt;<br>\r\n                        &lt;DataTemplate&gt;<br>\r\n                            &lt;Rectangle Width=&quot;50&quot;<br>\r\n                                       Height=&quot;50&quot;<br>\r\n                                       Fill=&quot;Red&quot;&gt;<br>\r\n                                &lt;Rectangle.Triggers&gt;<br>\r\n                                    &lt;EventTrigger RoutedEvent=&quot;FrameworkElement.Loaded&quot;&gt;<br>\r\n                                        &lt;EventTrigger.Actions&gt;<br>\r\n                                            &lt;BeginStoryboard&gt;<br>\r\n                                                &lt;Storyboard Storyboard.TargetProperty=&quot;Height&quot;&gt;<br>\r\n                                                    &lt;DoubleAnimationUsingKeyFrames Duration=&quot;0:0:5&quot;<br>\r\n                                                                                   RepeatBehavior=&quot;Forever&quot;<br>\r\n                                                                                   AutoReverse=&quot;True&quot;&gt;<br>\r\n                                                        &lt;LinearDoubleKeyFrame Value=&quot;100&quot; /&gt;<br>\r\n                                                    &lt;/DoubleAnimationUsingKeyFrames&gt;<br>\r\n                                                &lt;/Storyboard&gt;<br>\r\n                                            &lt;/BeginStoryboard&gt;<br>\r\n                                        &lt;/EventTrigger.Actions&gt;<br>\r\n                                    &lt;/EventTrigger&gt;<br>\r\n                                &lt;/Rectangle.Triggers&gt;<br>\r\n                            &lt;/Rectangle&gt;<br>\r\n                        &lt;/DataTemplate&gt;<br>\r\n                    &lt;/Controls:DataGrid.RowDetailsTemplate&gt;<br>\r\n                &lt;/Controls:DataGrid&gt;<br>\r\n            &lt;/DataTemplate&gt;<br>\r\n        &lt;/Controls:DataGrid.RowDetailsTemplate&gt;<br>\r\n        &lt;Controls:DataGrid.Columns&gt;<br>\r\n            &lt;Controls:DataGridTextColumn Header=&quot;Name&quot;<br>\r\n                                         Binding=&quot;{Binding XPath=@Name}&quot; /&gt;<br>\r\n        &lt;/Controls:DataGrid.Columns&gt;<br>\r\n    &lt;/Controls:DataGrid&gt;<br>\r\n&lt;/Window&gt; \r\n",
    "PostedDate": "2009-02-19T23:49:53.847-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "160234",
    "ThreadId": "47970",
    "Html": "Hi annyman,<br>\r\n<br>\r\nThis is actually by design.  The main scenario that this feature was designed for was scrolling when virtualization is turned on, and we decided that cell sizes should be &quot;grow only&quot; by default.  Basically, if you're scrolling through the grid, as cells become unvirtualized, the minimum cell size will grow to fit the largest cell content.  If we then made the cells shrink as smaller content came into view, you'd see the cells oscillating their width, which can be really distracting and create a jumpy UI.  In addition, shrinking the cells back down would require a costly measure and arrange pass, so we did this as a performance enhancement also.  <br>\r\n<br>\r\nWe've gotten some requests to turn off this behavior, in particular for the scenario when the ItemsSource changes, and this seems like another valid scenario where you may not want the built-in behavior.  We are considering adding some APIs to enable this in V2, and I've added your request to our internal database.  In addition, in V2 we should have better support for displaying hierarchal data in general.<br>\r\n<br>\r\nIf you'd like to try to enable this yourself, you have a few options.  <span style=\"font-family:'times new roman','serif'\">One hacky you can do is to force the column widths to update whenever is appropriate in for app.  The way to do this is to set the column width to a small absolute value (like 10) and then back to Auto/SizeToHeader/SizeToCells programmatically.  This will trigger a new measure and arrange and auto-size the columns appropriately to whatever is visible.  I’m not sure what the UI will look like while this is happening since I haven’t tried it out, but if the end user can see it and it looks weird, you could do another hacky thing and take a screenshot of the grid before you change the column widths and put it over the actual grid to hide what’s going on in the background.  </span>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'times new roman','serif'\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'times new roman','serif'\">If you’d prefer to do things the “right” way, then you’ll have to override Measure and find the largest DesiredWidth for all of the visible columns and set the column width to that value.  However, this is more difficult to do and may result in a performance hit.  <br>\r\n<br>\r\nThanks!<br>\r\nSamantha</span></p>\r\n",
    "PostedDate": "2009-02-20T10:30:38.683-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "194456",
    "ThreadId": "47970",
    "Html": "<p>FYI</p>\r\n<p>The associated enumeration is&nbsp;Microsoft.Windows.Controls.DataGridLength;</p>\r\n<p>Tracy</p>",
    "PostedDate": "2009-05-26T12:32:50.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]