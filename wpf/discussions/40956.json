[
  {
    "Id": "135880",
    "ThreadId": "40956",
    "Html": "Hi<br>\r\n<br>\r\nI have a datagrid bound to a datatable returning a string and 3 booleans. As the datatable can vary in number of columns returned, I decided to autgenerate the cols.<br>\r\n<br>\r\nI like to check if there are unsaved changes in the grid before starting a function.<br>\r\nTherefore I check my&nbsp; datacontext using datatable.GetChanges, which works fine if I change a boolean value and leave the gridrow in which the change took place.<br>\r\nIf I leave the cursor in the changed row, the datatables has no changes.<br>\r\nIt seems to me that the control did not update the Binding source in this case.<br>\r\n<br>\r\nI already tried to do this using the following function that works well for textboxes:<br>\r\n<br>\r\n&nbsp;&nbsp; Protected Sub UpdateFocusedField()<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim oFwE As FrameworkElement = TryCast(Keyboard.FocusedElement, FrameworkElement)<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If oFwE IsNot Nothing Then<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim oExpr As BindingExpression = Nothing<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If TypeOf oFwE Is TextBox Then<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oExpr = oFwE.GetBindingExpression(TextBox.TextProperty)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ElseIf TypeOf oFwE Is CheckBox Then<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oExpr = oFwE.GetBindingExpression(CheckBox.IsCheckedProperty)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If oExpr IsNot Nothing Then<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oExpr.UpdateSource()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>\r\n<br>\r\n&nbsp;&nbsp; End Sub<br>\r\n<br>\r\nBut I am not quite sure if I use the correct Prop in the line<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oExpr = oFwE.GetBindingExpression(CheckBox.<strong>IsCheckedProperty</strong>)<br>\r\n<br>\r\nTo make it short, the source is not updated when I leave the cursor in the changed gridrow<br>\r\n<br>\r\nMy questions:<br>\r\n1) Is there a better way (maybe does the datagrid itself has some knowledge of &quot;dirty&quot; data)?<br>\r\n2) If not, is there a way to update the source, maybe by setting the updatesourcetrigger of the binding to &quot;PropertyChanged&quot;? Maybe you can post me an example of how to achieve this using a setter? (I use autogenerate on the columns)<br>\r\n<br>\r\nRegards<br>\r\nKlaus<br>\r\n<br>\r\n&nbsp;<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-27T08:52:04.783-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "135889",
    "ThreadId": "40956",
    "Html": "Hi,<br>\r\n<br>\r\nI have written an article which details how to synchronise a bound DataGrid with a DataSet (i.e. DataTables), this might be of interested to you:<br>\r\n<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx<br>\r\n<br>\r\nThe reason why you are not seeing the datasource updated if you leave the cursor in the current row (which you are editing) is due to the transactional behaviour of the DataGrid. Changes are committed to a Row when it loses focus. However, this is only teh case if the item bound to the row implements IEditableObject, which is the case when you bind a DataTable (it is actually the DefaultView that is bound).<br>\r\n<br>\r\nAll of this is described in the above article.<br>\r\n<br>\r\nIf you have any problems - give me a shout.<br>\r\n<br>\r\nRegards,<br>\r\nColin E.<br>\r\n--<br>\r\nhttp://wpfadventures.wordpress.com/ - my WPF blog <br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-11-27T09:10:41.567-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136043",
    "ThreadId": "40956",
    "Html": "Colin<br>\r\n<br>\r\nthanks for your (updated) article link, very helpful indeed.<br>\r\n<br>\r\nBut my problem still remains:<br>\r\n<br>\r\nWhen I get it right, a row change implicitely &quot;updates&quot; my datasource.<br>\r\nSo if I want to react to changes without changing the row, I have to explicitly update my source.<br>\r\nTherefore I have a function called UpdateFocusedField that I send you in the initial post for this discussion.<br>\r\n<br>\r\nAs I found out in the meantime, this function works perfectly for grids that are bound to an observable collection of objects.<br>\r\nThere, I do not have to change the row to &quot;see&quot; changes.<br>\r\nMy problem is still&nbsp; my datagrid that is bound to a datatable. This datatable is completely generic, as it can have a variable number of columns (I'll paste the code below)<br>\r\nIn this grid, the source is only updated when I leave the changed row. Even a call of UpdateFocusedField does not change this behaviour. Only leaving the row helps.<br>\r\n<br>\r\nMany thanks for your support <br>\r\nRegards<br>\r\nKlaus<br>\r\n<br>\r\ngeneric datatable code:<br>\r\n&nbsp;&nbsp; Public Function GetUserGrpModulesTable() As DataTable<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim oUserGrpAction As New BEUserGroupActions<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim lUsed As Long = -1<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim oActionModule As New DS.BEModuleActions<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim oGrpList As ObservableCollection(Of BE.BEUserGroup) = oUserGrpAction.GetList()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim dt As New DataTable(&quot;UserGrpModules&quot;)<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Try<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dt.Columns.Add(&quot;module_name&quot;, Type.GetType(&quot;System.String&quot;))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Each oGrp In oUserGrpAction.GetList()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dt.Columns.Add(UCase(oGrp.UserGrpName), Type.GetType(&quot;System.Boolean&quot;))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim pk As DataColumn() = New DataColumn(0) {}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pk(0) = dt.Columns(&quot;module_name&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dt.PrimaryKey = pk<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dt.Columns(&quot;module_name&quot;).ReadOnly = True<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Each oModule In oActionModule.GetList<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Not oModule.PrivateYN Then<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim dr As DataRow<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dr = dt.NewRow()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dr(&quot;module_name&quot;) = oModule.ModuleName<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Each oGrp In oUserGrpAction.GetList()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Call GS.GetObject.CurrCompDB.ExecuteScalar(String.Format(&quot;SELECT COUNT(*) FROM BUSERGRPMODULES WHERE user_grp = '{0}' and module_name = '{1}'&quot;, oGrp.UserGrpName, oModule.ModuleName), lUsed)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dr(UCase(oGrp.UserGrpName)) = (lUsed &gt; 0)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dt.Rows.Add(dr)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Catch ex As Exception<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Try<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Call dt.AcceptChanges()<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Return dt<br>\r\n<br>\r\n&nbsp;&nbsp; End Function<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-28T02:48:28.28-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136051",
    "ThreadId": "40956",
    "Html": "Hi,<br>\r\n<br>\r\nThe key difference here is that when you bind to a Datatable, each row is bound to a DataRowView. This class implements IEditableObject, whereas I am assuming the objects in your collection do not?<br>\r\n<br>\r\nThis interface allows transactional editing. The DataGrid is implemented to invoked the IEditableObject.EndEdit when a row is committed (e.g. by leaving the row or hitting Enter).<br>\r\n<br>\r\nIf you want to 'see' the changes to your data you will have to invoke the IEditableObject.EndEdit method yourself as each cell looses focus.<br>\r\n<br>\r\nColin E.<br>\r\n--<br>\r\nhttp://wpfadventures.wordpress.com/ - my WPF blog.<br>\r\n",
    "PostedDate": "2008-11-28T03:52:54.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136053",
    "ThreadId": "40956",
    "Html": "\r\n<div dir=ltr align=left><span class=594215711-28112008>Colin</span></div>\r\n<div dir=ltr align=left><span class=594215711-28112008></span> </div>\r\n<div dir=ltr align=left><span class=594215711-28112008>I am \r\ncompletely confused:</span></div>\r\n<div dir=ltr align=left><span class=594215711-28112008>I have one \r\ndatagrid bound to an observable collection of my objects. Here I call \r\nUpdateFocusedField when loosing focus and &quot;see&quot; the changes without leaving the \r\nrow.</span></div>\r\n<div dir=ltr align=left><span class=594215711-28112008>A second \r\ndatagrid is bound to a datatable. Here I do not see changes before leaving the \r\nrow even if I call UpdateFocusedField when focus leaves</span></div>\r\n<div dir=ltr align=left><span class=594215711-28112008></span> </div>\r\n<div dir=ltr align=left><span class=594215711-28112008>From your \r\nanswer I would assume that the datatable grid should not be the problem, but the \r\ncollection grid!  But that is not the case!</span></div>\r\n<div dir=ltr align=left><span class=594215711-28112008></span><span class=594215711-28112008></span> </div>\r\n<div dir=ltr align=left><span class=594215711-28112008>Regards</span></div>\r\n<div dir=ltr align=left><span class=594215711-28112008>Klaus</span></div><br>\r\n<div class=OutlookMessageHeader lang=en-us dir=ltr align=left>\r\n<hr>\r\n<b>From:</b> ColinEber \r\n[mailto:notifications@codeplex.com] <br><b>Sent:</b> Freitag, 28. November 2008 \r\n12:53<br><b>To:</b> Klaus Wiesel<br><b>Subject:</b> Re: Datagrid dirty? \r\n[wpf:40956]<br><br></div>\r\n<div></div>\r\n<p>From: ColinEber</p>\r\n<div id=ThreadNotificationPostBody>Hi,<br><br>The key difference here is that \r\nwhen you bind to a Datatable, each row is bound to a DataRowView. This class \r\nimplements IEditableObject, whereas I am assuming the objects in your collection \r\ndo not?<br><br>This interface allows transactional editing. The DataGrid is \r\nimplemented to invoked the IEditableObject.EndEdit when a row is committed (e.g. \r\nby leaving the row or hitting Enter).<br><br>If you want to 'see' the changes to \r\nyour data you will have to invoke the IEditableObject.EndEdit method yourself as \r\neach cell looses focus.<br><br>Colin \r\nE.<br>--<br>http://wpfadventures.wordpress.com/ - my WPF blog.<br></div>\r\n",
    "PostedDate": "2008-11-28T04:05:23.867-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136058",
    "ThreadId": "40956",
    "Html": "Hi,<br>\r\n<br>\r\nIf you change your object in your collection into an IEditableObject as per the following:<br>\r\n<br>\r\nhttp://blogs.infragistics.com/blogs/joshs/archive/2008/05/08/creating-objects-that-support-edit-cancellation-via-ieditableobject.aspx<br>\r\n<br>\r\nYou will no doubt see the same problem there.<br>\r\n<br>\r\nIt is like using a database, if you start a transaction and make some changes, you will not see the results if you open another connection until the transaction is committed.<br>\r\nColin E. <br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-11-28T04:28:27.267-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136068",
    "ThreadId": "40956",
    "Html": "Colin<br>\r\n<br>\r\nthanks for your patience, but I still do not see the solution for my datatable bound grid.<br>\r\n<br>\r\nHow can I update my source without leaving the row? <br>\r\n<br>\r\nRegards<br>\r\nKlaus \r\n",
    "PostedDate": "2008-11-28T05:09:58.617-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136088",
    "ThreadId": "40956",
    "Html": "Hi,<br>\r\n<br>\r\nAs I mentioned, the solution lies with committing the changes to your row as you move from cell to cell. Try this example:<br>\r\n<br>\r\n&lt;Window.Resources&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;!-- create an instance of our DataProvider class --&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;ObjectDataProvider x:Key=&quot;CustomerDataProvider&quot; ObjectType=&quot;{x:Type local:CustomerDataProvider}&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;!-- define the method which is invoked to obtain our data --&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;ObjectDataProvider x:Key=&quot;Customers&quot; ObjectInstance=&quot;{StaticResource CustomerDataProvider}&quot; MethodName=&quot;GetCustomers&quot;/&gt;<br>\r\n&lt;/Window.Resources&gt;<br>\r\n<br>\r\n&lt;StackPanel DataContext=&quot;{Binding Source={StaticResource Customers}}&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;dg:DataGrid Height=&quot;200&quot;&nbsp; ItemsSource=&quot;{Binding}&quot; Name=&quot;dataGrid&quot; IsSynchronizedWithCurrentItem=&quot;true&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CellEditEnding=&quot;dataGrid_CellEditEnding&quot;&nbsp; CurrentCellChanged=&quot;dataGrid_CurrentCellChanged&quot;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;TextBox Text=&quot;{Binding Path=CompanyName}&quot;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&lt;/StackPanel&gt;<br>\r\n<br>\r\ni.e. a DataGrid - bound in code behind to a DataTable (Customers from the Northwind database). I also have a TextBox bound to the current item displaying the CompanyName.<br>\r\n<br>\r\nIn code-behind ... when the cell edit is ending, I record the current row:<br>\r\n<br>\r\nprivate DataRowView rowBeingEdited = null;<br>\r\n<br>\r\nprivate void dataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp; DataRowView rowView = e.Row.Item as DataRowView;<br>\r\n&nbsp;&nbsp;&nbsp; rowBeingEdited = rowView;<br>\r\n}<br>\r\n<br>\r\nThe key thing to realise is that this event is fired when editing is ENDING and not ENDED - this throws me all the time! i.e. the cell data has not been written to your bound object yet!!!<br>\r\n<br>\r\nWhen I move to another cell I commit changes then re-start editing:<br>\r\n<br>\r\nprivate void dataGrid_CurrentCellChanged(object sender, EventArgs e)<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp; if (rowBeingEdited != null)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowBeingEdited.EndEdit();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowBeingEdited.BeginEdit();<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n}<br>\r\n<br>\r\nWith this code in place you should see that the textbox which displays company name is updated before your move to the next row.<br>\r\n<br>\r\nRegards,<br>\r\nColin E.<br>\r\n--<br>\r\nhttp://wpfadventures.wordpress.com/ - my WPF blog<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx - WPF DataGrid Practical Examples <br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-11-28T06:34:09.563-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136113",
    "ThreadId": "40956",
    "Html": "\r\n<div dir=ltr align=left><span class=028031416-28112008>Colin</span></div>\r\n<div dir=ltr align=left><span class=028031416-28112008></span> </div>\r\n<div dir=ltr align=left><span class=028031416-28112008>we are \r\nclose:</span></div>\r\n<div dir=ltr align=left><span class=028031416-28112008></span> </div>\r\n<div dir=ltr align=left><span class=028031416-28112008>After \r\ninserting the two events I see changes after leaving a changed cell but \r\nstaying in the changed row.</span></div>\r\n<div dir=ltr align=left><span class=028031416-28112008>But when I \r\nonly click the checkbox and stay in the very cell, I have the same effect as \r\nbefore.</span></div>\r\n<div dir=ltr align=left><span class=028031416-28112008></span> </div>\r\n<div dir=ltr align=left><span class=028031416-28112008>Maybe this \r\nis due to the fact that I only have checkboxes in my \r\ndatagrid?</span></div>\r\n<div dir=ltr align=left><span class=028031416-28112008></span> </div>\r\n<div dir=ltr align=left><span class=028031416-28112008>Another \r\nthing that puzzles me: CellEditEnding is also called if I leave the checkbox \r\ncell without changing the checkbos &quot;isselected&quot;</span></div>\r\n<div dir=ltr align=left><span class=028031416-28112008></span> </div>\r\n<div dir=ltr align=left><span class=028031416-28112008>Regards</span></div>\r\n<div dir=ltr align=left><span class=028031416-28112008>Klaus</span></div><br>\r\n<div class=OutlookMessageHeader lang=en-us dir=ltr align=left>\r\n<hr>\r\n<b>From:</b> ColinEber \r\n[mailto:notifications@codeplex.com] <br><b>Sent:</b> Freitag, 28. November 2008 \r\n15:34<br><b>To:</b> Klaus Wiesel<br><b>Subject:</b> Re: Datagrid dirty? \r\n[wpf:40956]<br><br></div>\r\n<div></div>\r\n<p>From: ColinEber</p>\r\n<div id=ThreadNotificationPostBody>Hi,<br><br>As I mentioned, the solution lies \r\nwith committing the changes to your row as you move from cell to cell. Try this \r\nexample:<br><br>&lt;Window.Resources&gt;       \r\n <br>    &lt;!-- create an instance of our DataProvider \r\nclass --&gt;<br>    &lt;ObjectDataProvider \r\nx:Key=&quot;CustomerDataProvider&quot; ObjectType=&quot;{x:Type \r\nlocal:CustomerDataProvider}&quot;/&gt;<br>    &lt;!-- define the \r\nmethod which is invoked to obtain our data --&gt;<br>    \r\n&lt;ObjectDataProvider x:Key=&quot;Customers&quot; ObjectInstance=&quot;{StaticResource \r\nCustomerDataProvider}&quot; \r\nMethodName=&quot;GetCustomers&quot;/&gt;<br>&lt;/Window.Resources&gt;<br><br>&lt;StackPanel \r\nDataContext=&quot;{Binding Source={StaticResource \r\nCustomers}}&quot;&gt;       \r\n <br>    &lt;dg:DataGrid Height=&quot;200&quot;  \r\nItemsSource=&quot;{Binding}&quot; Name=&quot;dataGrid&quot; \r\nIsSynchronizedWithCurrentItem=&quot;true&quot;<br>              \r\nCellEditEnding=&quot;dataGrid_CellEditEnding&quot;  \r\nCurrentCellChanged=&quot;dataGrid_CurrentCellChanged&quot;/&gt;       \r\n <br>    &lt;TextBox Text=&quot;{Binding \r\nPath=CompanyName}&quot;/&gt;       \r\n <br>&lt;/StackPanel&gt;<br><br>i.e. a DataGrid - bound in code behind to a \r\nDataTable (Customers from the Northwind database). I also have a TextBox bound \r\nto the current item displaying the CompanyName.<br><br>In code-behind ... when \r\nthe cell edit is ending, I record the current row:<br><br>private DataRowView \r\nrowBeingEdited = null;<br><br>private void dataGrid_CellEditEnding(object \r\nsender, DataGridCellEditEndingEventArgs e)<br>{<br>    \r\nDataRowView rowView = e.Row.Item as DataRowView;<br>    \r\nrowBeingEdited = rowView;<br>}<br><br>The key thing to realise is that this \r\nevent is fired when editing is ENDING and not ENDED - this throws me all the \r\ntime! i.e. the cell data has not been written to your bound object \r\nyet!!!<br><br>When I move to another cell I commit changes then re-start \r\nediting:<br><br>private void dataGrid_CurrentCellChanged(object sender, \r\nEventArgs e)<br>{<br>    if (rowBeingEdited != \r\nnull)<br>    {<br>        \r\nrowBeingEdited.EndEdit();<br>        \r\nrowBeingEdited.BeginEdit();<br>    }<br>}<br><br>With this code \r\nin place you should see that the textbox which displays company name is updated \r\nbefore your move to the next row.<br><br>Regards,<br>Colin \r\nE.<br>--<br>http://wpfadventures.wordpress.com/ - my WPF \r\nblog<br>http://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx - WPF \r\nDataGrid Practical Examples <br><br><br><br><br><br></div>\r\n",
    "PostedDate": "2008-11-28T08:21:35.49-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "139721",
    "ThreadId": "40956",
    "Html": "Colin<br>\r\n<br>\r\nI am getting back to this issue because I want to know if there is an other way to solve this:<br>\r\n<br>\r\nLet me just explain my scenario:<br>\r\n<br>\r\nI have a number of usergroups and a number of modules.<br>\r\nEach user group can use any number of modules, so I'd like to present a matrix containing checkboxes in my datagrid.<br>\r\n<br>\r\nAs I do not know how many usergroups there are, and also the number of modules is not known, I decided to create a datatable on the fly and bind this to my datagrid.<br>\r\n<br>\r\nIs there any alternative over this? Is there a chance to create a class (or at least new properties of a predefined class) &quot;on the fly&quot;?<br>\r\n<br>\r\nRegards<br>\r\nKlaus \r\n",
    "PostedDate": "2008-12-11T08:32:00.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "139951",
    "ThreadId": "40956",
    "Html": "Could you perhaps use an array of bool values (to store the modules selections for each user group), and generate the XAML for the column specifications on the fly depending on how many modules there are?<br>\r\n",
    "PostedDate": "2008-12-11T23:36:10.207-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "149333",
    "ThreadId": "40956",
    "Html": "Hi<br>\r\n<br>\r\ncould you provide an example for this?<br>\r\n<br>\r\nRegards<br>\r\nKlaus \r\n",
    "PostedDate": "2009-01-21T09:28:49.643-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]