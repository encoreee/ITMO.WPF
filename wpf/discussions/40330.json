[
  {
    "Id": "133824",
    "ThreadId": "40330",
    "Html": "I need to bind the ItemsSource of  a DataGridComboBoxColumn to an ObservableCollection&lt;T&gt; (or potentially another list type) that will be populated at runtime using a LINQ query.  What is the XAML?  Below is one try that *doesn't* work.  <br>\r\n<br>\r\n    &lt;toolkit:DataGridComboBoxColumn Header=&quot;Customer02&quot; MinWidth=&quot;200&quot; <br>\r\n                    SelectedItemBinding=&quot;{Binding Path=Customer, Mode=TwoWay, <br>\r\n                    UpdateSourceTrigger=PropertyChanged}&quot; <br>\r\n     ItemsSource=&quot;{Binding Path=_customers}&quot;<br>\r\n                    Width=&quot;SizeToCells&quot;<br>\r\n                    CanUserSort=&quot;True&quot; &gt;<br>\r\n    &lt;/toolkit:DataGridComboBoxColumn&gt;<br>\r\n<br>\r\nNotes:<br>\r\n<br>\r\n1. The grid rows are Orders.<br>\r\n2. &quot;Customer&quot; is the property to which I want to bind the SelectedItem of the ComboBox. Customer is a related object, of type Customer.<br>\r\n3. &quot;_customers&quot; is the name of the ObservableCollection&lt;Customer&gt; in the UserControl's C# code.<br>\r\n<br>\r\nThanks!<br>\r\n",
    "PostedDate": "2008-11-19T19:00:11.283-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "133862",
    "ThreadId": "40330",
    "Html": "Hi,<br>\r\n<br>\r\nYou can only bind to dependency properties on dependency objects, or CLR properties. A field on your code-behind partial class is neither of these!<br>\r\n<br>\r\nThere are a few ways you could approach this, the most common are probably:<br>\r\n<br>\r\n1. Simple set the ItemsSource in the code behind, i.e. if you name your DataGridComboBoxColumn Name=&quot;MyComboColumn&quot;, you can simple do the following in your code-behind:<br>\r\n<br>\r\nMyComboColumn.ItemsSource=_customer;<br>\r\n<br>\r\nYou do not have to do everything in XAML!<br>\r\n<br>\r\n2. Use an ObjectDataProvider. You can find an example of this in a recent article I published on codeproject<br>\r\n<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx#dataset<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\nColin E. \r\n",
    "PostedDate": "2008-11-20T01:08:48.197-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "133977",
    "ThreadId": "40330",
    "Html": "<span style=\"font-size:13px\">\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'calibri','sans-serif'\">Thank you, Colin.<br>\r\n<br>\r\nThe DataGridComboBoxColumn doesn't seem to have a Name property (by that name or any other); but I am able to assign the ItemsSource in code behind using the column indexer<br>\r\n</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'courier new'\"><br>\r\n            DataGridComboBoxColumn dgCbCol = (DataGridComboBoxColumn)_ordersDataGrid.Columns[2];<br>\r\n            dgCbCol.ItemsSource = _customers;<br>\r\n</span><span style=\"font-family:'calibri','sans-serif'\"><br>\r\nThis is a lot better than nothing, but still somewhat regrettable.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"color:#365f91;font-family:'calibri','sans-serif'\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"color:#365f91;font-family:'calibri','sans-serif'\"><br>\r\n&gt;&gt; </span><span style=\"color:#365f91;font-family:'calibri','sans-serif'\">You can only bind to dependency properties on dependency objects, or CLR properties. A field on your code-behind partial class is neither of these!<br>\r\n<br>\r\n</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'calibri','sans-serif'\">Since OneWayToSource databinding <i>does</i> permit the source not to be a dependency property, I tried the following as a “what the heck”:</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'calibri','sans-serif'\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'courier new'\">     ItemsSource=&quot;{Binding Path=_customers, Mode=OneWayToSource}&quot;</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'calibri','sans-serif'\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'calibri','sans-serif'\">but it doesn’t seem to populate the list.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'calibri','sans-serif'\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"color:#365f91;font-family:'calibri','sans-serif'\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"color:#365f91;font-family:'calibri','sans-serif'\">&gt;&gt; 2. Use an ObjectDataProvider. You can find an example of this in a recent article I published on codeproject<br>\r\n<br>\r\n</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:'calibri','sans-serif'\">I’ll take a look at that!<br>\r\n</span></p>\r\n</span>\r\n",
    "PostedDate": "2008-11-20T11:04:14.783-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "134127",
    "ThreadId": "40330",
    "Html": "You can use x:Name attribute instead on Name property with the column and then use it in the code behind.\r\n",
    "PostedDate": "2008-11-20T19:17:17.623-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "134168",
    "ThreadId": "40330",
    "Html": "Hi,<br>\r\n<br>\r\nThanks VamseeP, good point. You can use x:Name, however some controls, but not all, also have a Name property which maps to the same thing.<br>\r\n<br>\r\nYes, OneWayToSource an be used to bind a CLR property to a dependency property, however this will not work for two reasons:<br>\r\n<br>\r\n1. OneWayToSource, where your CLR property is the source means that changes are mapped from your dependency property to your CLR property, not the other way around.<br>\r\n<br>\r\n2. With your binding above, you speify a path, so that the Binding knows which property to use to obtain the data, however think for a minute about where the Binding obtains the object that this is a property of? Your bindings typically bind to a Path on your current DataContext. For example in a form you might make your Window DataContext an instance of a Person object, then bind TextBoxes to the Age and Name properties of this object. Your current DataContext does not default to an instance of your code-behidn class, it defaults to nothing!<br>\r\n<br>\r\nIf you really want to bind to the customers object you must do two things:<br>\r\n<br>\r\n1. In your code behind do the following:<br>\r\n<br>\r\nthis.DataContext=this;<br>\r\n<br>\r\nThis ensures that the context for bindings is the Window class itself.<br>\r\n<br>\r\n2. Make _customers a dependency property.<br>\r\n<br>\r\nPersonally, I would not bother ;-)<br>\r\n<br>\r\nColin E.<br>\r\n<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-21T00:49:12.317-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "134316",
    "ThreadId": "40330",
    "Html": "Thanks, VamseeP, that works great!  Can you explain to me why that property requires the prefix for the XAML namespace, whereas on most other elements it does not?\r\n",
    "PostedDate": "2008-11-21T10:25:35.16-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "134320",
    "ThreadId": "40330",
    "Html": "&gt;&gt; OneWayToSource, where your CLR property is the source means that changes are mapped from your dependency property to your CLR property, not the other way around.<br>\r\n<br>\r\nHey, I knew that!  8-)<br>\r\n<br>\r\n&gt;&gt; If you really want to bind to the customers object you must do two things: ... Personally, I would not bother ;-)<br>\r\n<br>\r\nMe neither. I'm perfectly fine with setting the ItemsSource in my C# code, since that's where I populate the source list anyway; and being able to refer to the DataGridComboBoxColumn by name (thanks to the &quot;x:&quot; prefix) solves the remaining problem with that.<br>\r\n<br>\r\nI appreciate your help!<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-21T10:37:57.11-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "134322",
    "ThreadId": "40330",
    "Html": "Most of the other items are derived from FrameworkElement class which has a Name property in it where as DataGridColumn is directly derived from DependencyObject. Hence name property doesnt work with it. But x:Name attribute works for most of the items because it is a XAML thing.\r\n",
    "PostedDate": "2008-11-21T10:57:45.927-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442242",
    "ThreadId": "40330",
    "Html": "<p>Can you give an example of how to use x:Name programatically instead of the column index in:</p>\r\n<p>DataGridComboBoxColumn dgCbCol = (DataGridComboBoxColumn)_ordersDataGrid.Columns[2];</p>\r\n<p>dgCbCol.ItemsSource = _customers;</p>",
    "PostedDate": "2010-05-12T13:16:55.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1254643",
    "ThreadId": "40330",
    "Html": "Hi,<br />\n<br />\nPlease send me the XAML and C# source code. I am trying to attach datatable to datagrid combobox column and bind object to datagrid.<br />\n",
    "PostedDate": "2014-06-09T22:49:39.293-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]