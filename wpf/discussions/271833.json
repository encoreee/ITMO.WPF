[
  {
    "Id": "668816",
    "ThreadId": "271833",
    "Html": "\r\n<p>The users are not able to enter ALT &#43; code characters (e.g. ALT&#43;0176 for the degree symbol) in textboxes anymore when these are placed on a WPF Ribbon window.</p>\r\n<p>I dived in the source code and quickly found that the problem is caused by the KeyTipService. Please replace the OnPreviewTextInput and OnKeyTipPartialMatch in KeyTipService.cs&nbsp;with these ones, this will allow &ldquo;alt &#43; code characters&ldquo; again\r\n just as in Microsoft Word.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnPreviewTextInput(TextCompositionEventArgs textArgs)\r\n        {\r\n            <span style=\"color:blue\">string</span> text = textArgs.Text;\r\n            <span style=\"color:blue\">if</span> (<span style=\"color:blue\">string</span>.IsNullOrEmpty(text))\r\n            {\r\n                text = textArgs.SystemText;\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (<span style=\"color:blue\">string</span>.IsNullOrEmpty(text))\r\n            {\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n\r\n \r\n\r\n            <span style=\"color:blue\">if</span> (text == <span style=\"color:#a31515\">&quot; &quot;</span>)\r\n            {\r\n                <span style=\"color:green\">// Do nothing. </span>\r\n            }\r\n            <span style=\"color:blue\">else</span> \r\n            {\r\n                <span style=\"color:blue\">if</span> (State == KeyTipState.Pending)\r\n                {\r\n                    ShowKeyTips();\r\n                }\r\n \r\n                <span style=\"color:blue\">if</span> (_currentActiveKeyTipElements.Count &gt; 0)\r\n                {\r\n                    <span style=\"color:blue\">if</span> (_probableModeEnterKey != Key.None &amp;&amp;\r\n                        _modeEnterKey == Key.None)\r\n                    {\r\n                        <span style=\"color:green\">// When text is pressed, probableModeEnterKey becomes </span>\r\n                        <span style=\"color:green\">// modeEnterKey. KeyTips are not dismissed on up of</span>\r\n                        <span style=\"color:green\">// modeEnterKey for once. This is useful when multiple</span>\r\n                        <span style=\"color:green\">// text is pressed with alt pressed.</span>\r\n                        _modeEnterKey = _probableModeEnterKey;\r\n                        _probableModeEnterKey = Key.None;\r\n                    }\r\n\r\n                    text = _prefixText &#43; text;\r\n                    <span style=\"color:green\">//CHANGE 1: dont set args.Handled = true;</span>\r\n\r\n                    DependencyObject exactMatchElement = <span style=\"color:blue\">null</span>;\r\n                    List&lt;DependencyObject&gt; activeKeyTipElements = FindKeyTipMatches(text, <span style=\"color:blue\">out</span> exactMatchElement);\r\n\r\n                    <span style=\"color:blue\">if</span> (exactMatchElement != <span style=\"color:blue\">null</span>)\r\n                    {\r\n                        OnKeyTipExactMatch(exactMatchElement);\r\n                        <span style=\"color:green\">// CHANGE 2: set args.Handled = true (found match)</span>\r\n                        textArgs.Handled = <span style=\"color:blue\">true</span>;\r\n                    }\r\n                    <span style=\"color:blue\">else</span>\r\n                    {\r\n                        <span style=\"color:blue\">bool</span> cancel;\r\n                        OnKeyTipPartialMatch(activeKeyTipElements, text, <span style=\"color:blue\">out</span> cancel);\r\n                       <span style=\"color:green\">//CHANGE 3: only set args.handled when a partial match was found</span>\r\n                        textArgs.Handled = textArgs.Handled || !cancel;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n \r\n        <span style=\"color:green\">//CHANGE 4: change signature</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnKeyTipPartialMatch(List&lt;DependencyObject&gt; activeKeyTipElements, <span style=\"color:blue\">string</span> text, <span style=\"color:blue\">out</span> <span style=\"color:blue\">bool</span> cancel)\r\n        {\r\n            <span style=\"color:blue\">if</span> (activeKeyTipElements == <span style=\"color:blue\">null</span> || \r\n                activeKeyTipElements.Count == 0)\r\n            {\r\n                <span style=\"color:green\">// Beep when there are no matches.</span>\r\n                RibbonHelper.Beep();\r\n \r\n                <span style=\"color:green\">// CHANGE 5: report back to calling method that there are no matches found</span>\r\n                cancel = <span style=\"color:blue\">true</span>;\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n \r\n            <span style=\"color:blue\">int</span> currentActiveCount = _currentActiveKeyTipElements.Count;\r\n            <span style=\"color:blue\">int</span> newActiveCount = activeKeyTipElements.Count;\r\n            <span style=\"color:blue\">int</span> newActiveElementIndex = 0;\r\n            DependencyObject newActiveElement = activeKeyTipElements[newActiveElementIndex&#43;&#43;];\r\n \r\n            <span style=\"color:green\">// Hide keytips for all the elements which do not</span>\r\n            <span style=\"color:green\">// match with the new prefix.</span>\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; currentActiveCount; i&#43;&#43;)\r\n            {\r\n                DependencyObject currentActiveElement = _currentActiveKeyTipElements[i];\r\n                <span style=\"color:blue\">if</span> (currentActiveElement == newActiveElement)\r\n                {\r\n                    <span style=\"color:blue\">if</span> (newActiveElementIndex &lt; newActiveCount)\r\n                    {\r\n                        newActiveElement = activeKeyTipElements[newActiveElementIndex&#43;&#43;];\r\n                    }\r\n                    <span style=\"color:blue\">else</span>\r\n                    {\r\n                        newActiveElement = <span style=\"color:blue\">null</span>;\r\n                    }\r\n                }\r\n                <span style=\"color:blue\">else</span>\r\n                {\r\n                    HideKeyTipForElement(currentActiveElement);\r\n                }\r\n            }\r\n            _currentActiveKeyTipElements = activeKeyTipElements;\r\n            _prefixText = text;\r\n\r\n            <span style=\"color:green\">//CHANGE 6</span>\r\n            cancel = <span style=\"color:blue\">false</span>;\r\n        }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-09-07T14:47:01.467-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]