[
  {
    "Id": "180327",
    "ThreadId": "53573",
    "Html": "<p>I created an accordian type control in Silverlight and am trying to port the control over to WPF.  The Expand state never seems to fire.</p>\r\n<p>The nuts and bolts of it are I have an Exander Control with a style that has a Visual State Manager on it.  I'm using Expersion Blend 2 with SP 1, Silverlight 2.0.40115 and the WPF Toolkit from March.</p>\r\n<p>the expander control has a style on it that uses a static resource:<span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;</span><span style=\"font-size:x-small;color:#a31515\">controls</span><span style=\"font-size:x-small;color:#0000ff\">:</span><span style=\"font-size:x-small;color:#a31515\">Expander</span><span style=\"font-size:x-small;color:#ff0000\"> Grid.Row</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;1&quot;</span><span style=\"font-size:x-small;color:#ff0000\"> ExpandDirection</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;Down&quot;</span><span style=\"font-size:x-small;color:#ff0000\"> Header</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;Search&quot;</span><span style=\"font-size:x-small;color:#000000\"> </span><span style=\"font-size:x-small;color:#ff0000\">Style</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;{</span><span style=\"font-size:x-small;color:#a31515\">StaticResource</span><span style=\"font-size:x-small;color:#ff0000\"> ExpanderNoButtonStyle</span><span style=\"font-size:x-small;color:#0000ff\">}&quot;</span><span style=\"font-size:x-small;color:#ff0000\"> Grid.ColumnSpan</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;2&quot;</span><span style=\"font-size:x-small;color:#000000\"> </span><span style=\"font-size:x-small;color:#ff0000\">IsEnabled</span></strong><strong><span style=\"font-size:x-small;color:#0000ff\">=&quot;True&quot; &gt;<br>\r\n</span><span style=\"font-size:x-small;color:#0000ff\">&lt;</span><span style=\"font-size:x-small;color:#a31515\">Button</span><span style=\"font-size:x-small;color:#ff0000\"> Content</span></strong><span style=\"font-size:x-small;color:#0000ff\"><strong>=&quot;&amp;lt;Expanded Content&amp;gt;&quot;/&gt;<br>\r\n<br>\r\nwhich ultimately should fire this:</strong><span style=\"font-size:13px;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;</span><span style=\"font-size:x-small;color:#a31515\">vsm</span><span style=\"font-size:x-small;color:#0000ff\">:</span><span style=\"font-size:x-small;color:#a31515\">VisualState</span><span style=\"font-size:x-small;color:#ff0000\"> x</span><span style=\"font-size:x-small;color:#0000ff\">:</span><span style=\"font-size:x-small;color:#ff0000\">Name</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;Expanded&quot;&gt;<br>\r\n</span></strong><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;</span><span style=\"font-size:x-small;color:#a31515\">Storyboard</span><span style=\"font-size:x-small;color:#0000ff\">&gt;<br>\r\n</span></strong><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;</span><span style=\"font-size:x-small;color:#a31515\">ObjectAnimationUsingKeyFrames</span><span style=\"font-size:x-small;color:#ff0000\"> Duration</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;0&quot;</span><span style=\"font-size:x-small;color:#ff0000\"> Storyboard.TargetName</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;ExpandSite&quot;</span><span style=\"font-size:x-small;color:#ff0000\"> Storyboard.TargetProperty</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;Visibility&quot;&gt;</span></strong></p>\r\n<span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">\r\n<p><strong> </strong></p>\r\n</span>\r\n<p><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;</span><span style=\"font-size:x-small;color:#a31515\">DiscreteObjectKeyFrame</span><span style=\"font-size:x-small;color:#ff0000\"> KeyTime</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;0&quot;</span><span style=\"font-size:x-small;color:#ff0000\"> Value</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;Visible&quot;/&gt;</span></strong><span style=\"font-size:13px;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></p>\r\n</span>\r\n<p><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;/</span><span style=\"font-size:x-small;color:#a31515\">ObjectAnimationUsingKeyFrames</span><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></strong><span style=\"font-size:13px;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;</span><span style=\"font-size:x-small;color:#a31515\">ObjectAnimationUsingKeyFrames</span><span style=\"font-size:x-small;color:#ff0000\"> Duration</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;0&quot;</span><span style=\"font-size:x-small;color:#ff0000\"> Storyboard.TargetName</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;ExpanderButton&quot;</span><span style=\"font-size:x-small;color:#ff0000\"> Storyboard.TargetProperty</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;Foreground&quot;&gt;</span></strong><span style=\"font-size:13px;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;</span><span style=\"font-size:x-small;color:#a31515\">DiscreteObjectKeyFrame</span><span style=\"font-size:x-small;color:#ff0000\"> KeyTime</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;0&quot;</span><span style=\"font-size:x-small;color:#ff0000\"> Value</span><span style=\"font-size:x-small;color:#0000ff\">=&quot;White&quot;/&gt;</span></strong><span style=\"font-size:13px;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;/</span><span style=\"font-size:x-small;color:#a31515\">ObjectAnimationUsingKeyFrames</span><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></strong><span style=\"font-size:13px;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;/</span><span style=\"font-size:x-small;color:#a31515\">Storyboard</span><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></strong><span style=\"font-size:13px;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;/</span><span style=\"font-size:x-small;color:#a31515\">vsm</span><span style=\"font-size:x-small;color:#0000ff\">:</span><span style=\"font-size:x-small;color:#a31515\">VisualState</span></strong><span style=\"font-size:x-small;color:#0000ff\"><strong>&gt;</strong><span style=\"font-size:13px;color:#0000ff\"><strong> </strong></span></span><span style=\"font-size:13px;color:#0000ff\">\r\n<p>&nbsp;</p>\r\n</span></p>\r\n</span></p>\r\n<p>&nbsp;</p>\r\n<p><strong><span style=\"font-size:x-small;color:#0000ff\">&lt;/</span><span style=\"font-size:x-small;color:#a31515\">controls</span><span style=\"font-size:x-small;color:#0000ff\">:</span><span style=\"font-size:x-small;color:#a31515\">Expander</span><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></strong></p>\r\n</span></p>\r\n",
    "PostedDate": "2009-04-16T15:04:50.32-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "181782",
    "ThreadId": "53573",
    "Html": "The WPFToolkit doesn't actual have the ExpanderBehavior there to glue the GoToState calls together.  This is in dev10 but obviously that is going to be awhile from now.  Here is the implementation of the ExpanderBehavior:<br>\r\n<br>\r\n<p>    /// &lt;summary&gt;<br>\r\n    ///     Provides VisualStateManager behavior for Expander controls.<br>\r\n    /// &lt;/summary&gt;<br>\r\n    public class ExpanderBehavior : ControlBehavior<br>\r\n    {<br>\r\n        /// &lt;summary&gt;<br>\r\n        ///     Attaches to property changes and events.<br>\r\n        /// &lt;/summary&gt;<br>\r\n        /// &lt;param name=&quot;control&quot;&gt;An instance of the control.&lt;/param&gt;<br>\r\n        protected override void OnAttach(Control control)<br>\r\n        {<br>\r\n            base.OnAttach(control);</p>\r\n<p>            Expander expander = (Expander)control;<br>\r\n            Type targetType = typeof(Expander);<br>\r\n            EventHandler handler = delegate { UpdateState(expander, true); };</p>\r\n<p>            AddValueChanged(Expander.IsMouseOverProperty, targetType, expander, UpdateStateHandler);<br>\r\n            AddValueChanged(Expander.IsEnabledProperty, targetType, expander, UpdateStateHandler);<br>\r\n            AddValueChanged(Expander.IsExpandedProperty, targetType, expander, UpdateStateHandler);<br>\r\n            AddValueChanged(Expander.ExpandDirectionProperty, targetType, expander, UpdateStateHandler);<br>\r\n        }</p>\r\n<p>        /// &lt;summary&gt;<br>\r\n        /// Detaches property changes and events.<br>\r\n        /// &lt;/summary&gt;<br>\r\n        /// &lt;param name=&quot;control&quot;&gt;The control&lt;/param&gt;<br>\r\n        protected override void OnDetach(Control control)<br>\r\n        {<br>\r\n            base.OnDetach(control);</p>\r\n<p>            Expander expander = (Expander)control;<br>\r\n            Type targetType = typeof(Expander);<br>\r\n            EventHandler handler = delegate { UpdateState(expander, true); };</p>\r\n<p>            RemoveValueChanged(Expander.IsMouseOverProperty, targetType, expander, UpdateStateHandler);<br>\r\n            RemoveValueChanged(Expander.IsEnabledProperty, targetType, expander, UpdateStateHandler);<br>\r\n            RemoveValueChanged(Expander.IsExpandedProperty, targetType, expander, UpdateStateHandler);<br>\r\n            RemoveValueChanged(Expander.ExpandDirectionProperty, targetType, expander, UpdateStateHandler);<br>\r\n        }</p>\r\n<p>        /// &lt;summary&gt;<br>\r\n        ///     Called to update the control's visual state.<br>\r\n        /// &lt;/summary&gt;<br>\r\n        /// &lt;param name=&quot;control&quot;&gt;The instance of the control being updated.&lt;/param&gt;<br>\r\n        /// &lt;param name=&quot;useTransitions&quot;&gt;Whether to use transitions or not.&lt;/param&gt;<br>\r\n        protected override void UpdateState(Control control, bool useTransitions)<br>\r\n        {<br>\r\n            Expander expander = (Expander)control;</p>\r\n<p>            if (!expander.IsEnabled)<br>\r\n            {<br>\r\n                VisualStateManager.GoToState(expander, &quot;Disabled&quot;, useTransitions);<br>\r\n            }<br>\r\n            else if (expander.IsMouseOver)<br>\r\n            {<br>\r\n                VisualStateManager.GoToState(expander, &quot;MouseOver&quot;, useTransitions);<br>\r\n            }<br>\r\n            else<br>\r\n            {<br>\r\n                VisualStateManager.GoToState(expander, &quot;Normal&quot;, useTransitions);<br>\r\n            }</p>\r\n<p>            if (expander.IsExpanded)<br>\r\n            {<br>\r\n                VisualStateManager.GoToState(expander, &quot;Expanded&quot;, useTransitions);<br>\r\n            }<br>\r\n            else<br>\r\n            {<br>\r\n                VisualStateManager.GoToState(expander, &quot;Collapsed&quot;, useTransitions);<br>\r\n            }</p>\r\n<p>            switch (expander.ExpandDirection)<br>\r\n            {<br>\r\n                case ExpandDirection.Down:<br>\r\n                    VisualStateManager.GoToState(expander, &quot;ExpandDown&quot;, useTransitions);<br>\r\n                    break;</p>\r\n<p>                case ExpandDirection.Up:<br>\r\n                    VisualStateManager.GoToState(expander, &quot;ExpandUp&quot;, useTransitions);<br>\r\n                    break;</p>\r\n<p>                case ExpandDirection.Left:<br>\r\n                    VisualStateManager.GoToState(expander, &quot;ExpandLeft&quot;, useTransitions);<br>\r\n                    break;</p>\r\n<p>                default:<br>\r\n                    VisualStateManager.GoToState(expander, &quot;ExpandRight&quot;, useTransitions);<br>\r\n                    break;<br>\r\n            }</p>\r\n<p>            base.UpdateState(control, useTransitions);<br>\r\n        }<br>\r\n    }</p>\r\nTo use it you need to add the attached behavior to the Expander style:<br>\r\n<br>\r\n&lt;local:ExpanderBehavior x:Key=&quot;ExpanderBehavior&quot; /&gt;<br>\r\n<br>\r\n&lt;Style TargetType=&quot;{x:Type Expander}&quot;&gt;<br>\r\n            &lt;Setter Property=&quot;toolkit:VisualStateBehavior.VisualStateBehavior&quot; Value=&quot;{StaticResource ExpanderBehavior}&quot; /&gt;<br>\r\n&lt;/Style&gt;<br>\r\n<br>\r\n",
    "PostedDate": "2009-04-21T07:28:34.6-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]