[
  {
    "Id": "205449",
    "ThreadId": "60656",
    "Html": "<p>I am trying to make my own virtual list class that will request a page worth of records from the server at a time.</p>\r\n<p>Part of the solution is creating my own ListViewCollection descendant. It overrides the SortDescriptions property so I can perform the sort on the server side, rather than pull everything from the server and sort it on the client-side.</p>\r\n<p>I've managed scrolling and sorting. Now I need the ability to add new rows.</p>\r\n<p>The first attempt implemented IList.Add, but I observed that it was called before the row was fully commited. Plus I could not get it working properly (it jumped all over the place).</p>\r\n<p>This is why I started looking at the IEditableCollectionView. It looks like it allows me to instantiate an instance of a new item without adding it to the list itself. Until CommitNew() of course.</p>\r\n<p>But. It does not work. <strong>The empty row at the bottom of the grid is now missing.</strong></p>\r\n<p>A quick peek at the datagrid's source suggests that <strong>CollectionView.NewItemPlaceHolder</strong> is <strong>null</strong> and AFAICT this is needed. I don't see how I can override it?</p>\r\n<p>Unfortunately I do not have access to the source to any of the CollectionView classes. They are unavailable from MS' symbol servers.</p>",
    "PostedDate": "2009-06-25T07:28:37.743-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "209870",
    "ThreadId": "60656",
    "Html": "<p>My hunch about CollectionView.NewItemPlaceHolder was wrong.</p>\r\n<p>ListCollectionView seem to be depending on implementing IEditableCollectionView itself.</p>\r\n<p>In the following class, IsAddingNew, IsEditingItem, CanAddNew, CanRemove are called. The other stubs are not touched. The result is an empty datagrid. (In my production code I have a meaningful IEditableCollectionView implementation) Removing the IEditableCollectionView interface implementation will return the grid to standard behaviour (list one item as per my example below).</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> RMDataTable: ListCollectionView, IEditableCollectionView\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> RMDataTable(IList AList) : <span style=\"color:Blue\">base</span>(AList) { }\r\n\r\n        <span style=\"color:Blue\">#region</span> IEditableCollectionView Members\r\n\r\n        <span style=\"color:Blue\">object</span> IEditableCollectionView.AddNew()\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:Blue\">bool</span> IEditableCollectionView.CanAddNew\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>; }\r\n        }\r\n\r\n        <span style=\"color:Blue\">bool</span> IEditableCollectionView.CanCancelEdit\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>; }\r\n        }\r\n\r\n        <span style=\"color:Blue\">bool</span> IEditableCollectionView.CanRemove\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>; }\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> IEditableCollectionView.CancelEdit()\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> IEditableCollectionView.CancelNew()\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> IEditableCollectionView.CommitEdit()\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> IEditableCollectionView.CommitNew()\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:Blue\">object</span> IEditableCollectionView.CurrentAddItem\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> NotImplementedException(); }\r\n        }\r\n\r\n        <span style=\"color:Blue\">object</span> IEditableCollectionView.CurrentEditItem\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> NotImplementedException(); }\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> IEditableCollectionView.EditItem(<span style=\"color:Blue\">object</span> item)\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:Blue\">bool</span> IEditableCollectionView.IsAddingNew\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>; }\r\n        }\r\n\r\n        <span style=\"color:Blue\">bool</span> IEditableCollectionView.IsEditingItem\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>; }\r\n        }\r\n\r\n        NewItemPlaceholderPosition IEditableCollectionView.NewItemPlaceholderPosition\r\n        {\r\n            <span style=\"color:Blue\">get</span>;\r\n            <span style=\"color:Blue\">set</span>;            \r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> IEditableCollectionView.Remove(<span style=\"color:Blue\">object</span> item)\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> IEditableCollectionView.RemoveAt(<span style=\"color:Blue\">int</span> index)\r\n        {\r\n            <span style=\"color:Blue\">throw</span> <span style=\"color:Blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:Blue\">#endregion</span>\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>To test:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>            <span style=\"color:Blue\">var</span> mylist = <span style=\"color:Blue\">new</span> List&lt;RMDataRow&gt;();\r\n            dataGrid1.ItemsSource = <span style=\"color:Blue\">new</span> RMDataTable(mylist);\r\n            mylist.Add(<span style=\"color:Blue\">new</span> RMDataRow() { fubar = <span style=\"color:#A31515\">&quot;first&quot;</span>, y = 5 });\r\n</pre>\r\n</div>\r\n<p>&nbsp;define RMDataRow with something like this:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> RMDataRow: INotifyPropertyChanged\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">string</span> Ffubar;\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">int</span> Fy;\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> fubar \r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> Ffubar; }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                Ffubar = value;\r\n                <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>) PropertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> PropertyChangedEventArgs(<span style=\"color:#A31515\">&quot;fubar&quot;</span>));\r\n            }\r\n        }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> y\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> Fy; }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                Fy = value;\r\n                <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>) PropertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> PropertyChangedEventArgs(<span style=\"color:#A31515\">&quot;y&quot;</span>));\r\n            }\r\n        }\r\n        \r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n    }\r\n</pre>\r\n</div>\r\n<p>What I would like to know, is how I can take control over the new record transaction when inheriting from ListCollectionView? Another posting in this forum states that I have to inherit from CollectionView rather than implement the ICollectionView interface, so I feel a bit trapped now.</p>",
    "PostedDate": "2009-07-08T04:32:07.287-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216369",
    "ThreadId": "60656",
    "Html": "<p>I am obviously attacking this at the wrong end.</p>\r\n<p><a href=\"http://blogs.msdn.com/vinsibal/archive/2008/05/20/wpf-3-5-sp1-feature-ieditablecollectionview.aspx\">http://blogs.msdn.com/vinsibal/archive/2008/05/20/wpf-3-5-sp1-feature-ieditablecollectionview.aspx</a> shows that ListCollectionView's IEditableCollectionView implementation depends on the items implementing the IEditableObject interface.</p>\r\n<p>Fine, that takes good care of my editing needs.</p>\r\n<p>But what goes on with ListCollectionView's AddNew() and CommitNew() implementation? Can my list implement an interface that will enable it to detect commits?</p>",
    "PostedDate": "2009-07-27T07:00:01.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]