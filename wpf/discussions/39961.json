[
  {
    "Id": "132632",
    "ThreadId": "39961",
    "Html": "To start, <br>\r\nI would like to thank you for the development effort that produced WPF DataGrid.<br>\r\n<br>\r\nHere I would like to present a scenario that I cannot seem to figure out:<br>\r\n<br>\r\nI created a class called StockModel has a property of type ObservableCollection&lt;StockQuotes&gt; which is bound to the DataGrid.  <br>\r\n<br>\r\n&lt;ObjectDataProvider x:Key=&quot;StockDataSource&quot;<br>\r\n       ObjectType=&quot;{x:Type local:StockModel}&quot;/&gt;<br>\r\n<br>\r\n &lt;dg:DataGrid x:Name=&quot;grdStocks&quot; Grid.Column=&quot;0&quot; Grid.Row=&quot;1&quot; ItemsSource=&quot;{Binding Source={StaticResource StockDataSource},Path=StockList}&quot; AutoGenerateColumns=&quot;False&quot; Margin=&quot;2&quot; <br>\r\n                     GridLinesVisibility=&quot;Horizontal&quot;<br>\r\n                     RowHeaderWidth=&quot;0&quot;<br>\r\n                     SelectionMode=&quot;Extended&quot;<br>\r\n                     RowEditEnding=&quot;DataGrid_RowEditEnding&quot; SelectionUnit=&quot;FullRow&quot;<br>\r\n                     RowBackground=&quot;White&quot; <br>\r\n                     Background=&quot;Transparent&quot;<br>\r\n                     AlternatingRowBackground=&quot;LightGray&quot;<br>\r\n                     AlternationCount=&quot;2&quot;<br>\r\n                     IsSynchronizedWithCurrentItem=&quot;True&quot;<br>\r\n                     CellStyle=&quot;{StaticResource defaultCellStyle}&quot;<br>\r\n                     RowStyle=&quot;{StaticResource defaultRowStyle}&quot;<br>\r\n                     CanUserAddRows=&quot;False&quot;&gt;<br>\r\n<br>\r\nStockModel class implements INotifyPropertyChanged.<br>\r\n<br>\r\nStockQuotes is the Linq-to-SQL class that I created.<br>\r\n<br>\r\nTo Delete I remove the StockQuote item from database using DataContext of the StockQuotes Linq-to-SQL class.<br>\r\nThen clear the ObservableCollection&lt;StockQuotes&gt; and repopulate it with data.<br>\r\n<br>\r\nThe Grid is updated, but looses selection.<br>\r\n<br>\r\nThere are two problems that I have.<br>\r\n<br>\r\n1. Consolidation of remove/add operations.<br>\r\nThere sholud be one place where I can remove item from the grid and database. <br>\r\nCurrently I either have to call EditableCollection's Remove(), to remove item from the grid and then call DataContext of Linq-to-SQL class to perform database operation.<br>\r\nIn this case Selection is not lost, but I have to make two calls.<br>\r\n<br>\r\nTo Add item, for lack of any other way, I could add directly to the Grid's underlying model and then call DataContext of Linq-to-SQL class to perform database operation.<br>\r\nIn this case Selection is kept at the previously selected row. Note: I don't use in-grid new item add feature and have my own dialog instead.<br>\r\n<br>\r\nIn any case I would be forced to make two calls one to the perform an operation on the grid <br>\r\nand one to perform an operation on the database. To avoid this duplication, I perform operation on the database and then clear collection and repopulate it.<br>\r\nThis brings me to the second problem.<br>\r\n<br>\r\n2. How do I keep the selection on the first row of the Grid.<br>\r\nSomething like grdStocks.Items[0].IsSelected = True;<br>\r\nSo far I was not able to figure it out.<br>\r\n<br>\r\nAll help would be greatly appreciated.<br>\r\n<br>\r\nRegards,<br>\r\n<br>\r\nBoris\r\n",
    "PostedDate": "2008-11-14T08:17:43.647-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132642",
    "ThreadId": "39961",
    "Html": "Hi Boris,<br>\r\n<br>\r\nTo set the index of the selected item just use the Datagrid.SelectedItem property.<br>\r\n<br>\r\nRegarding remove/add operations, if the DataGrid is bound to an ObservableCollection, you should simply be able to add ./ remove items and the DataGrid will update accordingly. I'm afraid I am no expert with Linq-to-SQL, however I have created a few examples with DataSets:<br>\r\n<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx<br>\r\n<br>\r\nMaybe I should work out how to do the same with Linq-to-SQL and extends these examples?<br>\r\n<br>\r\nColin E. <br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-11-14T08:46:26.217-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132703",
    "ThreadId": "39961",
    "Html": "Colin,<br>\r\n<br>\r\nI can show how Remove/Add performed on the DataGrid model run into heaps of problems when trying to reconsile with DataContext of a Linq-to-SQL.<br>\r\n <br>\r\nFirst lets forget for a second that there is no decent way to add item using EditableCollection. So to make it work I have to do something like this:<br>\r\nprivate StockModel model;<br>\r\n System.Windows.Data.ObjectDataProvider dp = (System.Windows.Data.ObjectDataProvider)FindResource(&quot;StockDataSource&quot;);<br>\r\n model = (StockModel)dp.Data; <br>\r\nmodel contains the following:  <br>\r\nprivate ObservableCollection&lt;StockQuotes&gt; stockList = new ObservableCollection&lt;StockQuotes&gt;(); <br>\r\n        public ObservableCollection&lt;StockQuotes&gt; StockList <br>\r\n        {<br>\r\n            get { return stockList; }<br>\r\n        }<br>\r\n<br>\r\nSo to add I can do:     model.Add(item);<br>\r\n<br>\r\nNow ObservableCollection&lt;StockQuotes&gt; will notify the DataGrid of changes made to the collection.<br>\r\n<br>\r\nHowever when I try to do a subsequent delete from the database, DataContext doesn't know about this item and will throw an Exception.<br>\r\n<br>\r\nThe challenge as I see it would be keeping the collection and database in sync.<br>\r\n<br>\r\n<br>\r\nSecond problem is adding of the item to the DataGrid. How can I add new item to the collection of items?<br>\r\n<br>\r\nRegards,<br>\r\n<br>\r\nBoris<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-14T12:05:47.123-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]