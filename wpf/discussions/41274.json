[
  {
    "Id": "136940",
    "ThreadId": "41274",
    "Html": "When a DataGrid's context menu is opened and the user selects one of the menu items, and that menu item's Click event fires, how do I find out which row in the DataGrid the mouse cursor was over when the context menu was opened?<br>\r\n<br>\r\nHandling the ContextMenuOpening and ContextMenuClosing events and manually figuring out from the pointer X and Y coordinates which row the pointer is over feels like a lot of work for something that should be a trivial task.<br>\r\n",
    "PostedDate": "2008-12-02T06:50:25.85-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136975",
    "ThreadId": "41274",
    "Html": "Hi,<br>\r\n<br>\r\nI have not tried specifically in the case of context menu opening ... but have a feeling it will be very similar to when you handle the mouse events. In other words, it is not obvious or straightforward!<br>\r\n<br>\r\nI have just blogged on the subject and provided a solution that might work for you:<br>\r\n<br>\r\nhttp://wpfadventures.wordpress.com/2008/12/02/wpf-datagrid-detecting-clicked-cell-and-row/<br>\r\n<br>\r\nLet me know if this helps.<br>\r\n<br>\r\nRegards,<br>\r\nColin E.<br>\r\n--<br>\r\nhttp://wpfadventures.wordpress.com/ - my WPF blog<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx - WPF DataGrid Practical Examples <br>\r\n<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-12-02T09:05:31.35-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137002",
    "ThreadId": "41274",
    "Html": "How about setting the Context menu of DataGridRow using DataGrid.RowStyle property instead of DataGrid itself..... Following should explain in more detail<br>\r\n<br>\r\n        &lt;ContextMenu x:Key=&quot;mycm1&quot;&gt;<br>\r\n            &lt;ContextMenu.Items&gt;<br>\r\n                &lt;MenuItem Header=&quot;Item1&quot; Click=&quot;MenuItem_Click&quot;&gt;&lt;/MenuItem&gt;<br>\r\n                &lt;MenuItem Header=&quot;Item2&quot;&gt;&lt;/MenuItem&gt;<br>\r\n            &lt;/ContextMenu.Items&gt;<br>\r\n        &lt;/ContextMenu&gt;<br>\r\n<br>\r\n        &lt;Style x:Key=&quot;defaultRowStyle&quot; TargetType=&quot;{x:Type dg:DataGridRow}&quot;&gt;<br>\r\n            &lt;Setter Property=&quot;ContextMenu&quot; Value=&quot;{StaticResource mycm1}&quot;&gt;<br>\r\n            &lt;/Setter&gt;<br>\r\n        &lt;/Style&gt;<br>\r\n<br>\r\n        &lt;dg:DataGrid x:Name=&quot;TheDataGrid&quot; RowStyle=&quot;{StaticResource defaultRowStyle}&quot; ... /&gt;<br>\r\n<br>\r\n<p>        private void MenuItem_Click(object sender, RoutedEventArgs e)<br>\r\n        {<br>\r\n            MenuItem item = sender as MenuItem;<br>\r\n            DataGridRow row = TheDataGrid.ItemContainerGenerator.ContainerFromItem(item.DataContext) as DataGridRow;<br>\r\n            ....<br>\r\n        }</p>\r\n",
    "PostedDate": "2008-12-02T11:01:16.49-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137157",
    "ThreadId": "41274",
    "Html": "Except that if I set the row context menu, I lose out on any context menu functionality where there isn't any DataGridRow, such as below the data set but still within the DataGrid control. By iterating through the visual tree, all that happens is that I don't find a DataGridCell, and that can be handled by for example disabling menu items not relevant to non-rows. Iterating through the tree can also easily be moved to a helper class so that all that each instance of this code needs to deal with is whatever is specific to the DataGrid in question. Not perfect, but close enough.<br>\r\n<br>\r\nPlus, I don't see how knowing which *row* was right-clicked on tells me anything about which *cell* the pointer was over at the time, but I could be wrong. This has come up as a need as well (I know, I probably should have updated the original post - sorry).<br>\r\n",
    "PostedDate": "2008-12-03T00:31:53.947-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137159",
    "ThreadId": "41274",
    "Html": "Hi,<br>\r\n<br>\r\nWhat about the solution I gave ...<br>\r\n<br>\r\nhttp://wpfadventures.wordpress.com/2008/12/02/wpf-datagrid-detecting-clicked-cell-and-row/<br>\r\n<br>\r\nThis will give you the cell, row, cell value or column header that was clicked. I know ... it is a little complex - but that's the way it currently is with the DataGrid.<br>\r\n<br>\r\nRegards,<br>\r\nColin E.<br>\r\n--<br>\r\nhttp://wpfadventures.wordpress.com/ - my WPF blog<br>\r\nhttp://www.codeproject.com/KB/WPF/WPFDataGridExamples.aspx - WPF DataGrid Practical Examples <br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-12-03T00:46:32.723-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "137165",
    "ThreadId": "41274",
    "Html": "Yes, Colin, that is pretty much the solution I'm going with (except I implemented it slightly differently). Thank you!<br>\r\n",
    "PostedDate": "2008-12-03T00:59:28.963-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]