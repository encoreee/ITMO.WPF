[
  {
    "Id": "434303",
    "ThreadId": "210215",
    "Html": "<p>.Net Version 4.0 (Visual Studio 2010) with MVVM Templates from CodePlex WPF Futures (<a href=\"http://wpf.codeplex.com/Wikipage\">http://wpf.codeplex.com/Wikipage</a>)</p>\r\n<p>I am setting up a Project with WPF and MVVM and was wondering how it could be made easy to hook a Command to an Event.<br>After searching around on the Internet the only solution I found was with AttachedProperties.<br>I didnt like the high amount of maintenance with that and tried to find other solutions.<br>My first attempt was with a MarkupExtension, but obviously the Xaml Parser handles Events differently and doesnt allow for MarkupExtensions as Value.<br>It was clear that i needed my own layer between the Event and the Command. The only remaining clean place for that is a Setter in a Style or Template.<br>After 2 days of research I finally came up with a solution that looks like the following in Xaml.</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ad</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">DockingManager</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">dm1</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">DocumentsSource</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Pages}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ad</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">DocumentPane</span> <span style=\"color:blue\">/&gt;</span>\r\n <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ad</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">DockingManager.Style</span><span style=\"color:blue\">&gt;</span>\r\n  <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ad:DockingManager</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n   <span style=\"color:green\">&lt;!-- Routed Event --&gt;</span>\r\n   <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">hlp</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">EventCommandSetter</span> <span style=\"color:red\">Event</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">KeyDown</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource RequestCloseCommand}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n   <span style=\"color:green\">&lt;!-- OldFashioned .Net Event --&gt;</span>\r\n   <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">hlp</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">EventCommandSetter</span> <span style=\"color:red\">RegularEvent</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">RequestDocumentClose</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource RequestCloseCommand}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n  <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Style</span><span style=\"color:blue\">&gt;</span>\r\n <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">ad</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">DockingManager.Style</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">ad</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">DockingManager</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>I looked at the EventSetter and found that its mostly allready doing what we need. It hooks to a RoutedEvent and calls a Handler.<br>So if we derive from EventSetter and just set the Handler to our own, that finally calls the Command, everything is fine and working.<br>But what happens, if we want to hook to an old fashioned .net event? The events in the Avalon DockingManager are not RoutedEvents, for example.<br>For that we need an encapsulation of the event, like the RoutedEvent class is. I called this class Event and used it in my EventCommandSetter.</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> EventCommandSetter : EventSetter\r\n{\r\n <span style=\"color:blue\">private</span> ICommand _command;\r\n <span style=\"color:blue\">private</span> Event _regularEvent;</pre>\r\n<pre>\r\n <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> RoutedEvent _regularRoutedEvent = EventManager.RegisterRoutedEvent(\r\n  <span style=\"color:#a31515\">&quot;RegularRouted&quot;</span>,\r\n  RoutingStrategy.Bubble,\r\n  <span style=\"color:blue\">typeof</span>(RoutedEventHandler),\r\n  <span style=\"color:blue\">typeof</span>(EventCommandSetter)\r\n  );</pre>\r\n<pre>\r\n <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnEvent(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n {\r\n  <span style=\"color:blue\">if</span> (_command == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentException(<span style=\"color:#a31515\">&quot;EventCommandSetter.Command must not be null!&quot;</span>);\r\n  EventCommandArgs args = <span style=\"color:blue\">new</span> EventCommandArgs(sender, e);\r\n  <span style=\"color:blue\">if</span> (_command.CanExecute(args))\r\n  {\r\n   _command.Execute(args);\r\n   <span style=\"color:blue\">if</span> (<span style=\"color:blue\">typeof</span>(RoutedEventArgs).IsAssignableFrom(e.GetType())) ((RoutedEventArgs)e).Handled = <span style=\"color:blue\">true</span>;\r\n  }\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">public</span> Event RegularEvent\r\n {\r\n  <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _regularEvent; }\r\n  <span style=\"color:blue\">set</span>\r\n  {\r\n   <span style=\"color:blue\">if</span> (value == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentNullException(<span style=\"color:#a31515\">&quot;value&quot;</span>);\r\n   _regularEvent = value;\r\n   <span style=\"color:blue\">this</span>.Event = _regularRoutedEvent;\r\n  }\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">public</span> ICommand Command\r\n {\r\n  <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _command; }\r\n  <span style=\"color:blue\">set</span>\r\n  {\r\n   <span style=\"color:blue\">if</span> (value == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentNullException(<span style=\"color:#a31515\">&quot;value&quot;</span>);\r\n   <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.Event == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentException(<span style=\"color:#a31515\">&quot;Either Event or RegularEvent must be set!&quot;</span>);\r\n   <span style=\"color:blue\">this</span>.Handler = Delegate.CreateDelegate(<span style=\"color:blue\">this</span>.Event.HandlerType, <span style=\"color:blue\">this</span>, ((EventHandler)OnEvent).Method);\r\n   <span style=\"color:blue\">if</span> (_regularEvent != <span style=\"color:blue\">null</span>) _regularEvent.Handler += <span style=\"color:blue\">new</span> EventHandler(OnEvent);\r\n   _command = value;\r\n  }\r\n }\r\n}\r\n</pre>\r\n</div>\r\n<p>The Event class is responsible for registering the source Event and passing it to our EventCommandSetter.<br>Also, I couldn't find any existing TypeConverter for regular Events, so I needed something where I could define a TypeConverter on.</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>[TypeConverter(<span style=\"color:blue\">typeof</span>(EventConverter))]\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Event\r\n{\r\n <span style=\"color:blue\">public</span> Event(<span style=\"color:blue\">object</span> eventSource, EventInfo eventInfo)\r\n {\r\n  eventInfo.AddEventHandler(eventSource, Delegate.CreateDelegate(eventInfo.EventHandlerType, <span style=\"color:blue\">this</span>, ((EventHandler)OnEvent).Method));\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnEvent(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n {\r\n  <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.Handler != <span style=\"color:blue\">null</span>) <span style=\"color:blue\">this</span>.Handler(sender, e);\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> EventHandler Handler;</pre>\r\n<pre>\r\n}\r\n</pre>\r\n<pre>The class EventCommandArgs just encapsulates the regular Event Parameters into the one that is supported by a Command.</pre>\r\n<pre>\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> EventCommandArgs\r\n{\r\n <span style=\"color:blue\">public</span> EventCommandArgs(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n {\r\n  <span style=\"color:blue\">this</span>.Sender = sender;\r\n  <span style=\"color:blue\">this</span>.EventArgs = e;\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">public</span> <span style=\"color:blue\">object</span> Sender { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }</pre>\r\n<pre>\r\n <span style=\"color:blue\">public</span> EventArgs EventArgs { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }</pre>\r\n<pre>\r\n}\r\n</pre>\r\n</div>\r\n<p>When starting with this, I thought it's easy to write a TypeConverter. It sure is for primitive Types.<br>First I needed to find the value for the TargetType Property of the Style class. One day of research and 3 lines of code later I finally had it.<br>Next I needed the instance of the object this TargetType points to. Another day of research and a little bit more lines of code later I even managed this hurdle.<br>I'm not sure if the solution is a solid one, but it passed my primitive tests.</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> EventConverter : TypeConverter\r\n{\r\n <span style=\"color:blue\">private</span> ServiceType GetService&lt;ServiceType&gt;(ITypeDescriptorContext context)\r\n {\r\n  <span style=\"color:blue\">return</span> (ServiceType)context.GetService(<span style=\"color:blue\">typeof</span>(ServiceType));\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">bool</span> CanConvertFrom(ITypeDescriptorContext context, Type sourceType)\r\n {\r\n  <span style=\"color:blue\">if</span> (sourceType == <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">string</span>)) <span style=\"color:blue\">return</span> <span style=\"color:blue\">true</span>;\r\n  <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>;\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">bool</span> CanConvertTo(ITypeDescriptorContext context, Type destinationType)\r\n {\r\n  <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>;\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> AddCurrentChild(<span style=\"color:blue\">object</span> current, Type targetType, List&lt;<span style=\"color:blue\">object</span>&gt; coll)\r\n {\r\n  <span style=\"color:blue\">if</span> (targetType.IsAssignableFrom(current.GetType())) coll.Add(current);\r\n  <span style=\"color:blue\">if</span> (!<span style=\"color:blue\">typeof</span>(DependencyObject).IsAssignableFrom(current.GetType())) <span style=\"color:blue\">return</span>;\r\n  <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">object</span> child <span style=\"color:blue\">in</span> LogicalTreeHelper.GetChildren((DependencyObject)current)) AddCurrentChild(child, targetType, coll);\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">public</span> IList FindChildren(IRootObjectProvider root, Type targetType)\r\n {\r\n  List&lt;<span style=\"color:blue\">object</span>&gt; coll = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">object</span>&gt;();\r\n  AddCurrentChild(root.RootObject, targetType, coll);\r\n  <span style=\"color:blue\">return</span> coll;\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">object</span> ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, <span style=\"color:blue\">object</span> value)\r\n {\r\n  <span style=\"color:blue\">if</span> (context == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n  <span style=\"color:blue\">var</span> schema = GetService&lt;IXamlSchemaContextProvider&gt;(context).SchemaContext;\r\n  <span style=\"color:blue\">var</span> ambient = GetService&lt;IAmbientProvider&gt;(context);\r\n  <span style=\"color:blue\">var</span> root = GetService&lt;IRootObjectProvider&gt;(context);</pre>\r\n<pre>\r\n  <span style=\"color:blue\">var</span> targetType = ambient.GetFirstAmbientValue(<span style=\"color:blue\">null</span>,\r\n   schema.GetXamlType(<span style=\"color:blue\">typeof</span>(Style)).GetMember(<span style=\"color:#a31515\">&quot;TargetType&quot;</span>),\r\n   schema.GetXamlType(<span style=\"color:blue\">typeof</span>(ControlTemplate)).GetMember(<span style=\"color:#a31515\">&quot;TargetType&quot;</span>)\r\n   );\r\n  <span style=\"color:blue\">if</span> (targetType == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> Exception(<span style=\"color:#a31515\">&quot;Could not determine TargetType!&quot;</span>);</pre>\r\n<pre>\r\n  <span style=\"color:blue\">var</span> eventInfo = ((Type)targetType.Value).GetEvent(value.ToString());\r\n  <span style=\"color:blue\">if</span> (eventInfo == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentException(value.ToString() + <span style=\"color:#a31515\">&quot; is no event on &quot;</span> + targetType.Value.ToString());</pre>\r\n<pre>\r\n  <span style=\"color:blue\">var</span> children = FindChildren(root, eventInfo.DeclaringType);\r\n  <span style=\"color:blue\">if</span> (children.Count == 0) <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> Exception(<span style=\"color:#a31515\">&quot;Could not find instance of &quot;</span> + eventInfo.DeclaringType.ToString() + <span style=\"color:#a31515\">&quot;!&quot;</span>);\r\n  <span style=\"color:green\">// the last one is the one we currently parse</span>\r\n  <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Event(children[children.Count - 1], eventInfo);\r\n }</pre>\r\n<pre>\r\n <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">object</span> ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, <span style=\"color:blue\">object</span> value, Type destinationType)\r\n {\r\n  <span style=\"color:blue\">throw</span> <span style=\"color:blue\">base</span>.GetConvertToException(value, destinationType);\r\n }\r\n}\r\n</pre>\r\n</div>\r\n<p>If anyone has suggestions to improve this concept, or may has a better solution, please post a comment!</p>\r\n<p>Greetings!<br>Zorgoban</p>",
    "PostedDate": "2010-04-22T11:49:12.443-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]