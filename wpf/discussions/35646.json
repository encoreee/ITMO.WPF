[
  {
    "Id": "118470",
    "ThreadId": "35646",
    "Html": "Is there a simple way to get the selected regions with the CTP DataGrid?<br>\r\n&nbsp;I&nbsp; need a list of rectangles. where each rectangle represents one selected region of cells. <br>\r\n<br>\r\nThe CTP version of DataGrid only exposes SelectedCells as an IList&lt;DataGridCellInfo&gt; and goes out of its way to hide the SelectedCellsCollection. <br>\r\nArgh!!<br>\r\nThis really makes customized drag and drop clumsy since what you want to know is the selected regions and that information is hidden. <br>\r\nYou wind up having the build up the regions information yourself.&nbsp; <br>\r\nIt can fairly expensive to build the list and can be prone to bugs when&nbsp; you consider multiselection.<br>\r\n<br>\r\nWill SelectedCellsCollection get exposed out in a future version?<br>\r\n<br>\r\n",
    "PostedDate": "2008-09-14T13:48:24.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "119287",
    "ThreadId": "35646",
    "Html": "What kind of scenario are you trying to implement for your customized drag and drop?&nbsp; The thing about exposing the SelectedCellsCollection is that it is tied to a lot of internal implementation detail that could possible change in the future.&nbsp; Understanding your scenario may be helpful in understanding what we can do to enable a better development experience.\r\n",
    "PostedDate": "2008-09-17T21:27:31.127-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "120669",
    "ThreadId": "35646",
    "Html": "I too&nbsp;wish to implement a drag and drop scenario. My DataGrid is essentially a list of 'TennisMatch' objects. A column of my DataGrid represents a 'Player' object and just displays the Player's 'Name' property. I also have a listView containing a list of Players. I intend to drag a Player from my listView to a cell in the player column of my DataGrid.<br>\r\n<br>\r\nI haven't gotten far in my attempt to implement this yet, but I thought you might appreciate the feedback.\r\n",
    "PostedDate": "2008-09-24T08:58:39.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "265184",
    "ThreadId": "35646",
    "Html": "<p>My scenario is implementing a custom <em>paste </em>routine where I need to make sure the shape of data being <strong>pasted </strong>matches that of the <strong>grid selection</strong>.</p>\r\n<p>So, if someone copies a 2x2 square of cells from Excel and pastes this into our grid - which has a selection of cells equal to 4x1 - I need to know it's not the same shape and therefore something needs to be done.</p>\r\n<p>I can only do this by using the Height/Width properties of the SelectedCellsCollection.</p>",
    "PostedDate": "2009-12-08T22:35:47.273-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "265554",
    "ThreadId": "35646",
    "Html": "<p>To implement my scenario (previous post) and make it testable I made changes as below.</p>\r\n<p>Remove everything 'internal' and conform SelectedCellsSelection to an interface (so I could mock it out for testing).</p>\r\n<p>If you want to set up a valid SelectedCellsCollection object for unit-testing, without using mocks, then have a nice day (or few days) and let me know how it goes ;-)</p>\r\n<p>A side question: Is it true then, that no one else who writes grid selection code, has a need to unit-test any of it?</p>\r\n<p>It boils my blood to find libraries with code that is unnecessarily difficult to incorporate into valid unit-tests - use of <strong>internal</strong> and <strong>sealed</strong> and pointless private constructors etc. Why the default is not to assume that developers might have a valid reason to access this code, I really don't understand.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">interface</span> ISelectedCellsCollection\r\n    {\r\n        <span style=\"color:Blue\">bool</span> GetSelectionRange(\r\n            <span style=\"color:Blue\">out</span> <span style=\"color:Blue\">int</span> minColumnDisplayIndex, <span style=\"color:Blue\">out</span> <span style=\"color:Blue\">int</span> maxColumnDisplayIndex,\r\n            <span style=\"color:Blue\">out</span> <span style=\"color:Blue\">int</span> minRowIndex, <span style=\"color:Blue\">out</span> <span style=\"color:Blue\">int</span> maxRowIndex);\r\n\r\n        <span style=\"color:Blue\">int</span> Count { <span style=\"color:Blue\">get</span>; }\r\n    }\r\n\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">sealed</span> <span style=\"color:Blue\">class</span> SelectedCellsCollection : VirtualizedCellInfoCollection, ISelectedCellsCollection\r\n    {...\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-12-09T22:14:05.92-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]