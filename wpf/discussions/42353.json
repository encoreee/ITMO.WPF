[
  {
    "Id": "140708",
    "ThreadId": "42353",
    "Html": "I am having a confusing issue with the datagrid...<br>\r\n<br>\r\nI have 2 controls... a datagrid and a combobox.&nbsp; For sake of simplicity, let us say the items in the datagrid are of type Person.&nbsp; If Person has Name and Age properties, then these are the columns of the datagrid.&nbsp; CanUserAddRows on the datagrid is set to TRUE.<br>\r\n<br>\r\nI have declared a variable Persons As ObservableCollection (of Person), which drives the itemssource for both the datagrid and the combobox.&nbsp; The idea is that the user can edit the Persons collection via the grid, and in the combobox will be able to select one person.<br>\r\n<br>\r\nEverything works fine, except that I am getting an empty item in the combobox (along with the person items from the persons collection).&nbsp; It is NOT in the Persons collection, but only shows up in the combobox.&nbsp; The empty item is not of the type Person either.<br>\r\n<br>\r\nI have pretzeled my brain trying to figure this out... any help would be appreciated.<br>\r\n<br>\r\n",
    "PostedDate": "2008-12-15T12:44:04.26-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140784",
    "ThreadId": "42353",
    "Html": "I believe my question can be answered by someone explaining how WPF adds an item to a databound ObservableCollection.<br>\r\n<br>\r\nif I have a datagrid, with ItemsSource databound to an observablecollection (of Person), and UserCanAddRows = TRUE...<br>\r\nand the user adds a new row on the datagrid, how does this new Person item get added to the ObservableCollection?<br>\r\n<br>\r\nIt does not seem to use the Add method on ObservableCollection...&nbsp; <br>\r\nor at least it doesn't if I create a derivation of ObservableCollection and Shadow the Add method.<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-12-15T16:52:18.16-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140791",
    "ThreadId": "42353",
    "Html": "After a little more digging, I have found that the empty item is of type {MS.Internal.NamedObject}<br>\r\n<br>\r\nSetting CanUserAddRows to False fixes the problem, but as I need the functionality to have the user add rows I need a workaround.<br>\r\n",
    "PostedDate": "2008-12-15T17:31:44.213-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "141670",
    "ThreadId": "42353",
    "Html": "The DataGrid uses IECV to add additional items.  For more info on it see this post, <a href=\"http://blogs.msdn.com/vinsibal/archive/2008/05/20/wpf-3-5-sp1-feature-ieditablecollectionview.aspx\">http://blogs.msdn.com/vinsibal/archive/2008/05/20/wpf-3-5-sp1-feature-ieditablecollectionview.aspx</a> and this post, <a href=\"http://blogs.msdn.com/vinsibal/archive/2008/10/01/overview-of-the-editing-features-in-the-wpf-datagrid.aspx\">http://blogs.msdn.com/vinsibal/archive/2008/10/01/overview-of-the-editing-features-in-the-wpf-datagrid.aspx</a>.\r\n",
    "PostedDate": "2008-12-18T12:42:41.25-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "141687",
    "ThreadId": "42353",
    "Html": "Thanks vinsibal.<br>\r\n<br>\r\nI'm still not understanding though... it seems like the empty item would need to be added before it actually manifests itself.&nbsp; Meaning, that the user would have to at least click on the insertrow.<br>\r\n<br>\r\nWhat I am seeing is a {MS.Internal.NamedObject} that somehow gets ported over databinding to another control.&nbsp; If I have a setup like the following...<br>\r\n<br>\r\nDatagrid &lt;----&gt; ObservableCollection(of Person) &lt;-----&gt; combobox<br>\r\n<br>\r\nwhereby the datagrid is twoway databound to the observable collection, and the combobox is one-way databound to the observable collection.&nbsp; <br>\r\n<br>\r\nThe {MS.Internal.NamedObject} shows up in the combobox, but not in the observablecollection.&nbsp; It is not of the type Person either.<br>\r\n<br>\r\nThanks for your help...<br>\r\nKB<br>\r\n",
    "PostedDate": "2008-12-18T13:09:26.483-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143766",
    "ThreadId": "42353",
    "Html": "Kevin,<br>\r\n<br>\r\nI ran into this same thing. I found a work around. Altho I'm not sure it is the &quot;right&quot; way to solve the problem, it works:<br>\r\n<br>\r\nInstead of binding to Persons directly with your two controls, bind to a new ListCollectionView(Persons) in each case. What I did was expose a property called View like this from my Persons object:<br>\r\n<br>\r\n    Public ReadOnly Property View() As ListCollectionView<br>\r\n        Get<br>\r\n            Return New ListCollectionView(Me)<br>\r\n        End Get<br>\r\n    End Property<br>\r\n<br>\r\nThen in my xaml, I bound to the View property of Persons instead of binding directly to persons. <br>\r\n<br>\r\nWhat I surmise to be the issue is that if you don't specify a new ListCollection, then it uses the equivalent of CollectionViewSource.GetDefaultView(Persons) which returns the same default view to both the combo box and the datagrid. The datagrid apparently does something to that view (having to do with the NewItemPlaceHolder) which causes the new item placeholder to show up for the combo box as well.<br>\r\n<br>\r\nAt any rate, this is a work around that worked for me. If anyone else knows why this option is a bad idea, by all means, please post!<br>\r\n<br>\r\nThanks,<br>\r\nBenjamin\r\n",
    "PostedDate": "2008-12-31T13:36:28.023-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143779",
    "ThreadId": "42353",
    "Html": "Benjamin,<br>\r\n<br>\r\nthanks for the reply...&nbsp; your fix certainly takes care of the empty item issue.&nbsp;&nbsp; However, it seems to mess with the selection logic of the combobox itself.&nbsp; This is not necessarily a killer if I can figure out why it's different.<br>\r\n<br>\r\nI don't understand ListCollectionViews all that well.&nbsp; Is this a normal application of a listCollectionView?&nbsp; Namely, using it as an intermediate step for databinding to controls?<br>\r\n<br>\r\nThanks,<br>\r\nKB \r\n",
    "PostedDate": "2008-12-31T14:05:54.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143781",
    "ThreadId": "42353",
    "Html": "Kevin,<br>\r\n<br>\r\nCan you elaborate a little more on how it seems to mess with the selection logic of the combo box? There may be some side effect to this work-around that I haven't seen yet, so I'm interested to hear what you're seeing.<br>\r\n<br>\r\nAs for whether or not this is &quot;normal&quot; application of the ListCollectionView, I'm not sure. I'm no expert on these either. But my understanding is that a ListCollectionView <em>is</em> used behind the scenes as an &quot;intermediate&quot; for binding the ObservableCollection to the controls. The only difference here is that we're manually creating that LCV instead of letting it use the &quot;default&quot; ListCollectionView.<br>\r\n<br>\r\nLike I say tho, I'm just learning this stuff myself, so my solution may not be optimum. Hopefully someone with more expertise will weigh in here.<br>\r\n<br>\r\nThanks,<br>\r\nBenjamin \r\n",
    "PostedDate": "2008-12-31T14:10:16.877-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143784",
    "ThreadId": "42353",
    "Html": "Well, my case is rather odd...&nbsp; I use the same combobox around the whole application.&nbsp; The combo I saw the selection logic changed is not actually one of the comboboxes that is databound (through the intermediate object) to the datagrid.<br>\r\n<br>\r\nI have made my own class and style for ComboBoxItem, which utilizes a IsEnabled property.&nbsp; This allows me to enable/disable options in the combobox by setting the IsEnabled property on my business object.&nbsp; <br>\r\n<br>\r\nUpon a change of other options in the window, I scroll through the observablecollection backing the combobox to see if each option is valid.&nbsp; If not, I disable it.&nbsp; During this procedure, If I enable a comboboxitem, it is now automatically selecting it as well (this is not correct behavior)... this only happens when I use your method of binding to the listcollectionview.<br>\r\n<br>\r\nLike I said, it's a rather abstract change...<br>\r\n<br>\r\nKB<br>\r\n",
    "PostedDate": "2008-12-31T14:21:58.32-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143788",
    "ThreadId": "42353",
    "Html": "Another strange change I noticed...&nbsp; your fix seems to solve the problem I just posted about in another thread too...<br>\r\n<br>\r\nhttp://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=43260<br>\r\n<br>\r\nVery odd. <br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-12-31T14:23:54.727-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]