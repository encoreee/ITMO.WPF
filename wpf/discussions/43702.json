[
  {
    "Id": "145367",
    "ThreadId": "43702",
    "Html": "I am working on subclassing the V1 DataGrid to add some functionality that should be provided throughout the application, which is going well so far. However, I also need to slightly alter the visual appearance of the control. Specifically in this case, I want to change the control template for a selected but not-in-edit-mode cell. In order to do that, I added a &quot;Resource&quot; file named themes\\general.xaml (as per &quot;Programming WPF&quot;, 2nd edition page 675 &quot;default styles&quot;) and then added the following code to the end of my subclass' static constructor:<br>\r\n<br>\r\nnamespace MyNameSpace<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp; public class DataGrid : Microsoft.Windows.Controls.DataGrid<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static DataGrid()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DefaultStyleKeyProperty.OverrideMetadata(<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(MyNameSpace.DataGrid),<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FrameworkPropertyMetadata(typeof(MyNameSpace.DataGrid)));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n}<br>\r\n<br>\r\nHowever, when I took my changes out of the base control's control template, depending on whether I override the DefaultStyleKeyProperty in the constructor, I end up with either a control with no visual appearance, or one that simply inherits the visual appearance of the base control (which is to be expected with no override). Here is the content of my project's themes\\generic.xaml; this particular combination of code results in no visual appearance of the DataGrid. Am I missing some obvious step?<br>\r\n<br>\r\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt; <br>\r\n&lt;ResourceDictionary xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:dg=&quot;clr-namespace:Microsoft.Windows.Controls&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:dgp=&quot;clr-namespace:Microsoft.Windows.Controls.Primitives&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:local=&quot;clr-namespace:MyNameSpace&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;Style x:Key=&quot;{x:Type local:DataGrid}&quot; TargetType=&quot;{x:Type local:DataGrid}&quot; BasedOn=&quot;{x:Type dg:DataGrid}&quot; /&gt; <br>\r\n&nbsp;&nbsp;&nbsp; &lt;Style x:Key=&quot;{x:Type local:DataGridCell}&quot; TargetType=&quot;{x:Type dg:DataGridCell}&quot; BasedOn=&quot;{x:Type dg:DataGridCell}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Style.Triggers&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Trigger Property=&quot;IsSelected&quot; Value=&quot;True&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;BorderThickness&quot; Value=&quot;3.5&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Trigger&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Style.Triggers&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/Style&gt;<br>\r\n&lt;/ResourceDictionary&gt;<br>\r\n<br>\r\nMany thanks in advance for any insights you may be able to provide.<br>\r\n",
    "PostedDate": "2009-01-08T02:09:09.617-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "145683",
    "ThreadId": "43702",
    "Html": "I managed to somewhat work around this issue by changing the CellStyle property in the instance constructor of my subclassed DataGrid. (I'm including an example below.) However, I would still like to do this in XAML if possible, to keep a clear separation between logic and UI. Is that doable and if so, what would be a recommended approach?<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public DataGrid() : base()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trigger trigger = new Trigger()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Property = DataGridCell.IsSelectedProperty,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value = true<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trigger.Setters.Add(new Setter()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Property = DataGridCell.BackgroundProperty,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value = System.Windows.Media.Brushes.Yellow // make it obvious<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.CellStyle = new Style(typeof(DataGridCell));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.CellStyle.Triggers.Add(trigger);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n",
    "PostedDate": "2009-01-09T05:25:56.363-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "145928",
    "ThreadId": "43702",
    "Html": "For what you've shown here, I believe you should remove &quot;DefaultStyleKeyProperty.OverrideMetadata...&quot;, and add following setter to your style, outside Style.Triggers:<br>\r\n&lt;Setter Property=&quot;OverridesDefaultStyle&quot; Value=&quot;True&quot; /&gt;<br>\r\nThat should do the trick.<br>\r\n<br>\r\nIf you are determined to use static constructor containing &quot;DefaultStyleKeyProperty.OverrideMetadata...&quot; you must provide the entire ControlTemplate for your control.<br>\r\nIn this case you want only to override BorderThickness, property that can be set for any control without using ControlTemplate.<br>\r\n<br>\r\nLet me know if this was of any use to you.<br>\r\n<br>\r\nRegards,<br>\r\n<br>\r\nDarko Antanasijevic<br>\r\n",
    "PostedDate": "2009-01-10T07:02:06.257-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]