[
  {
    "Id": "457558",
    "ThreadId": "216609",
    "Html": "<p>I've heard others have had a memory leak with the WPF Toolkit chart objects.&nbsp; I have the same issue.&nbsp; My application is pretty simple.&nbsp; I have a class called View which I derive from ContentControl.&nbsp; On regular intervals I create a new Chart object and set my View's Content property to that new chart.&nbsp; The previous chart which was the content should no longer be referenced and therefore collected during the next GC.&nbsp; However, this was not the case.&nbsp; All chart objects I had created were still being referenced and therefore memory consumption kept rising.</p>\r\n<p>I took a couple process dumps using adplus.vbs (part of the debugging tools for windows) and viewed the managed heap.&nbsp; The managed heap showed all the chart objects which were created were still being referenced, along with all the LineSeries I had created.&nbsp; I still haven't figured out the root cause but I was able to modify the my code and the LineSeries code such that the majority of the leak is resolved.&nbsp; Before I get into the change I made I want to comment on what might be at the root of the problem.&nbsp; What I noticed while inspecting the process dumps was that each chart object's ResourceDictionaryDispenser for the Palette property contain the SAME ResourceDictionary collection.&nbsp; Since the leak was &quot;somewhat&quot; caused by the line series not pulling itself out of the SeriesHost dictionary and since each chart was holding onto the same resource dictionary collection, all charts were holding onto all line series.&nbsp; In my case I thought I was letting go of one chart when I created the new one, yet the new one was holding onto the same resources I thought I was letting go of and therefore everything was sticking around.&nbsp; I probably didn't do a good job of explaining that.</p>\r\n<p>There are two related fixes.&nbsp; The &quot;inner&quot; one which is dependent on the &quot;outer&quot; is that the line series was not removing itself from the dictionary when its host was going away.&nbsp; Here is the before code:</p>\r\n<p>From DataPointSingleSeriesWithAxes.cs:</p>\r\n<p><span style=\"color:#0000ff\">protected override void OnSeriesHostPropertyChanged(ISeriesHost oldValue, ISeriesHost newValue)</span><br><span style=\"color:#0000ff\">{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;base.OnSeriesHostPropertyChanged(oldValue, newValue);</span><br><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;if (oldValue != null)</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;oldValue.ResourceDictionariesChanged -= new EventHandler(SeriesHostResourceDictionariesChanged);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;}</span><br><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;if (newValue != null)</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;newValue.ResourceDictionariesChanged += new EventHandler(SeriesHostResourceDictionariesChanged);</span><br><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;DispensedResourcesChanging();</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;}</span><br><span style=\"color:#0000ff\">}</span></p>\r\n<p>Note that when the newValue is null, e.g. series host going away, it doesn't call DispensedResourcesChanging().&nbsp; I changed this method to:</p>\r\n<p><span style=\"color:#0000ff\">protected override void OnSeriesHostPropertyChanged(ISeriesHost oldValue, ISeriesHost newValue)</span><br><span style=\"color:#0000ff\">{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;base.OnSeriesHostPropertyChanged(oldValue, newValue);</span><br><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;if (oldValue != null)</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;oldValue.ResourceDictionariesChanged -= new EventHandler(SeriesHostResourceDictionariesChanged);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;}</span><br><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;if (newValue != null)</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;newValue.ResourceDictionariesChanged += new EventHandler(SeriesHostResourceDictionariesChanged);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;}</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;DispensedResourcesChanging();</span><br><span style=\"color:#0000ff\">}</span></p>\r\n<p>Now we have to modify DispensedResourcesChanging() since it was assuming its SeriesHost was always non-null.&nbsp; Below is the original code.&nbsp; I <span style=\"color:#ff0000\">highlighted</span> the significant line which wasn't getting executed because DispensedResourcesChanging() wasn't getting called when the series host was being set to null.</p>\r\n<p><span style=\"color:#0000ff\">private void DispensedResourcesChanging()</span><br><span style=\"color:#0000ff\">{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;if (null != PaletteResources)</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#ff0000\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Resources.MergedDictionaries.Remove(PaletteResources);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;PaletteResources = null;</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;}</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;using (IEnumerator&lt;ResourceDictionary&gt; enumerator = GetResourceDictionaryEnumeratorFromHost())</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if (enumerator.MoveNext())</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;PaletteResources =</span><br><span style=\"color:#0000ff\">#if SILVERLIGHT</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;enumerator.Current.ShallowCopy();</span><br><span style=\"color:#0000ff\">#else</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;enumerator.Current;</span><br><span style=\"color:#0000ff\">#endif</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Resources.MergedDictionaries.Add(PaletteResources);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;}</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;CreateLegendItemDataPoint();</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;ActualDataPointStyle = DataPointStyle ?? (Resources[DataPointStyleName] as Style);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;ActualLegendItemStyle = LegendItemStyle ?? (Resources[LegendItemStyleName] as Style);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;Refresh();</span><br><span style=\"color:#0000ff\">}</span></p>\r\n<p>I just added the 'if (SeriesHost != null)':</p>\r\n<p><span style=\"color:#0000ff\">private void DispensedResourcesChanging()</span><br><span style=\"color:#0000ff\">{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;if (null != PaletteResources)</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Resources.MergedDictionaries.Remove(PaletteResources);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;PaletteResources = null;</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;}</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;if (SeriesHost != null)</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;using (IEnumerator&lt;ResourceDictionary&gt; enumerator = GetResourceDictionaryEnumeratorFromHost())</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if (enumerator.MoveNext())</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;PaletteResources =</span><br><span style=\"color:#0000ff\">#if SILVERLIGHT</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;enumerator.Current.ShallowCopy();</span><br><span style=\"color:#0000ff\">#else</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;enumerator.Current;</span><br><span style=\"color:#0000ff\">#endif</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Resources.MergedDictionaries.Add(PaletteResources);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;}</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;CreateLegendItemDataPoint();</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;ActualDataPointStyle = DataPointStyle ?? (Resources[DataPointStyleName] as Style);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;ActualLegendItemStyle = LegendItemStyle ?? (Resources[LegendItemStyleName] as Style);</span><br><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;Refresh();</span><br><span style=\"color:#0000ff\">}</span></p>\r\n<p>In order for any of this to get called I needed to change my code so that instead of just updating my content control's Content property to the new chart, I now need to clear the series collection of the old chart.&nbsp; So it now does something like this:</p>\r\n<p>Chart oldchart = this.Content as Chart;<br>Chart chart = new Chart();<br>.<br>.<br>.<br>this.Content = chart;<br>if (oldchart != null)<br>&nbsp;&nbsp; &nbsp;oldChart.Series.Clear();<br>.<br>.<br>.</p>\r\n<p>The only reason I'm holding off on clearing the old chart series until after I set the new chart as the content is just in case WPF decided to update the screen right away.&nbsp; I didn't want any flashing to a blank screen followed by the new chart displaying.&nbsp; I assume this won't happen, but just in case I update the new content before clearing the series of the old chart.</p>\r\n<p>These changes seem to clear up MOST of the leak.&nbsp; There might still be a small leak, but I can't say for sure since I have yet to go back and test thoroughly.&nbsp; I did go back and verify that the charts and the line series are no longer being referenced by running my app and capturing a process dump and viewing the managed heap.</p>\r\n<p>While these changes fix the leak I was experiencing I don't think I should have to clear the old chart's series.&nbsp; All I should need to do if update the content to the new chart.&nbsp; The old chart should no longer be referenced and everything should work.&nbsp; As I mentioned at the beginning it appears all charts hold onto the same resource dictionary collection and that's why the leak is occurring.&nbsp; I think if each chart had its own resource dictionary collection the leak would not have existed.</p>\r\n<p>Nick</p>",
    "PostedDate": "2010-06-19T06:12:35.783-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "461818",
    "ThreadId": "216609",
    "Html": "<p>Thanks for this! I was trying to figure out what was keeping the chart around in memory and couldn't figure it out. I've been using this fix for a week or so now and it definitely works.</p>",
    "PostedDate": "2010-06-30T13:54:59.1-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "462349",
    "ThreadId": "216609",
    "Html": "<p>Today I decided to see what, if any, leak still exists.&nbsp; It appears there is still a leak.&nbsp; I seem to be leaking System.WeakReference and System.EventHandler objects.&nbsp; At this point I'm not sure what's holding onto them.</p>\r\n<p>Thanks,</p>\r\n<p>Nick</p>",
    "PostedDate": "2010-07-01T13:28:25.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "521114",
    "ThreadId": "216609",
    "Html": "\r\n<p>I thought I would leave this here because nickdu's post put me on the right direction. This is a fix that will allow you to clear you memory when you close the charts. From generic. xaml in the source remove all the items in &lt;datavis:ResourceDictionaryCollection\r\n that begins on line 282. I think this will have the effect of you not having any default points styles. Most&nbsp;importantly&nbsp;it has the effect of memory being freed after close.</p>\r\n<p>This is the end result -&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">charting:Chart</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">BorderBrush</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Black</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">BorderThickness</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">IsTabStop</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">False</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Padding</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">SnapsToDevicePixels</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Value</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">True</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Palette</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter.Value</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">datavis</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ResourceDictionaryCollection</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">datavis</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ResourceDictionaryCollection</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Setter.Value</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Setter</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2010-11-12T07:14:12.667-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132208",
    "ThreadId": "216609",
    "Html": "One question....\r<br />\n<br />\nIf you have to recompile the dll?\r<br />\nI tried to rebuild the project but did not succeed\r<br />\n<br />\nyou can link them<br />\n",
    "PostedDate": "2013-12-05T09:09:36.64-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132644",
    "ThreadId": "216609",
    "Html": "It was a long time ago.  Since I made a change to the WPF Toolkit code I would say that, yes, you do need to recompile the toolkit.  Not sure why it didn't build for you.  Does the toolkit rebuild without making the change?  I haven't done any WPF Toolkit work in a while.  Got kind of frustrated with it.  Seemed to be buggy and missing core features I would expect in a charting toolkit.\r<br />\n<br />\nNick<br />\n",
    "PostedDate": "2013-12-06T13:59:59.317-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]