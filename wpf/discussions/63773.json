[
  {
    "Id": "216860",
    "ThreadId": "63773",
    "Html": "<p>I'm using the toolkits charting to provide some real-time data to the user. Everything works fine, except that I am showing significant performance issues when I've been charting for over an hour or so. My charts data is bound to an ObservableCollection of Pair objects. I am only keeping the most recent 30 min worth of data (calling ObservableCollection.Remove(Pair) to remove the data), so ideally I should not see any performance loss past 30 minutes of charting I would think.</p>\r\n<p>I am sure that my data is being removed correctly. When the chart is not open in the application, I am still logging my data and I experience no performance issues, even after several hours of running. The moment I start charting the data, CPU and memory jump up a bit, which is to be expected, but they then increase indefinitely. Is the chart doing some under-the-hood caching of my data so that it's not being properly garbage collected? Is it redrawing/calculating these points even though they don't actually show up in the graph? Any ideas of a work-around would be greatly appreciated.</p>\r\n<p>Thanks,</p>\r\n<p>Steve</p>",
    "PostedDate": "2009-07-28T09:27:52.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "217995",
    "ThreadId": "63773",
    "Html": "<p>Anyone know anything about this? Looks like I'm going to have to go to a third-party vendor if I can't find a fix for this.</p>",
    "PostedDate": "2009-07-31T06:52:51.223-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "220083",
    "ThreadId": "63773",
    "Html": "<p>Steve,</p>\r\n<p>If you could please share a simple, self-contained demonstration of this problem, I'd very much appreciate it. A small handful of people have reported issues like this over the months, but so far the issues have turned out to be bogus or no self-contained demo could be created. If you're able to do so, we'll have a look and try to sort out what's going on here.</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2009-08-05T17:21:12.137-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "220340",
    "ThreadId": "63773",
    "Html": "<p>Sure thing. I wrote a simple sample app that illustrates the problem I'm running into. Let me know if you need anything else.</p>\r\n<p>I have created a DataProvider class that simply creates a new random data point every second and adds it to an ObservableCollection of CPair objects (essentially a tuple). I then remove the first item in that collection so that the collection size should remain unaltered.</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">Chart</span> <span style=\"color:Red\">Title</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">WPFToolkit Test</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">DataContext</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">MainChart</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">Chart.Axes</span><span style=\"color:Blue\">&gt;</span>\r\n                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">LinearAxis</span> <span style=\"color:Red\">Orientation</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Y</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Minimum</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">0</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ShowGridLines</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">True</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DateTimeAxis</span> <span style=\"color:Red\">Orientation</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">X</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n            <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">Chart.Axes</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">Chart.Series</span><span style=\"color:Blue\">&gt;</span>\r\n                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">AreaSeries</span> <span style=\"color:Red\">Title</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Random Data</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ItemsSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=DataCollection}</span><span style=\"color:Black\">&quot;</span>  <span style=\"color:Red\">IsSelectionEnabled</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">True</span><span style=\"color:Black\">&quot;</span>\r\n                                       <span style=\"color:Red\">DependentValueBinding</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=Second}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">IndependentValueBinding</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=First}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">AreaSeries.DataPointStyle</span><span style=\"color:Blue\">&gt;</span>\r\n                        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Style</span> <span style=\"color:Red\">TargetType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">WPFToolkit:AreaDataPoint</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter</span> <span style=\"color:Red\">Property</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Background</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Red</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n                            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter</span> <span style=\"color:Red\">Property</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Visibility</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Collapsed</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n                        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Style</span><span style=\"color:Blue\">&gt;</span>\r\n                    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">AreaSeries.DataPointStyle</span><span style=\"color:Blue\">&gt;</span>\r\n                <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">AreaSeries</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">Chart.Series</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">WPFToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">Chart</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n<br><br><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> DataProvider : INotifyPropertyChanged\r\n\t</span>{\r\n\t\t<span style=\"color:Blue\">public</span> ObservableCollection&lt;CPair&lt;DateTime, Double&gt;&gt; DataCollection { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> PropertyChangedEventHandler PropertyChanged = <span style=\"color:Blue\">delegate</span> { };\r\n\r\n\t\t<span style=\"color:Blue\">private</span> <span style=\"color:Blue\">bool</span> bPause;\r\n\t\t<span style=\"color:Blue\">private</span> Timer SecondTimer;\r\n\t\t<span style=\"color:Blue\">private</span> Random RandomDataGenerator;\r\n\t\t<span style=\"color:Blue\">private</span> MainWindow MainWindow_;\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">delegate</span> <span style=\"color:Blue\">void</span> DTimerEvent(CPair&lt;DateTime, Double&gt; pair);\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> DTimerEvent TimerEvent;\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> DTimerEvent DTE;\r\n\r\n\t\t<span style=\"color:Blue\">public</span> DataProvider(MainWindow MainWindow_)\r\n\t\t{\r\n\t\t\t<span style=\"color:Blue\">this</span>.MainWindow_ = MainWindow_;\r\n\r\n\t\t\tSecondTimer = <span style=\"color:Blue\">new</span> Timer() { Interval = 1000, Enabled = <span style=\"color:Blue\">true</span>, AutoReset = <span style=\"color:Blue\">true</span> };\r\n\t\t\tSecondTimer.Elapsed += <span style=\"color:Blue\">new</span> ElapsedEventHandler(SecondTimer_Elapsed);\r\n\t\t\tTimerEvent += <span style=\"color:Blue\">new</span> DTimerEvent(DataProvider_TimerEvent);\r\n\t\t\tDTE += DataProvider_TimerEvent;\r\n\r\n\t\t\tRandomDataGenerator = <span style=\"color:Blue\">new</span> Random();\r\n\t\t\tDataCollection = <span style=\"color:Blue\">new</span> ObservableCollection&lt;CPair&lt;DateTime, Double&gt;&gt;();\r\n\r\n\t\t\t<span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 200; i &gt; 0; i--)\r\n\t\t\t{\r\n\t\t\t\tDateTime DT = <span style=\"color:Blue\">new</span> DateTime((DateTime.Now.Subtract(<span style=\"color:Blue\">new</span> TimeSpan(0, 0, i))).Ticks);\r\n\t\t\t\tDataCollection.Add(<span style=\"color:Blue\">new</span> CPair&lt;DateTime, <span style=\"color:Blue\">double</span>&gt;(DT, RandomDataGenerator.NextDouble() * 100));\r\n\t\t\t}\r\n\r\n\t\t\tSecondTimer.Start();\r\n\t\t}\r\n\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> DataProvider_TimerEvent(CPair&lt;DateTime, <span style=\"color:Blue\">double</span>&gt; pair)\r\n\t\t{\r\n\t\t\tDataCollection.RemoveAt(0);\r\n\t\t\tDataCollection.Add(pair);\r\n\t\t}\r\n\r\n\t\t<span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> SecondTimer_Elapsed(<span style=\"color:Blue\">object</span> sender, ElapsedEventArgs e)\r\n\t\t{\r\n\t\t\tCPair&lt;DateTime, Double&gt; pair = <span style=\"color:Blue\">new</span> CPair&lt;DateTime, Double&gt;(DateTime.Now, RandomDataGenerator.NextDouble() * 100);\r\n\t\t\tMainWindow_.Dispatcher.Invoke(DTE, pair);\r\n\t\t}\r\n\t}\r\n</pre>\r\n</div>\r\n<br>After running this code for over an hour, I have seen an obvious and fairly substantial trend of the memory footprint increasing. Again, let me know if you need anything else and thanks for looking at this!<br><br>-Steve</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-08-06T06:41:50.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "220864",
    "ThreadId": "63773",
    "Html": "<p>Steve,</p>\r\n<p>Thanks very much for the sample! I see the behavior you're reporting and there's nothing about your code that stands out to me as being wrong. Today's my last day before a week of vacation, so I can't promise I'll have time to get to the bottom of this today, but I'll follow up when I'm back and let you know what I find.</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2009-08-07T10:58:10.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "221627",
    "ThreadId": "63773",
    "Html": "<p>Thanks for looking into this - I look forward to hearing back from you!</p>",
    "PostedDate": "2009-08-10T11:03:29.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224699",
    "ThreadId": "63773",
    "Html": "<p>I spent a bit of time looking at this in WinDbg/SOS just now and didn't see any smoking guns. The big memory consumption was largely due to animation-related stuff and there were more AreaDataPoints than necessary (though I hadn't forced a GC). So maybe there's a DataPoint leak and maybe there's a leak of animation-related stuff. I've opened a bug in our internal database to follow up on this further as time permits.</p>\r\n<p>Thanks again for the help!!</p>",
    "PostedDate": "2009-08-17T17:06:09.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "230351",
    "ThreadId": "63773",
    "Html": "<p>I'm running into the same (or at least similar) problem dislpaying data that changes frequently.&nbsp; Any updates? Any workarounds?</p>",
    "PostedDate": "2009-09-02T11:51:51.55-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "236926",
    "ThreadId": "63773",
    "Html": "<p>davidans -</p>\r\n<p>Since the memory consumption issue seems to be caused by the &quot;animation-related stuff&quot;, is there a way to disable the animation?&nbsp; I'd like to give that a try and see if it fixes my problem.</p>\r\n<p>Also, I am now using the &quot;Development Release 1&quot; build and still seeing the memory consumption issue.</p>\r\n<p>Thanks,</p>\r\n<p>John Myczek</p>",
    "PostedDate": "2009-09-21T08:48:08.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "362745",
    "ThreadId": "63773",
    "Html": "<p>I am having difficulty using the WPF Chart Toolkit for real time data visualization.</p>\r\n<p>As an example, I have an area chart that has seven series in it. Each series uses an in-memory collection for its source of data; each collection has about 22 elements that are X/Y coordinates. This is small set of data by almost any standard.</p>\r\n<p>When I update the data on just one series at the rate of once-per-second by setting the series&rsquo; ItemSource property, my CPU usage for the application rises from 1% to an average of 12-15%, and occasionally spikes to the 20s. If I set all seven series in a single method that is called at once-per-second, I see an average CPU usage of 60-65% with spikes as in the 90s. Reducing the interval to as little as once every five seconds didn't seem make much impact on performance either.</p>\r\n<p>I have verified through code isolation that setting the ItemSource property is what is bogging down the CPU. I have also used the WPF Performance Suite (Wndows SDK)&nbsp; to verify that it is in fact the chart control that is responsible for the usage during that time.</p>\r\n<p>I&rsquo;m not using an observable collection, because it is possible that most of my data in each series won&rsquo;t closely resemble the data set from the previous update.</p>\r\n<p>As my application runs, I have also witnessed continuous increase in memory (reaching over 100 megs) for this limited sample. I have not yet had a chance to performance tune the memory aspect of things, so this might reflect some needed optimizations.</p>\r\n<p>Based on this, I don&rsquo;t see how it could be used in a lot of &ldquo;real time visualization&rdquo; scenarios such as instrumentation applications&mdash;especially where larger sets of data might be required, multiple charts per screen, and/or other applications need to be running in the background.</p>",
    "PostedDate": "2010-02-22T10:10:34.833-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "362878",
    "ThreadId": "63773",
    "Html": "<p>You are most likely not seeing&nbsp; a memory leak.&nbsp; If you'd force a GC collection you'd most likely see the memory consumtion for the process drop to where it started. Your short lived obejct most likeley get promoted into a higher GC generation. If this is really the case there isn't any action you have to take, because the&nbsp; GC&nbsp; WILL reclaim the memory when it is needed.</p>",
    "PostedDate": "2010-02-22T14:16:02.027-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "426939",
    "ThreadId": "63773",
    "Html": "<p>Well i am seeing the same problem of memory growing over time, and it doesnt seem to be the issue of objects waiting for GC collect. If i let it run over time, it would eventually crash due to memory usage. Has there been any update on this issue?</p>",
    "PostedDate": "2010-04-02T15:17:53.75-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "426957",
    "ThreadId": "63773",
    "Html": "Can somebody post the source code that they are testing? I am having a hard time getting the data binding setup in the sample that syazi posted. Thanks",
    "PostedDate": "2010-04-02T16:22:08.717-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "426963",
    "ThreadId": "63773",
    "Html": "<pre>&nbsp;</pre>\r\n<p>The code is below(its not complete but you will get an idea). It has a&nbsp;List of 60 samples, and as new samples comes, i remove the first item and add the new&nbsp;item at the point, thus giving a &quot;moving&quot; data for charting. &nbsp;I was profiling with ANTS Memory profiler and it seems the leak is in LineDataPoints. Within&nbsp; 1 min, the memory used by instances of LineDataPoint increased by 397%. I am guessing for every data point a new instance is being created and old instances, which&nbsp;moved out of charting&nbsp;axis range,&nbsp;are not being released.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">chartingToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">Chart</span> <span style=\"color:Red\">Grid.Row</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">1</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">HorizontalAlignment</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Stretch</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Title</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=CounterHelp, Source={StaticResource CounterViewModel}}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">chart_PerfCounters</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Style</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{DynamicResource ChartStyle1}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">chartingToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">LineSeries</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">CounterLine</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Title</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Counter</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ItemsSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=SampleCollection, Source={StaticResource CounterViewModel}}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">IndependentValueBinding</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Index}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">DependentValueBinding</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Sample}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Style</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{DynamicResource LineSeriesStyle}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">chartingToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">LineSeries.DependentRangeAxis</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">chartingToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">LinearAxis</span> <span style=\"color:Red\">Orientation</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Y</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Title</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=CounterName, Source={StaticResource CounterViewModel}}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Minimum</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">0</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ShowGridLines</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">True</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n\t\t<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">chartingToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">LineSeries.DependentRangeAxis</span><span style=\"color:Blue\">&gt;</span>\r\n\t<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">chartingToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">LineSeries</span><span style=\"color:Blue\">&gt;</span>\r\n\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">chartingToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">Chart.Axes</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">chartingToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">LinearAxis</span> <span style=\"color:Red\">Orientation</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">X</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Title</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Time</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Interval</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">10</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ShowGridLines</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">True</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n\t<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">chartingToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">Chart.Axes</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">chartingToolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">Chart</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<pre><p><span style=\"color:#a31515;font-size:x-small\"><span style=\"color:#a31515;font-size:x-small\">&nbsp;</span></span>&nbsp;</p><div style=\"color:Black;background-color:White\"><pre> <span style=\"color:Blue\">class</span> DataForChart{ \r\n \r\n \tLinkedList&lt;PerfCounterViewModel.SamplePoint&gt; Samples;\r\n\t<span style=\"color:Blue\">int</span> MAX_SAMPLES = 60;\t<span style=\"color:Blue\">int</span> CurrentIndex =0;\r\n \t......\r\n<span style=\"color:Green\">//This functions gets called periodically on a timer</span>\r\n<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> UpdateGraph(<span style=\"color:Blue\">float</span> currentSample)        \r\n{        \r\n \t<span style=\"color:Blue\">if</span> (Samples.Count == MAX_SAMPLES)            \r\n\t{                \r\n\t\tSamples.RemoveFirst();            \r\n\t}        \r\n\tSamples.AddLast(<span style=\"color:Blue\">new</span> PerfCounterViewModel.SamplePoint(CurrentIndex++, RoundSample(currentSample))); \r\n\tPerfViewModel.SampleCollection = <span style=\"color:Blue\">new</span> List(Samples);        \r\n}\r\n} \r\n\r\n\r\n\r\n<span style=\"color:Blue\">class</span> PerfCounterViewModel : INotifyPropertyChanged\r\n    {\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> SamplePoint\r\n        {\r\n            <span style=\"color:Blue\">public</span> SamplePoint(<span style=\"color:Blue\">int</span> index, <span style=\"color:Blue\">float</span> sample)\r\n            {\r\n                Index = index;\r\n                Sample = sample;\r\n            }\r\n\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">int</span> Index { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n            <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">float</span> Sample { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n        }\r\n\r\n        List&lt;SamplePoint&gt; sampleCollection;\r\n        <span style=\"color:Blue\">public</span> List&lt;SamplePoint&gt; SampleCollection\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> sampleCollection; }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                sampleCollection = value;\r\n                <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    PropertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> PropertyChangedEventArgs(<span style=\"color:#A31515\">&quot;SampleCollection&quot;</span>));\r\n                }\r\n            }\r\n        }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\"></div>\r\n</pre>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-02T17:21:12.153-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "427097",
    "ThreadId": "63773",
    "Html": "<p>On further investigations, it seems when DataPoints move out of charting axis, they go into a hidden state, but they are in memory, not disposed. Which would explain the increasing memory over time with real time data. This is such a bummer, i was hoping it is just a bug.</p>\r\n<p>Now i probably need to go hunting for a 3rd party control :(, unless they add the feature to only keep specified number or visible DataPoints in memory.</p>",
    "PostedDate": "2010-04-03T12:11:27.697-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]