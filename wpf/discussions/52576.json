[
  {
    "Id": "176681",
    "ThreadId": "52576",
    "Html": "<p><span lang=EN-GB style=\"color:#000000\">Hi,</span></p>\r\n<p><span lang=EN-GB style=\"color:#000000\">I am having some problems setting up some custom databindings for columns in a datagrid in my code behind file. I see the data that I expect after setting up the bindings, and managing the bindings in response occasional to changes in the columns I want to display seems to work fine. However, I often see some odd behaviour in the output window that indicates that the binding are failing. This is in a situation where the columns have been removed from the datagrid and suggests that I am not completely clearing the bindings.<br>\r\n<br>\r\nI set up the binding to the column as follows:<br>\r\n<br>\r\nDataGridTextColumn newColumn = new DataGridTextColumn();<br>\r\nnewColumn.Binding = new Binding(&quot;MyPath&quot;);<br>\r\n<br>\r\nLater, I remove the DataGridColumns from the grid. However, even though they are no longer in the columns collection (and presumably the visual tree), I see binding exceptions which suggest that the bindings are still hooked up.<br>\r\n<br>\r\nAs well as removing the columns from the column collection, I have attempted to set the binding(s) to null before the columns are removed, but this does not fix the issue.<br>\r\n<br>\r\nReading up on the subject a bit more suggests that I might need to clear the bindings using the following syntax:<br>\r\n<br>\r\nDataGridBoundColumn dgColumn = this.mainTable.Columns[i] as DataGridBoundColumn;<br>\r\nBindingOperations.ClearBinding(dgColumn, DataGridColumn.PropertyName);<br>\r\n<br>\r\nHowever, I am not sure what parameters to pass to the ClearBinding method, <em>in particular, what is the property name of the binding property on a DataGridBoundColumn? <br>\r\n</em><br>\r\nClearly I'm doing something wrong but don't know whether I'm on the right track to solving the issue and it's driving me mad!<br>\r\n<br>\r\nMax<br>\r\n<br>\r\nAs an aside, I'm doing the manual binding in order to flatten a list of objects so that it maps to a single row.</span><span style=\"color:#eeeeee\"> </span></p>\r\n",
    "PostedDate": "2009-04-07T09:53:05.407-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "176799",
    "ThreadId": "52576",
    "Html": "Can you please send us the output window traces and also a repro project if possible.\r\n",
    "PostedDate": "2009-04-07T13:22:58.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "176803",
    "ThreadId": "52576",
    "Html": "Hi, will try to sort something out tomorrow. \r\n",
    "PostedDate": "2009-04-07T13:28:11.34-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "177175",
    "ThreadId": "52576",
    "Html": "Ok, I am learning more about what is going on...<br>\r\n<br>\r\nI have a datagrid whose ItemSource is bound to a field CurrentStats of type ObservableCollection&lt;MyStats&gt;. The MyStats type contains a field &quot;TheStats&quot; of type ObervableCollection&lt;StatsGroup&gt;. The DataGridColumns for the DataGrid have their bindings created in code so that the columns are bound to different properties on StatsGroup, for all StatsGroups in the collection. The result is that I have a table like so (data in MyStats is flattened into a single row:)<br>\r\n<br>\r\n                Item 1 StatsGroup PropA | Item 1 StatsGroup PropB |   Item 2 StatsGroup PropA | Item 2 StatsGroup PropB |  Item 3 StatsGroup PropA | Item 3 StatsGroup PropB | etc<br>\r\nMin       |                                           |                                        |                                            |                                         |                                          |                                         |<br>\r\nMax      |                                           |                                        |                                            |                                         |                                          |                                         |<br>\r\nAverage|                                           |                                        |                                            |                                         |                                          |                                         | <br>\r\n<br>\r\nWhen I want to recalculate the statistics shown in the grid (in response to a change in the raw data), I clear the CurrentStats ObservableCollection and then update the MyStats data before adding it back to the collection. NB The datagrid appears to clear at this point. However, I see a cascade of binding errors in the output window as the private MyStats fields are recalculated, but before they are added back into the collection. These errors are of the form:<br>\r\n<br>\r\n<br>\r\n<span style=\"font-size:12px;color:#ff0000\">\r\n<p>System.Windows.Data Error: 16 : Cannot get 'Item[]' value (type 'StatsGroup') from 'TheStats' (type 'ObservableCollection`1'). BindingExpression:Path=TheStats[0].PropA; DataItem=MyStats' (HashCode=1605556); target element is 'TextBlock' (Name=''); target property is 'Text' (type 'String') TargetInvocationException:'System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.</p>\r\n<p>Parameter name: index</p>\r\n<p>at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)<br>\r\nat System.ThrowHelper.ThrowArgumentOutOfRangeException()<br>\r\nat System.Collections.Generic.List`1.get_Item(Int32 index)<br>\r\nat System.Collections.ObjectModel.Collection`1.get_Item(Int32 index)<br>\r\n--- End of inner exception stack trace ---</p>\r\n<p>at System.RuntimeMethodHandle._InvokeMethodFast(Object target, Object[] arguments, SignatureStruct&amp; sig, MethodAttributes methodAttributes, RuntimeTypeHandle typeOwner)<br>\r\nat System.RuntimeMethodHandle.InvokeMethodFast(Object target, Object[] arguments, Signature sig, MethodAttributes methodAttributes, RuntimeTypeHandle typeOwner)<br>\r\nat System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)<br>\r\nat System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)<br>\r\nat System.Reflection.RuntimePropertyInfo.GetValue(Object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture)<br>\r\nat MS.Internal.Data.PropertyPathWorker.GetValue(Object item, Int32 level)<br>\r\nat MS.Internal.Data.PropertyPathWorker.RawValue(Int32 k)'</p>\r\n</span><span style=\"font-size:15px;color:#000000\">Note, I have also attempted to clear the DataGrid ItemSource and then set it once the stats have been updated, but it makes no difference. It seems as though the grid is still bound to the underlying data as it updates, even though I have cleared or reset the collection.<br>\r\n</span>\r\n",
    "PostedDate": "2009-04-08T07:13:51.753-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "177509",
    "ThreadId": "52576",
    "Html": "Ok,<br>\r\n<br>\r\nI can now hazard a guess as to what is going wrong. In my code, when I update the MyStats object(s) I call Clear on the TheStats ObservableCollection as so:<br>\r\n<br>\r\n// About to update the stats, clear out the current info<br>\r\nMyStatsMinimum.TheStats.Clear();<br>\r\nMyStatsMaximum.TheStats.Clear();<br>\r\nMyStatsAverage.TheStats.Clear();<br>\r\n<br>\r\nStepping over these calls in the debugger results in the binding exceptions being thrown. This is even if there is <strong>no</strong> data in the grid (rows and columns have been removed before the update). To overcome this problem, I now create new objects (MyStatsMinimum = new ..., etc) rather than clearing the TheStats collections.<br>\r\n<br>\r\nPerhaps this has something to do with the way ObservableCollections raise CollectionChanged events. When items are added or removed, the arguments to the event include a list of the items removed or added from the collection. However, if Clear is called, you still get a CollectionChanged event, (this time with the Reset action), but no information is passed to the event handler about the items that were removed in response to the Clear call. I've always been surprised by this design decision, since it means you may have to cache information about what was in the collection before it was cleared in order to properly clean up any hooks*. Perhaps there is a handler for the bindings that is falling into this trap somewhere?<br>\r\n<br>\r\n* Some people have started to write versions of the ObservableCollection that prevent this behaviour or manually iterate over the items in response to the clear call. I think you can find an example in the SilverLight charting controls.\r\n",
    "PostedDate": "2009-04-09T01:44:35.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]