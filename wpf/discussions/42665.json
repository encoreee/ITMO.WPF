[
  {
    "Id": "141802",
    "ThreadId": "42665",
    "Html": "<p>Some data grids will be read only as a whole, some columns might be read only. However some of my data grids have rows that need to be read only. This is not supported in the October 2008 release of the WPFToolBox.</p>\r\n<p>Since there was no work around for my problem, I modified the code <a href=\"http://i-zaak.eu/Sources/DataGridRow IsReadOnly Feature.zip\"><span style=\"color:#0000cc\">Sources</span></a>.</p>\r\n<p>The IsReadOnly behavior of the cell is now in (<span style=\"color:#0080ff\">DataGridCell.cs</span>):</p>\r\n<p>private static object OnCoerceIsReadOnly(DependencyObject d, object baseValue)<br>\r\n{<br>\r\n    var cell = d as DataGridCell;<br>\r\n    <span style=\"color:#ff0000\">var row = cell.RowOwner;</span><br>\r\n    var column = cell.Column;<br>\r\n    var dataGrid = cell.DataGridOwner;<br>\r\n    return DataGridHelper.GetCoercedTransferPropertyValue(<br>\r\n        cell, <br>\r\n        baseValue, <br>\r\n        IsReadOnlyProperty,<br>\r\n<span style=\"color:#ff0000\">        row,<br>\r\n        DataGridRow.IsReadOnlyProperty,</span><br>\r\n        column,   <br>\r\n        DataGridColumn.IsReadOnlyProperty,<br>\r\n        dataGrid, <br>\r\n        DataGrid.IsReadOnlyProperty);<br>\r\n} </p>\r\n<p>Of course we needed to add the DataGridColumn.IsReadOnlyProperty in (<span style=\"color:#0080ff\">DataGridColumn.cs</span>), create a backing property etc. For more details I refer to the attached code. </p>\r\n<p>The last change was made to DataGridHelper in (<span style=\"color:#0080ff\">DataGridHelper.cs</span>), there was no overloaded method yet for GetCoercedTransferPropertyValue with 4 levels available. </p>\r\n<p>How to use it? </p>\r\n<p>A seriously abbreviated code sample would be: </p>\r\n<p>&lt;wpftoolkit:DataGrid&gt;<br>\r\n    &lt;wpftoolkit:DataGrid.RowStyle&gt;<br>\r\n        &lt;Style TargetType=&quot;{x:Type wpftoolkit:DataGridRow}&quot;&gt;<br>\r\n            &lt;Style.Triggers&gt;<br>\r\n                &lt;DataTrigger Binding=&quot;{Binding Path=Locked}&quot; Value=&quot;true&quot;&gt;<br>\r\n                    <span style=\"color:#ff0000\">&lt;Setter Property=&quot;IsReadOnly&quot; Value=&quot;true&quot; /&gt;<br>\r\n</span>                &lt;/DataTrigger&gt;<br>\r\n            &lt;/Style.Triggers&gt;<br>\r\n        &lt;/Style&gt;<br>\r\n    &lt;/wpftoolkit:DataGrid.RowStyle&gt;<br>\r\n&lt;/wpftoolkit:DataGrid&gt; </p>\r\n<p>As shown in this snippet, we can now employ a nice data trigger on the row data item to make the row read only when we want it to be.<br>\r\n<br>\r\nCan someone let me know if my efforts are usable?<br>\r\n<br>\r\nCheers,<br>\r\n   Jan Izaak</p>\r\n",
    "PostedDate": "2008-12-19T02:40:16.763-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "141811",
    "ThreadId": "42665",
    "Html": "By no means do I mean to belittle your efforts, but did you look into implementing a BeginningEdit event, in which you can set e.Cancel to true to prevent the row from entering edit mode?<br>\r\n",
    "PostedDate": "2008-12-19T04:31:55.26-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "141924",
    "ThreadId": "42665",
    "Html": "Thats a very good suggestion and i confess i did not try that yet.<br>\r\n<br>\r\nHowever, I now have generic styles for all my columns that show a different cell style when IsReadOnly is true (to indicate to the user that it cannot be editted). In other words my read-only columns and read-only row cells use the same style in all my grids. <br>\r\n<br>\r\nI'm also trying to have a pure XAML user interface that is mostly data driven. \r\n",
    "PostedDate": "2008-12-19T11:14:19.773-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "503475",
    "ThreadId": "42665",
    "Html": "<p>DataGridRow isreadonly property, does it work with latest .net wpf datagrid?</p>",
    "PostedDate": "2010-10-07T01:32:54.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]