[
  {
    "Id": "223095",
    "ThreadId": "65506",
    "Html": "<p>Hi,</p>\r\n<p>I have an important performance issue that I had already pointed out through this post http://wpf.codeplex.com/Thread/View.aspx?ThreadId=64524 .</p>\r\n<p>I am just trying to refresh a datagrid (10 columns) each 500ms and each 500ms I add 20 items to the datagrid.</p>\r\n<p>The program monopolizes a lot of CPU usage, as you can monitor it and judge by yourself. With an Intel Core duo 2 Ghz and 3Gb DDR2, the program uses 40% of my CPU!!!</p>\r\n<p>So after a while, the dataGrid becomes out of control and you cannot event interact with it or close your window.</p>\r\n<p>Please, can anyone help me on this?</p>\r\n<p>I managed to reproduce the problem, below is the simple code.</p>\r\n<p>Thanks,</p>\r\n<p>Kamel</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Xaml code:</p>\r\n<p>&lt;Window x:Class=&quot;DG_ListCollectionView.Window1&quot;<br>&nbsp;&nbsp;&nbsp; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>&nbsp;&nbsp;&nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>&nbsp;&nbsp;&nbsp; Title=&quot;Window1&quot; Height=&quot;1000&quot; Width=&quot;1000&quot; xmlns:my=&quot;http://schemas.microsoft.com/wpf/2008/toolkit&quot;&gt;<br>&nbsp;&nbsp;&nbsp; &lt;Grid&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;my:DataGrid AutoGenerateColumns=&quot;True&quot; Name=&quot;dataGrid1&quot; /&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/Grid&gt;<br>&lt;/Window&gt;</p>\r\n<p>&nbsp;</p>\r\n<p>C# code:</p>\r\n<p>using System;<br>using System.Collections.Generic;<br>using System.Linq;<br>using System.Text;<br>using System.Windows;<br>using System.Windows.Controls;<br>using System.Windows.Data;<br>using System.Windows.Documents;<br>using System.Windows.Input;<br>using System.Windows.Media;<br>using System.Windows.Media.Imaging;<br>using System.Windows.Navigation;<br>using System.Windows.Shapes;<br>using System.Timers;<br><br>namespace DG_ListCollectionView<br>{<br>&nbsp;&nbsp;&nbsp; public partial class Window1 : Window<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private List&lt;Trade&gt; _ListOfTrade = new List&lt;Trade&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private ListCollectionView collectionView;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Window1()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EditListOfTrade();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; collectionView = new ListCollectionView(_ListOfTrade);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // We create a timer which will send an event each 500ms to refresh the dataGrid<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Timer aTimer = new Timer();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aTimer.Elapsed += new ElapsedEventHandler(aTimer_Elapsed);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aTimer.Interval = 500;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aTimer.Enabled = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dataGrid1.ItemsSource = collectionView;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void aTimer_Elapsed(object sender, ElapsedEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EditListOfTrade();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dataGrid1.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority.Normal,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (System.Threading.ThreadStart)delegate()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; collectionView.Refresh();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void EditListOfTrade()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 20; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trade trade = new Trade();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _ListOfTrade.Add(trade);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; class Trade<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private Random random = new Random();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Field1 { get { return random.NextDouble(); } }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Field2 { get { return random.NextDouble(); } }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Field3 { get { return random.NextDouble(); } }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Field4 { get { return random.NextDouble(); } }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Field5 { get { return random.NextDouble(); } }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Field6 { get { return random.NextDouble(); } }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Field7 { get { return random.NextDouble(); } }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Field8 { get { return random.NextDouble(); } }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Field9 { get { return random.NextDouble(); } }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public double Field10 { get { return random.NextDouble(); } }<br>&nbsp;&nbsp;&nbsp; }<br>}</p>",
    "PostedDate": "2009-08-13T13:02:10.467-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "229882",
    "ThreadId": "65506",
    "Html": "<p>Hi kawone,</p>\r\n<p>Refreshing the entire collection is extremely expensive, because the datagrid now needs to throw away and recreate all of its rows and all of its bindings.&nbsp; A much faster way is to implement INotifyPropertyChanged on anything you're displaying in the UI, and then raise the PropertyChanged event when the item needs to be updated.&nbsp; Also, for binding to collections, INotifyCollectionChanged (which ObservableCollection gives you for free) will tell the UI whenever items in the list are added and removed, allowing them to be updated individually instead of needing to recreate the UI for the entire collection.</p>\r\n<p>This updated code runs much, much faster.&nbsp; Let me know if you have any problems or questions about it.&nbsp; Thanks!!</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> System.Windows;\r\n<span style=\"color:Blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:Blue\">using</span> System.Windows.Data;\r\n<span style=\"color:Blue\">using</span> System.Windows.Documents;\r\n<span style=\"color:Blue\">using</span> System.Windows.Input;\r\n<span style=\"color:Blue\">using</span> System.Windows.Media;\r\n<span style=\"color:Blue\">using</span> System.Windows.Media.Imaging;\r\n<span style=\"color:Blue\">using</span> System.Windows.Navigation;\r\n<span style=\"color:Blue\">using</span> System.Windows.Shapes;\r\n<span style=\"color:Blue\">using</span> System.Timers;\r\n<span style=\"color:Blue\">using</span> System.ComponentModel;\r\n\r\n<span style=\"color:Blue\">namespace</span> DG_ListCollectionView\r\n{\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">partial</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Window1 : Window\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> List&lt;Trade&gt; _ListOfTrade = <span style=\"color:Blue\">new</span> List&lt;Trade&gt;();\r\n        <span style=\"color:Blue\">private</span> ListCollectionView collectionView;\r\n\r\n        <span style=\"color:Blue\">public</span> Window1()\r\n        {\r\n            InitializeComponent();\r\n\r\n            EditListOfTrade();\r\n\r\n            collectionView = <span style=\"color:Blue\">new</span> ListCollectionView(_ListOfTrade);\r\n\r\n            <span style=\"color:Green\">// We create a timer which will send an event each 500ms to refresh the dataGrid</span>\r\n            Timer aTimer = <span style=\"color:Blue\">new</span> Timer();\r\n            aTimer.Elapsed += <span style=\"color:Blue\">new</span> ElapsedEventHandler(aTimer_Elapsed);\r\n            aTimer.Interval = 500;\r\n            aTimer.Enabled = <span style=\"color:Blue\">true</span>;\r\n\r\n            dataGrid1.ItemsSource = collectionView;\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> aTimer_Elapsed(<span style=\"color:Blue\">object</span> sender, ElapsedEventArgs e)\r\n        {\r\n            EditListOfTrade();\r\n\r\n            dataGrid1.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority.Normal,\r\n                  (System.Threading.ThreadStart)<span style=\"color:Blue\">delegate</span>()\r\n                  {\r\n                      <span style=\"color:Green\">//collectionView.Refresh();</span>\r\n                      <span style=\"color:Blue\">foreach</span> (Trade trade <span style=\"color:Blue\">in</span> _ListOfTrade)\r\n                      {\r\n                          trade.Refresh();\r\n                      }\r\n                  }\r\n                  );\r\n        }\r\n\r\n\r\n        <span style=\"color:Blue\">void</span> EditListOfTrade()\r\n        {\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; 20; i++)\r\n            {\r\n                Trade trade = <span style=\"color:Blue\">new</span> Trade();\r\n                _ListOfTrade.Add(trade);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Trade : INotifyPropertyChanged\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> Random random = <span style=\"color:Blue\">new</span> Random();\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Field1 { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> random.NextDouble(); } }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Field2 { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> random.NextDouble(); } }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Field3 { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> random.NextDouble(); } }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Field4 { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> random.NextDouble(); } }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Field5 { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> random.NextDouble(); } }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Field6 { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> random.NextDouble(); } }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Field7 { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> random.NextDouble(); } }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Field8 { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> random.NextDouble(); } }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Field9 { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> random.NextDouble(); } }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">double</span> Field10 { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> random.NextDouble(); } }\r\n\r\n\r\n\r\n\r\n\r\n        <span style=\"color:Blue\">#region</span> INotifyPropertyChanged Members\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n        <span style=\"color:Blue\">#endregion</span>\r\n\r\n        <span style=\"color:Blue\">internal</span> <span style=\"color:Blue\">void</span> Refresh()\r\n        {\r\n            <span style=\"color:Blue\">if</span> (PropertyChanged != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                <span style=\"color:Green\">// Format is PropertyChanged(&quot;PropertyName&quot;), where &quot;&quot; is a shortcut for All Properties On This Class</span>\r\n                PropertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> PropertyChangedEventArgs(<span style=\"color:#A31515\">&quot;&quot;</span>));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-01T13:49:47.117-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "230229",
    "ThreadId": "65506",
    "Html": "<p>Hi,</p>\r\n<p>&nbsp;</p>\r\n<p>In the code above, I was trying to add 20 new trade at each refresh (code in the EditListOfTrade method).</p>\r\n<p>However this is not the result expected as only the 20 first rows are refreshed (the 20 that were in the constructor of the listCollectionView) and no row is added to the datagrid.</p>\r\n<p>Please, can you help me to achieve this?</p>",
    "PostedDate": "2009-09-02T07:56:04.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "230239",
    "ThreadId": "65506",
    "Html": "<p>Hi,</p>\r\n<p>As you explained above &quot;for binding to collections, INotifyCollectionChanged (which ObservableCollection gives you for free) will tell the UI whenever items in the list are added and removed, allowing them to be updated individually instead of needing to recreate the UI for the entire collection&quot;, I tried to replace dataGrid1.ItemsSource = collectionView by dataGrid1.ItemsSource = new ObservableCollection&lt;Trade&gt;(_ListOfTrade) but this is not working.</p>\r\n<p>Can you explain me the logic behind this?</p>\r\n<p>Thanks,</p>\r\n<p>Kamel</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-02T08:19:39.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]