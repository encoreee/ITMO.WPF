[
  {
    "Id": "158199",
    "ThreadId": "47276",
    "Html": "I have a data grid where my row headers are bound to a property of the row that is being displayed.&nbsp; If the value of the property changes to something longer (it's a string), the row header gets wider.&nbsp; However, if the value changes back to something small, the row headers never restore to their original sizes.&nbsp; Here is a simple example which demonstrates this issue.&nbsp; The value of the row header is bound to the value in the first column.&nbsp; If you type into the first column, the column gets wider, okay.&nbsp; Hit enter, the row header gets wider too, that's good.&nbsp; Now change the value in the column back to something short and hit enter.&nbsp; The column does not get narrower, but I'm not concerned about that right now.&nbsp; The problem is that the row header never gets smaller again.&nbsp; I managed to work around this in one case by manually setting the DataGrid.RowHeaderWidth to zero and then back to NaN, then calling UpdateLayout, which made the row header get narrow again but left me extra white space to the right of the last column.<br>\r\n<br>\r\nIs there anything I can do so that my grid will get bigger when the row headers are big, and then get smaller again when the row headers are small?&nbsp; I don't want to waste space on the screen!<br>\r\n<br>\r\n&lt;Window x:Class=&quot;DataGridExample.Window1&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:dg=&quot;http://schemas.microsoft.com/wpf/2008/toolkit&quot;<br>\r\n&nbsp;&nbsp;&nbsp; Title=&quot;Window1&quot; Height=&quot;300&quot; Width=&quot;300&quot;&gt;<br>\r\n&nbsp; &lt;Grid&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;dg:DataGrid AutoGenerateColumns=&quot;False&quot; ItemsSource=&quot;{Binding Data}&quot; HorizontalAlignment=&quot;Left&quot; VerticalAlignment=&quot;Top&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name=&quot;dgMain&quot; HeadersVisibility=&quot;All&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dg:DataGrid.Columns&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dg:DataGridTextColumn Binding=&quot;{Binding Name}&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dg:DataGridTextColumn Binding=&quot;{Binding Description}&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dg:DataGrid.Columns&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dg:DataGrid.RowHeaderStyle&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Style TargetType=&quot;{x:Type dg:DataGridRowHeader}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Content&quot; Value=&quot;{Binding Name}&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Style&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dg:DataGrid.RowHeaderStyle&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/dg:DataGrid&gt;<br>\r\n&nbsp; &lt;/Grid&gt;<br>\r\n&lt;/Window&gt;<br>\r\n<br>\r\n&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp; /// Interaction logic for Window1.xaml<br>\r\n&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp; public partial class Window1 : Window<br>\r\n&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; public Window1()<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataContext = this;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _Data.Add(new TestData(&quot;foo&quot;, &quot;bar&quot;));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _Data.Add(new TestData(&quot;baz&quot;, &quot;foo&quot;));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _Data.Add(new TestData(&quot;bar&quot;, &quot;baz&quot;));<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; ObservableCollection&lt;TestData&gt; _Data = new ObservableCollection&lt;TestData&gt;();<br>\r\n&nbsp;&nbsp;&nbsp; public ObservableCollection&lt;TestData&gt; Data<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return _Data; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp; }<br>\r\n<br>\r\n&nbsp; public class TestData : INotifyPropertyChanged<br>\r\n&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; public TestData(string name, string description)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name = name;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Description = description;<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; string _Name;<br>\r\n&nbsp;&nbsp;&nbsp; public string Name<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return _Name; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _Name = value;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnPropertyChanged(&quot;Name&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; string _Description;<br>\r\n&nbsp;&nbsp;&nbsp; public string Description<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return _Description; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _Description = value;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnPropertyChanged(&quot;Description&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; #region INotifyPropertyChanged Members<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; public event PropertyChangedEventHandler PropertyChanged;<br>\r\n&nbsp;&nbsp;&nbsp; void OnPropertyChanged(string prop) { if (PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(prop)); }<br>\r\n&nbsp;&nbsp;&nbsp; #endregion<br>\r\n&nbsp; }<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2009-02-16T11:36:04.903-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]