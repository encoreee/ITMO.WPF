[
  {
    "Id": "130920",
    "ThreadId": "39458",
    "Html": "Hello guys,<br>\r\n<br>\r\nIf I try to do something like this, the program crashes if EnableRowVirtualization is true:<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; itemCollection.Add(item);<br>\r\n<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;((ListCollectionView)dataGrid.ItemsSource).Refresh();<br>\r\n<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;dataGrid.SelectedItem = item;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; dataGrid.ScrollIntoView(item);<br>\r\n<br>\r\nwhere data is binded liked this:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; itemCollection = new GroupCollection().Load();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ListCollectionView dgcv = new ListCollectionView(itemCollection) { Filter = SearchFilter };<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dataGrid.ItemsSource = dgcv;<br>\r\n<br>\r\nScrollIntoView fails with a NullReferenceException. The exception is thrown from VirtualizingStackPanel<span>.<br>\r\n</span><span></span><span></span><br>\r\nIf EnableRowVirtualization is false, nothing happens. The code runs just fine. Can anybody tell why this happens?<br>\r\n<br>\r\nThanks &amp; Regards,<br>\r\nYogesh.<br>\r\n",
    "PostedDate": "2008-11-07T12:41:56.447-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131013",
    "ThreadId": "39458",
    "Html": "Guys...<br>\r\n<br>\r\nAnybody???<br>\r\n<br>\r\nWhy ScrollIntoView fails when EnableRowVirtualization == false? I cannot disable EnableRowVirtualization as it slows the grid as hell (table contains 100,000 rows). \r\n",
    "PostedDate": "2008-11-08T05:31:21.143-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131039",
    "ThreadId": "39458",
    "Html": "Can you post a simple sample of XAML and code behind which crashes with Null ref exception?\r\n",
    "PostedDate": "2008-11-08T10:23:12.46-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131048",
    "ThreadId": "39458",
    "Html": "Hello<br>\r\nI have this problem too..<br>\r\nwe just bind grid to dataview in better way we have<br>\r\nCollectionViewSource viewSource;<br>\r\nviewSource.Source = dataview<br>\r\ngtagrid.ItemsSource = viewSource.View as BindingListCollectionView;<br>\r\n<br>\r\nafter we want to set new item in grid ( in currentitem cganged event of   viewSource.View)<br>\r\n&nbsp; void View_CurrentChanged(object sender, EventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (entityGrid.CurrentItem != viewSource.View.CurrentItem)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; entityGrid.CurrentItem = viewSource.View.CurrentItem;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\nthis error raised.<br>\r\nalso after we set filter of dataview again this error happened too.<br>\r\n/////////////////////<br>\r\nfor us if disable <br>\r\nEnableRowVirtualization = false<br>\r\n&nbsp;and BringIntoView a row, that row has not any cell in content and can not focus a cell in it.<br>\r\n<br>\r\nplease any help... \r\n",
    "PostedDate": "2008-11-08T11:49:22.173-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131093",
    "ThreadId": "39458",
    "Html": "I am posting only portions for reference. Here is the xaml:<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;toolkit:DataGrid Style=&quot;{StaticResource DataGridStyle}&quot; x:Name=&quot;dataGrid&quot; Grid.Row=&quot;1&quot; Height=&quot;250&quot; Width=&quot;500&quot; <br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ItemsSource=&quot;{Binding}&quot; IsReadOnly=&quot;True&quot; Sorting=&quot;dataGrid_Sorting&quot; Margin=&quot;10,0,10,0&quot;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;EnableRowVirtualization=&quot;True&quot; /&gt;<br>\r\n<br>\r\nHere is the code behind:<br>\r\nLoaded:<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; itemCollection = new GroupCollection(); // itemCollection is a private member<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; ListCollectionView dgcv = new ListCollectionView(itemCollection) { Filter = SearchFilter };<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;dataGrid.ItemsSource = dgcv;<br>\r\n<br>\r\nNow if I add a new item on the fly and try to use ScrollIntoView, the program crashes. The crash does not happen inside toolkit, but inside PresentationCore.dll. You can easily reproduce the error (atleast I did) with a large number of rows and using Filter with ListViewCollection as the datasource.<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;itemCollection.Add(item);<br>\r\n<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;((ListCollectionView)dataGrid.ItemsSource).Refresh();<br>\r\n<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;dataGrid.SelectedItem = item;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;dataGrid.Items.Refresh(); // This hardly makes a difference<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;ScrollIntoView(item); // The program crashes here if EnableRowVirtualization is true<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-08T22:37:31.117-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131138",
    "ThreadId": "39458",
    "Html": "hello<br>\r\nany help<br>\r\nthese are my stack trace :<br>\r\n//////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\<br>\r\n&gt;&nbsp;&nbsp;&nbsp; PresentationFramework.dll!System.Windows.Controls.VirtualizingStackPanel.InsertContainer(int childIndex = 0, System.Windows.UIElement container = {Microsoft.Windows.Controls.DataGridRow}, bool isRecycled) + 0x144 bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; PresentationFramework.dll!System.Windows.Controls.VirtualizingStackPanel.AddContainerFromGenerator(int childIndex, System.Windows.UIElement child, bool newlyRealized) + 0x29 bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; PresentationFramework.dll!System.Windows.Controls.VirtualizingStackPanel.BringIndexIntoView(int index) + 0x98 bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WPFToolkit.dll!Microsoft.Windows.Controls.Primitives.DataGridRowsPresenter.InternalBringIndexIntoView(int index = 19) Line 48 + 0xe bytes&nbsp;&nbsp;&nbsp; C#<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WPFToolkit.dll!Microsoft.Windows.Controls.DataGrid.ScrollRowIntoView(object item = {System.Data.DataRowView}) Line 1617 + 0xd bytes&nbsp;&nbsp;&nbsp; C#<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WPFToolkit.dll!Microsoft.Windows.Controls.DataGrid.ScrollCellIntoView(object item = {System.Data.DataRowView}, Microsoft.Windows.Controls.DataGridColumn column = {Tools.WPF.UI.EntityGridViewColumn}) Line 1638 + 0xb bytes&nbsp;&nbsp;&nbsp; C#<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WPFToolkit.dll!Microsoft.Windows.Controls.DataGrid.OnCurrentCellChanged(System.Windows.DependencyObject d = {Tools.WPF.UI.EntityGridView Items.Count:40 Grid Name : grdPrinterInfo}, System.Windows.DependencyPropertyChangedEventArgs e = {System.Windows.DependencyPropertyChangedEventArgs}) Line 2832 + 0x3e bytes&nbsp;&nbsp;&nbsp; C#<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WindowsBase.dll!System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) + 0x4a bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; PresentationFramework.dll!System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) + 0x50 bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WindowsBase.dll!System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs args) + 0x2c bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WindowsBase.dll!System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex entryIndex = {System.Windows.EntryIndex}, System.Windows.DependencyProperty dp = {CurrentCell}, System.Windows.PropertyMetadata metadata, System.Windows.EffectiveValueEntry oldEntry, ref System.Windows.EffectiveValueEntry newEntry = {System.Windows.EffectiveValueEntry}, bool coerceWithDeferredReference, System.Windows.OperationType operationType) + 0x515 bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, System.Windows.OperationType operationType, bool isInternal) + 0x1eb bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WindowsBase.dll!System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty dp, object value) + 0x2e bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WPFToolkit.dll!Microsoft.Windows.Controls.DataGrid.CurrentCell.set(Microsoft.Windows.Controls.DataGridCellInfo value = {Microsoft.Windows.Controls.DataGridCellInfo}) Line 2775 + 0x45 bytes&nbsp;&nbsp;&nbsp; C#<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WPFToolkit.dll!Microsoft.Windows.Controls.DataGrid.OnCurrentItemChanged(System.Windows.DependencyObject d = {Tools.WPF.UI.EntityGridView Items.Count:40 Grid Name : grdPrinterInfo}, System.Windows.DependencyPropertyChangedEventArgs e = {System.Windows.DependencyPropertyChangedEventArgs}) Line 2729 + 0x3d bytes&nbsp;&nbsp;&nbsp; C#<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WindowsBase.dll!System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) + 0x4a bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; PresentationFramework.dll!System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) + 0x50 bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WindowsBase.dll!System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs args) + 0x2c bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WindowsBase.dll!System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex entryIndex = {System.Windows.EntryIndex}, System.Windows.DependencyProperty dp = {CurrentItem}, System.Windows.PropertyMetadata metadata, System.Windows.EffectiveValueEntry oldEntry, ref System.Windows.EffectiveValueEntry newEntry = {System.Windows.EffectiveValueEntry}, bool coerceWithDeferredReference, System.Windows.OperationType operationType) + 0x515 bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WindowsBase.dll!System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty dp, object value, System.Windows.PropertyMetadata metadata, bool coerceWithDeferredReference, System.Windows.OperationType operationType, bool isInternal) + 0x1eb bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WindowsBase.dll!System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty dp, object value) + 0x2e bytes&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; WPFToolkit.dll!Microsoft.Windows.Controls.DataGrid.CurrentItem.set(object value = {System.Data.DataRowView}) Line 2711 + 0x12 bytes&nbsp;&nbsp;&nbsp; C#<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; Tools.WPF.exe!Tools.WPF.UI.EntityBindingSource.View_CurrentChanged(object sender = {System.Windows.Data.BindingListCollectionView}, System.EventArgs e = {System.EventArgs}) Line 193 + 0x2f bytes&nbsp;&nbsp;&nbsp; C#<br>\r\n",
    "PostedDate": "2008-11-09T04:53:34.55-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131198",
    "ThreadId": "39458",
    "Html": "hello again<br>\r\nwe trace program and use dataGrid.BeginInvoke() that call datagrid.scrollintoview&nbsp; after dataview( source of datagrid)&nbsp; changed,<br>\r\nIt does good without any errors but&nbsp; after&nbsp; we&nbsp; insert new datarow in dataview again have problem . we think <br>\r\nmaybee (ItemContainerGenerator.Status == GeneratorStatus.ContainersGenerated) does not work good because before call datagrid.scrollintoview<br>\r\nItemContainerGenerator.Status == GeneratorStatus.ContainersGenerate is true but we see grid in &quot;moole visualizer &quot; grid does not draw and there are not any <br>\r\ndatarowgrid.<br>\r\n///<br>\r\nsorry we need know where all rows in virtual panel are created is there an event?<br>\r\n<br>\r\n<br>\r\n<em><strong>is it a bug or we are wrong.....</strong></em><br>\r\nany help... \r\n",
    "PostedDate": "2008-11-09T11:29:36.823-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131602",
    "ThreadId": "39458",
    "Html": "again hello&nbsp;&nbsp;  <br>\r\nthere are not any solutions..........<br>\r\nplease help.....<br>\r\n",
    "PostedDate": "2008-11-11T00:25:51.793-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131993",
    "ThreadId": "39458",
    "Html": "yjagota,<br>\r\n<br>\r\nFor your issue, try this instead, <span style=\"font-size:13px\">\r\n<p>dataGrid.ScrollIntoView(dataGrid.Items[dataGrid.Items.Count -1]);</p>\r\n</span>\r\n",
    "PostedDate": "2008-11-12T06:06:41.583-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132047",
    "ThreadId": "39458",
    "Html": "Didn't solved the issue Vincent.<br>\r\n",
    "PostedDate": "2008-11-12T09:21:09.82-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132784",
    "ThreadId": "39458",
    "Html": "@Vincent:<br>\r\n<br>\r\nI dug up a little deeper and found that the exception is raised in VirtualizingStackPanel class, inside InsertContainer method.<br>\r\n<br>\r\nThe block which causes the exception is:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (IsVirtualizing &amp;&amp; InRecyclingMode) <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _realizedChildren.Insert(childIndex, container);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br>\r\n<br>\r\nThere is no check for _realizedChildren is null. In case of DataGrid, it is. Calling the private method EnsureRealizedChildren might have cured the issue, but I don't know why it's not called.<br>\r\n<br>\r\nSo, for the time being just disabling recycling mode solves the issue, but this is also a temporary solution as this solution uses more memory. <br>\r\n<br>\r\nI hope you will look into this. <br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-11-14T23:46:13.887-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "135368",
    "ThreadId": "39458",
    "Html": "<span style=\"font-size:13px\">\r\n<p><a href=\"http://www.codeplex.com/site/users/view/yjagota\" id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl20_UserNameLink\">yjagota</a>,<br>\r\nDoes the ItemsSource of the DataGrid implement INotifyCollectionChanged interface ? <br>\r\n<br>\r\nWhen ItemsSource is modified and INotifyCollectionChanged  is not implemented, DataGrid is not aware of these changes. That could be the reason for these exceptions. <br>\r\n<br>\r\nTry this as a work around. Set the ItemsSource to null, make changes to your ItemsSource (add/delete/clear). Now set ItemsSource again. <br>\r\n<br>\r\ndataGrid.ItemsSource = null;<br>\r\nitemCollection.Add(item);<br>\r\nListCollectionView dgcv = new ListCollectionView(itemCollection) { Filter = SearchFilter };<br>\r\ndataGrid.ItemsSource = dgcv;<br>\r\n<br>\r\nOR <br>\r\nAfter modifying ItemsSource try <br>\r\n(dataGrid.Items </p>\r\n</span>\r\n<p><span style=\"font-size:13px;color:#0000ff\">as</span><span style=\"font-size:13px\"> ICollectionView).Refresh();<br>\r\n<br>\r\nHope this helps.\r\n<p>&nbsp;</p>\r\n</span></p>\r\n",
    "PostedDate": "2008-11-25T18:48:29.717-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136231",
    "ThreadId": "39458",
    "Html": "Didn't helped.<br>\r\n<br>\r\nI tried both the ways, i.e. creating a separate instance of the collection and implementing INotifyCollectionChanged.<br>\r\n",
    "PostedDate": "2008-11-29T03:57:37.447-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "138637",
    "ThreadId": "39458",
    "Html": "Still no word on this?<br>\r\n",
    "PostedDate": "2008-12-08T09:06:16.767-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "138730",
    "ThreadId": "39458",
    "Html": "I think I have understood the cause for the problem. Refresh call leads to an asychronous call to UpdateLayout operation. When you set the SelectedItem,it causes for that item to be scrolled into view. UpdateLayout is not getting completed by the time ScrollIntoView is called, hence the exception. We have a fix for this issue, but meanwhile you can use this as a work around. <br>\r\n<br>\r\nAfter Refresh, schedule any SelectedItem or ScrollIntoView as an asynchronous operation to the Dispatcher, with a DispatcherPriority of Loaded or lower priority. <br>\r\n<br>\r\nitemCollection.Add(item);<br>\r\ndataGrid.Items.Refresh();<br>\r\n<span style=\"font-size:13px\">Dispatcher.BeginInvoke(DispatcherPriority.<span><strong>Loaded</strong></span>, new DispatcherOperationCallback(ScrollItemsIntoView), item);\r\n<p>&nbsp;</p>\r\n<p>Definition of ScrollItemsIntoView: </p>\r\n<p>private object ScrollItemsIntoView(object item)<br>\r\n{<br>\r\ndataGrid.SelectedItem = item;<br>\r\ndataGrid.ScrollIntoView(item);<br>\r\nreturn null;<br>\r\n}</p>\r\n</span>\r\n",
    "PostedDate": "2008-12-08T13:15:56.973-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "138852",
    "ThreadId": "39458",
    "Html": "Thanks a lot for the fix man. Works perfectly now. :)<br>\r\n",
    "PostedDate": "2008-12-08T21:43:17.453-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "162108",
    "ThreadId": "39458",
    "Html": "Hi kedecond,<br>\r\n<br>\r\nThe work around you provided is cool (thank you) - but it will not work for me unfortunately, so I just want to let the WPF know in case if you guys/gals think this is fixed (or maybe I am doing something wrong).<br>\r\n<br>\r\nIn my case I have a master/details scenario where I have a master grid, and when a row in that is selected I set the ItemsSource of a details grid to another collection, and I try to scroll the details grid to the last item.<br>\r\n<br>\r\nIn my case using the above workaround, sometimes it works and sometimes it crashes. I am assuming because the details grid may have had it's items source updated again (by scrolling through the master) before the DispatcherOperationCallback operation got a chance to execute.&nbsp; Then the DispatcherOperationCallback executes and bombs.<br>\r\n<br>\r\nDoes this sound like a scenario that should work?<br>\r\nCheers,<br>\r\nJon<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2009-02-25T15:26:39.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "162509",
    "ThreadId": "39458",
    "Html": "<span style=\"color:#3e62a6\">JonProactiveLogic</span>,<br>\r\n1. Does the crash occur in the master grid or details grid ? <br>\r\n2. Is your ItemsSource for the details grid an ObservableCollection or implement INotifyCollectionChanged  ?<br>\r\n3. &quot;the details grid may have had it's items source updated again (by scrolling through the master)&quot;. It could be that the layout is showing the latest ItemsSource already and you are invoking scroll on the previous ItemsSource. Perhaps in the DispatcherOperationCallback, you can have some kind of check that you scroll in the most recent ItemsSource and not the previous ItemsSource. <br>\r\n<br>\r\nIf you can send me a small repro of your app, I can look into the issue. \r\n",
    "PostedDate": "2009-02-26T14:57:41.963-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "425578",
    "ThreadId": "39458",
    "Html": "<p>Ok, it is March 2010. I am using February 2010 Release of WPF ToolKit and still having the same issue.</p>\r\n<p>The work aroung using <span style=\"font-size:13px\">Dispatcher.BeginInvoke works, but I thought you said you have a fix. </span></p>\r\n<p><span style=\"font-size:13px\">Am I missing something? </span></p>",
    "PostedDate": "2010-03-30T10:11:19.82-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]