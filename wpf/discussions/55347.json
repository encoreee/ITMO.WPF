[
  {
    "Id": "186899",
    "ThreadId": "55347",
    "Html": "<p>Hi everyone,<br>\r\n<br>\r\nI'm trying to get to focus a certain cell in a datagrid. I've seen code here in CodePlex by Vincent Sibal that does that. Everything works fine but recently I encountered a problem when adding contents to an empty datagrid then immediately focusing on a cell. I've posted a sample XAML and code-behind that shows my problem. Press enter the first time to fill the datagrid - but the cell is null. Press enter 2nd time and cell is not null but positions it on 2nd row. And if you try to put a breakpoint in it and hover on the cell, you will see that the cell's value is tuition fee but focus is on other fees.<br>\r\n<br>\r\n<br>\r\n<br>\r\nHere is the XAML:<br>\r\n<br>\r\n&lt;Window<br>\r\n xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n x:Class=&quot;UntitledProject1.Window1&quot;<br>\r\n x:Name=&quot;Window&quot;<br>\r\n Title=&quot;Window1&quot;<br>\r\n Width=&quot;640&quot; Height=&quot;480&quot; xmlns:Custom=&quot;<a href=\"http://schemas.microsoft.com/wpf/2008/toolkit\">http://schemas.microsoft.com/wpf/2008/toolkit</a>&quot;&gt;</p>\r\n<p> &lt;Grid x:Name=&quot;LayoutRoot&quot;&gt;<br>\r\n  &lt;Custom:DataGrid Margin=&quot;31,32,45,53&quot; x:Name=&quot;dg&quot; IsSynchronizedWithCurrentItem=&quot;True&quot;/&gt;<br>\r\n &lt;/Grid&gt;<br>\r\n&lt;/Window&gt;</p>\r\n<p><br>\r\nHere is the code behind:<br>\r\n<br>\r\nusing System;<br>\r\nusing System.IO;<br>\r\nusing System.Net;<br>\r\nusing System.Windows;<br>\r\nusing System.Windows.Controls;<br>\r\nusing System.Windows.Data;<br>\r\nusing System.Windows.Media;<br>\r\nusing System.Windows.Media.Animation;<br>\r\nusing System.Windows.Navigation;<br>\r\nusing System.Collections.Generic;<br>\r\nusing Microsoft.Windows.Controls;<br>\r\nusing Microsoft.Windows.Controls.Primitives;</p>\r\n<p>namespace UntitledProject1<br>\r\n{<br>\r\n public partial class Window1<br>\r\n {<br>\r\n        private List&lt;Tuition&gt; _TuitionList = new List&lt;Tuition&gt;();<br>\r\n  public Window1()<br>\r\n  {<br>\r\n   this.InitializeComponent();<br>\r\n   <br>\r\n   // Insert code required on object creation below this point.<br>\r\n            this.Loaded += new RoutedEventHandler(Window1_Loaded);<br>\r\n            this.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(Window1_PreviewKeyDown);<br>\r\n  }<br>\r\n        //<br>\r\n        // Event handlers<br>\r\n        //<br>\r\n        private void Window1_Loaded(object sender, RoutedEventArgs e)<br>\r\n        {<br>\r\n            dg.AutoGenerateColumns = false;<br>\r\n            dg.CanUserAddRows = false;<br>\r\n            dg.CanUserDeleteRows = false;</p>\r\n<p>            // Columns.<br>\r\n            DataGridTextColumn colAccount = new DataGridTextColumn();<br>\r\n            Binding b = new Binding(&quot;Account&quot;);<br>\r\n            b.Mode = BindingMode.TwoWay;<br>\r\n            colAccount.Binding = b;<br>\r\n            // colAccount.Width = new DataGridLength(100, DataGridLengthUnitType.Star); Bug if not initially displayed tab on TabControl.<br>\r\n            colAccount.Width = new DataGridLength(250, DataGridLengthUnitType.Pixel);<br>\r\n            colAccount.CanUserSort = false;<br>\r\n            colAccount.Header = &quot;Account&quot;;<br>\r\n            dg.Columns.Add(colAccount);<br>\r\n            DataGridTextColumn colAmount = new DataGridTextColumn();<br>\r\n            b = new Binding(&quot;Amount&quot;);<br>\r\n            b.Mode = BindingMode.TwoWay;<br>\r\n            colAmount.Binding = b;<br>\r\n            // colAmount.Width = new DataGridLength(50, DataGridLengthUnitType.Star); Bug if not initially displayed tab on TabControl.<br>\r\n            colAmount.Width = new DataGridLength(119, DataGridLengthUnitType.Pixel);<br>\r\n            colAmount.CanUserSort = false;<br>\r\n            colAmount.Header = &quot;Amount&quot;;<br>\r\n            dg.Columns.Add(colAmount);<br>\r\n            dg.ItemsSource = _TuitionList;<br>\r\n        }</p>\r\n<p>        private void Window1_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)<br>\r\n        {<br>\r\n            if (e.Key == System.Windows.Input.Key.Return)<br>\r\n            {<br>\r\n                // Add items.<br>\r\n                _TuitionList.Add(new Tuition() { Account = &quot;Tuition Fee&quot;, Amount = 100 });<br>\r\n                _TuitionList.Add(new Tuition() { Account = &quot;Other Fees&quot;, Amount = 200 });<br>\r\n                _TuitionList.Add(new Tuition() { Account = &quot;Miscellaneous Fees&quot;, Amount = 300 });</p>\r\n<p>                // Focus on cell.<br>\r\n                DataGridCell cell = GetCell(0, 0);<br>\r\n                if (cell != null)<br>\r\n                    cell.Focus();<br>\r\n            }<br>\r\n        }<br>\r\n        //<br>\r\n        // DataGrid Helper Functions<br>\r\n        //<br>\r\n        public DataGridCell GetCell(int row, int column)<br>\r\n        {<br>\r\n            DataGridRow rowContainer = GetRow(row);</p>\r\n<p>            if (rowContainer != null)<br>\r\n            {<br>\r\n                DataGridCellsPresenter presenter = GetVisualChild&lt;DataGridCellsPresenter&gt;(rowContainer);</p>\r\n<p>                // Try to get the cell but it may possibly be virtualized.<br>\r\n                DataGridCell cell = (DataGridCell)presenter.ItemContainerGenerator.ContainerFromIndex(column);<br>\r\n                if (cell == null)<br>\r\n                {<br>\r\n                    // Now try to bring into view and retreive the cell.<br>\r\n                    dg.ScrollIntoView(rowContainer, dg.Columns[column]);<br>\r\n                    cell = (DataGridCell)presenter.ItemContainerGenerator.ContainerFromIndex(column);<br>\r\n                }<br>\r\n                return cell;<br>\r\n            }<br>\r\n            return null;<br>\r\n        }</p>\r\n<p>        public DataGridRow GetRow(int index)<br>\r\n        {<br>\r\n            DataGridRow row = (DataGridRow)dg.ItemContainerGenerator.ContainerFromIndex(index);<br>\r\n            if (row == null)<br>\r\n            {<br>\r\n                // May be virtualized, bring into view and try again.<br>\r\n                dg.UpdateLayout();<br>\r\n                dg.ScrollIntoView(dg.Items[index]);<br>\r\n                row = (DataGridRow)dg.ItemContainerGenerator.ContainerFromIndex(index);<br>\r\n            }<br>\r\n            return row;<br>\r\n        }</p>\r\n<p>        public static T GetVisualChild&lt;T&gt;(Visual parent) where T : Visual<br>\r\n        {<br>\r\n            T child = default(T);<br>\r\n            int numVisuals = VisualTreeHelper.GetChildrenCount(parent);<br>\r\n            for (int i = 0; i &lt; numVisuals; i++)<br>\r\n            {<br>\r\n                Visual v = (Visual)VisualTreeHelper.GetChild(parent, i);<br>\r\n                child = v as T;<br>\r\n                if (child == null)<br>\r\n                {<br>\r\n                    child = GetVisualChild&lt;T&gt;(v);<br>\r\n                }<br>\r\n                if (child != null)<br>\r\n                {<br>\r\n                    break;<br>\r\n                }<br>\r\n            }<br>\r\n            return child;<br>\r\n        }<br>\r\n        //<br>\r\n        // Helper class<br>\r\n        //<br>\r\n        public class Tuition<br>\r\n        {<br>\r\n            public string Account { get; set; }<br>\r\n            public decimal Amount { get; set; }<br>\r\n        }<br>\r\n }<br>\r\n}</p>\r\n",
    "PostedDate": "2009-05-05T04:51:46.843-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]