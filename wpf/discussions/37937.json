[
  {
    "Id": "125814",
    "ThreadId": "37937",
    "Html": "I want to have a grid,&nbsp;above the grid, i want to have a series of textboxes(one for each field/coloumn)&nbsp;and when i type something in the textbox, the corresponding dagatrid column should be searched/filterd.<br>\r\n<br>\r\nis it possible to search the columns for value?<br>\r\nkornel\r\n",
    "PostedDate": "2008-10-17T02:24:51.09-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126189",
    "ThreadId": "37937",
    "Html": "DataGrid derives from ItemsControl so filtering will be similar to other&nbsp;ItemsControls like ListView.&nbsp; Josh Smith has this nice article,&nbsp;<a href=\"http://joshsmithonwpf.wordpress.com/2008/08/26/filtering-a-list-of-items-with-the-propertyfiltergroupview-control/\">http://joshsmithonwpf.wordpress.com/2008/08/26/filtering-a-list-of-items-with-the-propertyfiltergroupview-control/</a>,&nbsp;on a PropertyFilterGroupView control that can do some cool things with filtering and using on an ItemsControl.&nbsp; In his example he uses a ListView but you can just as well use it with a DataGrid.\r\n",
    "PostedDate": "2008-10-19T17:37:28.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126402",
    "ThreadId": "37937",
    "Html": "Here is an example that uses the TextChanged event on a TextBox to trigger filtering in the DataGrid to give you &quot;search as you type&quot; functionality. The performance of this will be worse as the number of items increases so keep that in mind.<br>\r\n<br>\r\nXaml:<br>\r\n<br>\r\n&lt;TextBox x:Name=&quot;mSearchBox&quot; TextChanged=&quot;mSearchBox_TextChanged&quot; /&gt;<br>\r\n&lt;dg:DataGrid x:Name=&quot;mUsersDataGrid&quot; ItemsSource=&quot;{Binding Users}&quot; &gt;...&lt;/dg:DataGrid&gt;<br>\r\n<br>\r\n<br>\r\nCode Behind (C#):<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void mSearchBox_TextChanged(object sender, TextChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICollectionView view = CollectionViewSource.GetDefaultView(mUsersDataGrid.ItemsSource);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.Filter = SearchFilter;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.Refresh();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public bool SearchFilter(object item)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string searchText = mSearchBox.Text;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!string.IsNullOrEmpty(searchText))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var user = item as User;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (user == null || !user.Name.ToUpper().Contains(searchText.ToUpper()))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n",
    "PostedDate": "2008-10-20T15:17:51.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]