[
  {
    "Id": "151249",
    "ThreadId": "45351",
    "Html": "Hello there,<br>\r\n<br>\r\nI have a really funny problem.<br>\r\n<br>\r\nlets say we have the following constellation:<br>\r\na list (name mylst) with a lot of object from the type b (name myb1, myb2,myb3...).<br>\r\nthe definition of b is this:<br>\r\nb<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; Dictionary&lt;string,object&gt; Properties {get;}<br>\r\n}<br>\r\nb.Properties is filled dynamicly.<br>\r\n<br>\r\nNow I will the following DataGridResult:<br>\r\nlets say<br>\r\nthe b1.Properties is filled with Name1:Value1,Name2:Value2,Name3:Value3,Name4:Value4...<br>\r\nand<br>\r\nthe b2.Properties is filled with Name10:Value10,Name20:Value20,Name30:Value30,Name40Value40...<br>\r\nand so on...<br>\r\nThe diplay should by:<br>\r\nName1|Name2|Name3|Name4|Name5|Name6|Name7|Name8|Name9|Name10|Name11|Name12....<br>\r\n--------|--------|--------|--------|--------|--------|--------|--------|--------|--------|--------|--------|....<br>\r\nValue1|Value2|Value3|Value4|Value5|Value6|Value7|Value8|Value9|Value10|Value11|Value12|...<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |Value10|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |...<br>\r\n<br>\r\nI hope you understand.<br>\r\n<br>\r\na list of hashtables,dictionary or so should displayed in the DataGrid.<br>\r\n<br>\r\nDoes anyone knows how to do this.<br>\r\n<br>\r\nI found this in the WPF Toolkit Sources, but I don't know how to implement it.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// Helper method which generates columns for a given IItemProperties and adds<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// them either to a datagrid or to a collection of columns as specified by the flag.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;dataGrid&quot;&gt;&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;iItemProperties&quot;&gt;&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;columnCollection&quot;&gt;&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static void GenerateColumns(<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IItemProperties iItemProperties,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataGrid dataGrid,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection&lt;DataGridColumn&gt; columnCollection)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Assert(iItemProperties != null, &quot;iItemProperties should not be null&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Assert(dataGrid != null || columnCollection != null, &quot;Both dataGrid and columnCollection cannot not be null at the same time&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReadOnlyCollection&lt;ItemPropertyInfo&gt; itemProperties = iItemProperties.ItemProperties;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (itemProperties != null &amp;&amp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; itemProperties.Count &gt; 0)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (ItemPropertyInfo itemProperty in itemProperties)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataGridColumn dataGridColumn = DataGridColumn.CreateDefaultColumn(itemProperty);<br>\r\n.... &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\r\n",
    "PostedDate": "2009-01-27T01:30:46.777-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]