[
  {
    "Id": "278404",
    "ThreadId": "81144",
    "Html": "<p>Hi,<br>I have a WPF datagrid, where i Need to allow the users to select multiple Cells and also allow selection of multiple rows through row Header, so that they can deleted selected Cells contents and also able to paste into selected cells (Copy from selected cells work), But have following problem:<br>1. Row Selection does not work even from Row header until user right clicks on the Row Header of Desired row.<br>2. Not able to get the selected Cells (Multiple cells)&nbsp;values in Binding, so that i can Copy and paste into those cells.<br><br>Sample Code:<br><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">my</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">DataGrid</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> Visibility</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;Visible&quot;<br></span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">\r\n<p>SelectionMode</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#ff0000\">\r\n<p>&nbsp;</p>\r\n</span></span>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;Extended&quot;</span></span></p>\r\n<span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">RowHeaderWidth</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;10&quot;</span></span></p>\r\n<span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">SelectionUnit</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;CellOrRowHeader&quot;</span></span></p>\r\n</span></span><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">IsReadOnly</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;False&quot;</span></span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">Margin</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;5&quot;</span></span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">ItemsSource</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;{</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">Binding</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> MapValues</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">}&quot;</span></span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">AutoGenerateColumns</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;False&quot;</span></span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">c</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">DataGridMultiSelectBehaviour.SelectedItems</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;{</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">Binding</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> SelectedMapValue</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">}&quot;</span></span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">c</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">DataGridCellChangeBehavior.CellValueChanged</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;{</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">Binding</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> DataChangedCommand</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">}&quot;</span></span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">filter</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">DataGridExtensions.IsFilterVisible</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;False&quot;</span></span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">CanUserAddRows</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;False&quot; &gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">my</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">DataGrid.ContextMenu</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">ContextMenu</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">MenuItem</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> Header</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;Add&quot;</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> Command</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;{</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">Binding</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> NewMapValueCommand</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">}&quot;&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">MenuItem.Icon</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">Image</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> Source</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;..\\..\\Image\\add.gif&quot; /&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;/</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">MenuItem.Icon</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;/</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">MenuItem</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;/</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">ContextMenu</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;/</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">my</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">DataGrid.ContextMenu</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">my</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">DataGrid.Columns</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">my</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">DataGridTextColumn</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> Header</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;Source Value&quot;</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> Width</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;Auto&quot;</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> Binding</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;{</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">Binding</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> ViewSourceValue</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">}&quot;</span></span><span style=\"font-size:x-small\"> </span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">CanUserSort</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;True&quot;</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> filter</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">DataGridColumnExtensions.IsClearFilterColumn</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;True&quot;/&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">my</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">DataGridTextColumn</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> Header</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;Target Value&quot;</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> Width</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;Auto&quot;</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> Binding</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;{</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">Binding</span></span><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\"> ViewTargetValue</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">}&quot;</span></span><span style=\"font-size:x-small\"> </span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:x-small;color:#ff0000\"><span style=\"font-size:x-small;color:#ff0000\">CanUserSort</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">=&quot;True&quot; /&gt;</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></span><span style=\"font-size:x-small;color:#a31515\">\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;/</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">my</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">:</span></span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">DataGrid.Columns</span></span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&gt;</span></span></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-01-18T00:55:20.223-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "279104",
    "ThreadId": "81144",
    "Html": "<p>Any update on this. Im also having similar problem</p>",
    "PostedDate": "2010-01-19T10:46:03.693-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "286062",
    "ThreadId": "81144",
    "Html": "<p>Finally Problem got resolved:</p>\r\n<p>Problem 1. Row Selection does not work even from Row header until user right clicks on the Row Header of Desired row.</p>\r\n<p>Resolution: The rowHeaderwidth of the Grid have to be increased so that User can click on the rowheader easily and since the</p>\r\n<p>RowHeaderGriperWidth is 8 in actual grid generic.xml, we decreased that width&nbsp;to making it much easier to select a row from row header.</p>\r\n<p>Now next inorder to enable the user to select the item using just aselected cell we have written a behaviour that helps to het teh selected row of teh selected cell.</p>\r\n<p>2. Not able to get the selected Cells (Multiple cells)&nbsp;values in Binding, so that i can Copy and paste into those cells.</p>\r\n<p>in order to paste into the selected cells teh actual grid code is modified and a deafult paste function is added: here is the code:</p>\r\n<pre>/// <pre>public static List ParseClipboardData()\r\n        {\r\n            List clipboardData = null;\r\n            object clipboardRawData = null;\r\n            ParseFormat parseFormat = null;\r\n\r\n            // get the data and set the parsing method based on the format\r\n            // currently works with CSV and Text DataFormats            \r\n            IDataObject dataObj = Clipboard.GetDataObject();\r\n            if ((clipboardRawData = dataObj.GetData(DataFormats.CommaSeparatedValue)) != null)\r\n            {\r\n                parseFormat = ParseCsvFormat;\r\n            }\r\n            else if ((clipboardRawData = dataObj.GetData(DataFormats.Text)) != null)\r\n            {\r\n                parseFormat = ParseTextFormat;\r\n            }\r\n\r\n            if (parseFormat != null)\r\n            {\r\n                string rawDataStr = clipboardRawData as string;\r\n\r\n                if (rawDataStr == null &amp;&amp; clipboardRawData is MemoryStream)\r\n                {\r\n                    // cannot convert to a string so try a MemoryStream\r\n                    MemoryStream ms = clipboardRawData as MemoryStream;\r\n                    StreamReader sr = new StreamReader(ms);\r\n                    rawDataStr = sr.ReadToEnd();\r\n                }\r\n\r\n                if (rawDataStr.IndexOf(&quot;\\0&quot;) &gt; 0)\r\n                {\r\n                    rawDataStr = rawDataStr.Substring(0, rawDataStr.Length - 1);\r\n                }\r\n\r\n                string[] rows = rawDataStr.Split(new string[] { &quot;\\r\\n&quot; }, StringSplitOptions.RemoveEmptyEntries);\r\n                if (rows != null &amp;&amp; rows.Length &gt; 0)\r\n                {\r\n                    clipboardData = new List();\r\n                    foreach (string row in rows)\r\n                    {\r\n                        clipboardData.Add(parseFormat(row));\r\n                    }\r\n                }\r\n            }\r\n\r\n            return clipboardData;\r\n        }\r\n\r\n        public static string[] ParseCsvFormat(string value)\r\n        {\r\n            return ParseCsvOrTextFormat(value, true);\r\n        }\r\n\r\n        public static string[] ParseTextFormat(string value)\r\n        {\r\n            return ParseCsvOrTextFormat(value, false);\r\n        }\r\n\r\n        private static string[] ParseCsvOrTextFormat(string value, bool isCSV)\r\n        {\r\n            List outputList = new List();\r\n\r\n            char separator = isCSV ? ',' : '\\t';\r\n            int startIndex = 0;\r\n            int endIndex = 0;\r\n\r\n            for (int i = 0; i &lt; value.Length; i++)\r\n            {\r\n                char ch = value[i];\r\n                if (ch == separator)\r\n                {\r\n                    outputList.Add(value.Substring(startIndex, endIndex - startIndex));\r\n\r\n                    startIndex = endIndex + 1;\r\n                    endIndex = startIndex;\r\n                }\r\n                else if (ch == '\\&quot;' &amp;&amp; isCSV)\r\n                {\r\n                    // skip until the ending quotes\r\n                    i++;\r\n                    if (i &gt;= value.Length)\r\n                    {\r\n                        throw new FormatException(string.Format(&quot;value: {0} had a format exception&quot;, value));\r\n                    }\r\n                    char tempCh = value[i];\r\n                    while (tempCh != '\\&quot;' &amp;&amp; i &lt; value.Length)\r\n                        i++;\r\n\r\n                    endIndex = i;\r\n                }\r\n                else if (i + 1 == value.Length)\r\n                {\r\n                    // add the last value\r\n                    outputList.Add(value.Substring(startIndex));\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    endIndex++;\r\n                }\r\n            }\r\n\r\n            return outputList.ToArray();\r\n        }</pre>\r\n/// This virtual method is called when ApplicationCommands.Copy command is executed.         ///          /// &lt;param name=&quot;args&quot; /&gt; protected virtual void OnExecutedPaste(ExecutedRoutedEventArgs args)         {             // Todo: Default paste handler             // parse the clipboard data                         List rowData = ClipboardHelper.ParseClipboardData();              ////if (rowData.Count == 1)             // call OnPastingCellClipboardContent for each cell             foreach (var selectedCell in SelectedCells)             {                 this.CurrentCell = selectedCell;                 int minRowIndex = Items.IndexOf(selectedCell.Item);                 int maxRowIndex = Items.Count - 1;                 int minColumnDisplayIndex = (SelectionUnit != DataGridSelectionUnit.FullRow)                                                 ? Columns.IndexOf(CurrentColumn)                                                 : 0;                 int maxColumnDisplayIndex = Columns.Count - 1;                 int rowDataIndex = 0;                 for (int i = minRowIndex; i &lt;= maxRowIndex &amp;&amp; rowDataIndex &lt; rowData.Count; i++, rowDataIndex++)                 {                     int columnDataIndex = 0;                     for (int j = minColumnDisplayIndex;                          j &lt;= maxColumnDisplayIndex &amp;&amp; columnDataIndex &lt; rowData[rowDataIndex].Length;                          j++, columnDataIndex++)                     {                         DataGridColumn column = ColumnFromDisplayIndex(j);                         this.CurrentCell = new DataGridCellInfo(Items[i], column);                         this.BeginEdit();                         column.OnPastingCellClipboardContent(Items[i], rowData[rowDataIndex][columnDataIndex]);                         this.CommitEdit(DataGridEditingUnit.Row, true);                     }                 }                 if (rowData.Count &gt; 1)                 {                     break;                 }             }         }</pre>\r\n<pre><pre>/// We don't provide default Paste but this public method is exposed to help custom implementation of Paste\r\n        /// \r\n        /// This method stores the cellContent into the item object using ClipboardContentBinding.\r\n        /// \r\n        /// &lt;param name=&quot;item&quot; /&gt;\r\n        /// &lt;param name=&quot;cellContent&quot; /&gt;\r\n        public virtual void OnPastingCellClipboardContent(object item, object cellContent)\r\n        {\r\n            Binding binding = ClipboardContentBinding as Binding;\r\n            if (binding != null)\r\n            {\r\n                // Raise the event to give a chance for external listeners to modify the cell content\r\n                // before it gets stored into the cell\r\n                if (PastingCellClipboardContent != null)\r\n                {\r\n                    DataGridCellClipboardEventArgs args = new DataGridCellClipboardEventArgs(item, this, cellContent);\r\n                    PastingCellClipboardContent(this, args);\r\n                    cellContent = args.Content;\r\n                }\r\n\r\n                // Event handlers can cancel Paste of a cell by setting its content to null\r\n                if (cellContent != null)\r\n                {\r\n                    SetTemplateBoundValue(item, binding.Path.Path.Split('.'), cellContent);\r\n                    ////FrameworkElement fe = new FrameworkElement();\r\n                    ////fe.DataContext = item;\r\n                    ////fe.SetBinding(CellValueProperty, binding);\r\n                    ////fe.SetValue(CellValueProperty, cellContent);\r\n                    ////BindingExpression be = fe.GetBindingExpression(CellValueProperty);\r\n                    ////be.UpdateSource();\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Method to set the value of a property (path) in the datacontext of grid row.\r\n        /// \r\n        /// &lt;param name=&quot;obj&quot; /&gt;The context object.\r\n        /// &lt;param name=&quot;pathParts&quot; /&gt;The path parts of property to fetch value from.\r\n        /// &lt;param name=&quot;value&quot; /&gt;The new value to be set for the property.\r\n        private void SetTemplateBoundValue(object obj, string[] pathParts, object value)\r\n        {\r\n            if (pathParts.Length == 1)\r\n            {\r\n                if (obj.GetType().GetProperty(pathParts[0]) == null)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                if (obj.GetType().GetProperty(pathParts[0]).PropertyType == typeof(string))\r\n                {\r\n                    obj.GetType().GetProperty(pathParts[0]).SetValue(obj, value, null);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                SetTemplateBoundValue(\r\n                    obj.GetType().GetProperty(pathParts[0]).GetValue(obj, null),\r\n                    string.Join(&quot;.&quot;, pathParts, 1, pathParts.Length - 1).Split('.'),\r\n                    value);\r\n            }\r\n        }</pre>\r\n<pre>------------------------------------------------------</pre>\r\n<pre>Now This Behaviour is used to enable delete option on the grid cells</pre>\r\n<pre><pre>/// \r\n    /// DataGridCellChangeBehavior class.\r\n    /// \r\n    public sealed class DataGridDeleteCellBehaviour\r\n    {\r\n        /// \r\n        /// Dependency member for selectionChangedProperty.\r\n        /// \r\n        private static readonly DependencyProperty CellDeleteEnabledProperty =\r\n                DependencyProperty.RegisterAttached(\r\n                                &quot;CellDeleteEnabled&quot;,\r\n                                typeof(bool),\r\n                                typeof(DataGridDeleteCellBehaviour),\r\n                                new UIPropertyMetadata(DataGridDeleteCellBehaviour.CellDeleteEnabled));\r\n\r\n        /// \r\n        /// Prevents a default instance of the DataGridDeleteCellBehaviour class from being created.\r\n        /// \r\n        private DataGridDeleteCellBehaviour()\r\n        {\r\n        }\r\n\r\n        /// \r\n        /// Get teh IsBroughtIntoViewWhenSelected.\r\n        /// \r\n        /// &lt;param name=&quot;target&quot; /&gt;DataGridRow to it applies.\r\n        /// IsBroughtIntoViewWhenSelectedProperty value.\r\n        public static bool GetCellDeleteEnabled(DependencyObject target)\r\n        {\r\n            return (bool)target.GetValue(CellDeleteEnabledProperty);\r\n        }\r\n\r\n        /// \r\n        /// Method for SetCellValueChanged.\r\n        /// \r\n        /// &lt;param name=&quot;target&quot; /&gt;Undocumented parameter.\r\n        /// &lt;param name=&quot;value&quot; /&gt;Undocumented parameter2.\r\n        public static void SetCellDeleteEnabled(DependencyObject target, bool value)\r\n        {\r\n            target.SetValue(CellDeleteEnabledProperty, value);\r\n        }\r\n\r\n        /// \r\n        /// Method for SelectedItemChanged.\r\n        /// \r\n        /// &lt;param name=&quot;target&quot; /&gt;Undocumented parameter.\r\n        /// &lt;param name=&quot;e&quot; /&gt;Undocumented parameter2.\r\n        /// Thrown when  element is null.\r\n        private static void CellDeleteEnabled(DependencyObject target, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            DataGrid element = target as DataGrid;\r\n\r\n            if (element == null)\r\n            {\r\n                throw new InvalidOperationException(&quot;This behavior can be attached to DataGrid item only.&quot;);\r\n            }\r\n\r\n            if ((bool)e.NewValue &amp;&amp; !(bool)e.OldValue)\r\n            {\r\n                element.KeyUp += OnGridKeyUp;\r\n            }\r\n            else if (!(bool)e.NewValue &amp;&amp; (bool)e.OldValue)\r\n            {\r\n                element.KeyUp -= OnGridKeyUp;\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Gets the visual child of the type T.\r\n        /// \r\n        /// Type of the control that need to be searched.\r\n        /// &lt;param name=&quot;parent&quot; /&gt;Control in which search has to be performed.\r\n        /// Control of type T if exists in the parent, else default value for the type T.\r\n        private static T GetVisualChild(Visual parent) where T : Visual\r\n        {\r\n            T child = default(T);\r\n            int numVisuals = VisualTreeHelper.GetChildrenCount(parent);\r\n            for (int i = 0; i &lt; numVisuals; i++)\r\n            {\r\n                Visual v = (Visual)VisualTreeHelper.GetChild(parent, i);\r\n                child = v as T;\r\n                if (child == null)\r\n                {\r\n                    child = GetVisualChild(v);\r\n                }\r\n\r\n                if (child != null)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return child;\r\n        }\r\n\r\n        /// \r\n        /// Event call for KeyDown.\r\n        /// \r\n        /// &lt;param name=&quot;sender&quot; /&gt;Sender object.\r\n        /// &lt;param name=&quot;e&quot; /&gt;KeyEventArgs object.\r\n        private static void OnGridKeyUp(object sender, System.Windows.Input.KeyEventArgs e)\r\n        {\r\n            if (e.Key == Key.Delete)\r\n            {\r\n                for (int i = 0; i &lt; ((DataGrid)sender).SelectedCells.Count; i++)\r\n                {\r\n                    if (((DataGrid)sender).SelectedCells[i].Column.IsReadOnly)\r\n                    {\r\n                        continue;\r\n                    }\r\n\r\n                    if (((DataGrid)sender).SelectedCells[i].Column.ClipboardContentBinding != null)\r\n                    {\r\n                        string propertyName =\r\n                            ((System.Windows.Data.Binding)\r\n                             ((DataGrid)sender).SelectedCells[i].Column.ClipboardContentBinding).Path.Path;\r\n                        if (!string.IsNullOrEmpty(propertyName))\r\n                        {\r\n                            ((DataGrid)sender).CurrentCell = ((DataGrid)sender).SelectedCells[i];\r\n                            ((DataGrid)sender).BeginEdit();\r\n                            SetTemplateBoundValue(((DataGrid) sender).SelectedCells[i].Item, propertyName.Split('.'), string.Empty);\r\n                            ((DataGrid) sender).CommitEdit(DataGridEditingUnit.Row, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /// \r\n        /// Method to set the value of a property (path) in the datacontext of grid row.\r\n        /// \r\n        /// &lt;param name=&quot;obj&quot; /&gt;The context object.\r\n        /// &lt;param name=&quot;pathParts&quot; /&gt;The path parts of property to fetch value from.\r\n        /// &lt;param name=&quot;value&quot; /&gt;The new value to be set for the property.\r\n        private static void SetTemplateBoundValue(object obj, string[] pathParts, object value)\r\n        {\r\n            if (pathParts.Length == 1)\r\n            {\r\n                if (obj.GetType().GetProperty(pathParts[0]) == null)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                if (obj.GetType().GetProperty(pathParts[0]).PropertyType == typeof(string))\r\n                {\r\n                    obj.GetType().GetProperty(pathParts[0]).SetValue(obj, value, null);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                SetTemplateBoundValue(\r\n                    obj.GetType().GetProperty(pathParts[0]).GetValue(obj, null),\r\n                    string.Join(&quot;.&quot;, pathParts, 1, pathParts.Length - 1).Split('.'),\r\n                    value);\r\n            }\r\n        }\r\n    }</pre>\r\n</pre>\r\n</pre>",
    "PostedDate": "2010-02-04T20:16:47.643-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "286656",
    "ThreadId": "81144",
    "Html": "<p>Hello,</p>\r\n<p>What&nbsp;exactly should I do to enable paste&nbsp;capability? It's matter of some binding (eg. to ApplicationCommands.Paste) or I should write some event handler ?&nbsp;&nbsp;&nbsp;</p>",
    "PostedDate": "2010-02-06T11:27:54.163-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]