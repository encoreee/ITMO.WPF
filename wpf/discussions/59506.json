[
  {
    "Id": "201467",
    "ThreadId": "59506",
    "Html": "<p>I'm trying to get Data Virtualization working based on this code <a href=\"http://www.codeproject.com/KB/WPF/WpfDataVirtualization.aspx\">http://www.codeproject.com/KB/WPF/WpfDataVirtualization.aspx</a>&nbsp;(wish works perfect with ListView), but DataGrid craches whn I load the data.</p>\r\n<p>Any suggestions or code samples I can look at. My data is a WebService that I get paged data from (from row # to row #).</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2009-06-15T00:48:43.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203073",
    "ThreadId": "59506",
    "Html": "<p>bump.</p>\r\n<p>&nbsp;</p>\r\n<p>No info on how to use Virtualization with the Dataggird?</p>",
    "PostedDate": "2009-06-18T12:55:58.927-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203237",
    "ThreadId": "59506",
    "Html": "<p>My DataVirtualization is cruches only if I'm use async.&nbsp;Just use VirtualizingCollection&nbsp;instead of AsyncVirtualizingCollection and all will work fine. And if you do that, don't forget to set&nbsp;ScrollViewer.IsDeferredScrollingEnabled=&quot;True&quot; like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">wpftk</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGrid</span> <span style=\"color:Red\">ScrollViewer.IsDeferredScrollingEnabled</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">True</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">wpftk</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGrid</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-19T00:10:25.687-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203261",
    "ThreadId": "59506",
    "Html": "<p>Thanks Settler,<br><br>How do I easiest &quot;reload a page&quot;. I know my data has been change, but how do I update the contet in the grid?</p>\r\n<p>&nbsp;</p>\r\n<p>And second, how can I support column sorting with Virtualization?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-19T01:35:38.007-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203286",
    "ThreadId": "59506",
    "Html": "<p>Good questions :) Well. I'm modify Paul's DataWirtualization for supporting all that I'm need. Changing contains:</p>\r\n<ul>\r\n<li>Refreshing support</li>\r\n<li>Sorting support</li>\r\n<li>IndexOf support for correct working DataGrid</li>\r\n</ul>\r\n<p>I don't think a good idea pasting all new code right here. Is little large :) But i can give you some tricks:</p>\r\n<p>1) For reload page:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">interface</span><span style=\"color:MediumTurquoise\"> IRefreshableVirtualizingCollection\r\n</span>{\r\n\t\t<span style=\"color:Blue\">void</span> Refresh();\r\n}\r\n\r\n<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> VirtualizingCollection&lt;T&gt; : IRefreshableVirtualizingCollection, IList&lt;T&gt;, IList, INotifyCollectionChanged\r\n</span>{\r\n    ....................\r\n\r\n                <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span><span style=\"color:Green\"> Refetch current page</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n\t\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">virtual</span> <span style=\"color:Blue\">void</span> Refresh()\r\n\t\t{\r\n\t\t\tLoadCount();\r\n\t\t\t<span style=\"color:Blue\">if</span> (Count == 0)\r\n\t\t\t{\r\n\t\t\t\tcurrentPageIndex = -1;\r\n\t\t\t}\r\n\t\t\t<span style=\"color:Blue\">else</span>\r\n\t\t\t{\r\n\t\t\t\t_pageTouchTimes.Clear();\r\n\t\t\t\t_pages.Clear();\r\n\t\t\t\t<span style=\"color:Blue\">while</span> (currentPageIndex * PageSize &gt;= Count &amp;&amp; currentPageIndex &gt;= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tcurrentPageIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tRequestPage(currentPageIndex);\r\n\t\t\t}\r\n\t\t\tFireCollectionReset();\r\n\t\t}\r\n}\r\n</pre>\r\n</div>\r\n<p>So. Here i'm add new interface&nbsp;IRefreshableVirtualizingCollection and move&nbsp;INotifyCollectionChanged and implementation of this from AsyncVirtualizingCollection to&nbsp;VirtualizingCollection.</p>\r\n<p>2) For sorting data:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> SortableDataGrid : DataGrid\r\n\t</span>{\r\n\t\t<span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> OnSorting(DataGridSortingEventArgs e)\r\n\t\t{\r\n\t\t\t<span style=\"color:Blue\">if</span> (ItemsSource != <span style=\"color:Blue\">null</span> &amp;&amp;\r\n\t\t\t    ItemsSource <span style=\"color:Blue\">is</span> IRefreshableVirtualizingCollection &amp;&amp;\r\n\t\t\t\t((IRefreshableVirtualizingCollection)ItemsSource).ItemsProvider <span style=\"color:Blue\">is</span> IBasicSortableItemsProvider)\r\n\t\t\t{\r\n\t\t\t\tIRefreshableVirtualizingCollection itemsCollection = (IRefreshableVirtualizingCollection)ItemsSource;\r\n\t\t\t\tIBasicSortableItemsProvider itemsProvider = (IBasicSortableItemsProvider)itemsCollection.ItemsProvider;\r\n\r\n\t\t\t\t<span style=\"color:Blue\">if</span> (e.Column.SortDirection == ListSortDirection.Descending)\r\n\t\t\t\t{\r\n\t\t\t\t\titemsProvider.SortDirection = <span style=\"color:Blue\">null</span>;\r\n\t\t\t\t\titemsProvider.UntypedSortField = <span style=\"color:Blue\">null</span>;\r\n\t\t\t\t}\r\n\t\t\t\t<span style=\"color:Blue\">else</span>\r\n\t\t\t\t{\r\n\t\t\t\t\t<span style=\"color:Blue\">if</span> (e.Column.SortDirection == <span style=\"color:Blue\">null</span>)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titemsProvider.SortDirection = ListSortDirection.Ascending;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<span style=\"color:Blue\">else</span> <span style=\"color:Blue\">if</span> (e.Column.SortDirection == ListSortDirection.Ascending)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titemsProvider.SortDirection = ListSortDirection.Descending;\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemsProvider.UntypedSortField = e.Column.SortMemberPath;\r\n\t\t\t\t}\r\n\t\t\t\te.Column.SortDirection = itemsProvider.SortDirection;\r\n\t\t\t\titemsCollection.Refresh();\r\n\t\t\t\te.Handled = <span style=\"color:Blue\">true</span>;\r\n\t\t\t}\r\n\t\t\t<span style=\"color:Blue\">else</span>\r\n\t\t\t{\r\n\t\t\t\t<span style=\"color:Blue\">base</span>.OnSorting(e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t<span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> OnPreviewKeyDown(KeyEventArgs e)\r\n\t\t{\r\n\t\t\t<span style=\"color:Blue\">if</span> (e.Key == Key.A &amp;&amp; \r\n\t\t\t\tKeyboard.Modifiers == ModifierKeys.Control &amp;&amp;\r\n\t\t\t\tItemsSource <span style=\"color:Blue\">is</span> IBasicVirtualizingCollection)\r\n\t\t\t{\r\n\t\t\t\t<span style=\"color:Blue\">if</span>(Items.Count &gt; ((IBasicVirtualizingCollection)ItemsSource).PageSize)\r\n\t\t\t\t{\r\n                    <span style=\"color:Blue\">if</span> (MessageBox.Show(ResStrings.CONFIRM_SELECTALL_MESSAGE, ResStrings.WARNING_TITLE, MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.No)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\te.Handled = <span style=\"color:Blue\">true</span>;\r\n\t\t\t\t\t\t<span style=\"color:Blue\">return</span>;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSelectAll();\r\n\t\t\t\t\te.Handled = <span style=\"color:Blue\">true</span>;\r\n\t\t\t\t\t<span style=\"color:Blue\">return</span>;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</pre>\r\n</div>\r\n<p>And here I'm create a simple SortableDataGrid that check ItemsSource and do sorting. So, My Items provider contain &quot;ListSortDirection?&nbsp;SortDirection&quot; field, and &quot;string&nbsp;UntypedSortField&quot;,&nbsp;that used in&nbsp;FetchRange implementation.&nbsp;</p>\r\n<p><span style=\"white-space:pre\">OnPreviewKeyDown method is warning user about possible large amount of data, because SelectAll() method is very slow...</span></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-19T03:06:41.567-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203299",
    "ThreadId": "59506",
    "Html": "<p>Thanks again!</p>\r\n<p>In the &quot;Refresh&quot; from where to you take &quot;currentPageIndex&quot;&nbsp; (from &quot;pageIndex&quot; in &quot;ReguestPage&quot; or ?) <br><br>Now I have to do &quot;datagrid1.Items.Refresh()&quot; after running your Refresh, to see the update.&nbsp; And the method FireCollectionReset()&nbsp; I like to see that...&nbsp;</p>\r\n<p>Do you use &quot;public event NotifyCollectionChangedEventHandler CollectionChanged;&quot; ?</p>\r\n<p>if you want you can mail me: kennet[at]kennet.se</p>\r\n<p>I get the the sorting later...</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-19T04:16:35.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203302",
    "ThreadId": "59506",
    "Html": "<p>currentPageIndex - is simply interger field. In &quot;public T this[int index]&quot;:</p>\r\n<p>int pageIndex = currentPageIndex = index / PageSize;</p>\r\n<p>&nbsp;</p>\r\n<p><strong>&quot;... and move&nbsp;INotifyCollectionChanged <em><span style=\"text-decoration:underline\">and implementation</span></em> of this from AsyncVirtualizingCollection to&nbsp;VirtualizingCollection.&quot;</strong></p>\r\n<p>I'm just pull down all code in region&nbsp;INotifyCollectionChanged to VirtualizingCollection.</p>\r\n<p>And for sorting:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">interface</span><span style=\"color:MediumTurquoise\"> IBasicVirtualizingCollection\r\n\t</span>{\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets the items provider.</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The items provider.&lt;/value&gt;</span>\r\n\t\tIBasicItemsProvider ItemsProvider{ <span style=\"color:Blue\">get</span>; }\r\n\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets the size of the page.</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The size of the page.&lt;/value&gt;</span>\r\n\t\t<span style=\"color:Blue\">int</span> PageSize { <span style=\"color:Blue\">get</span>; }\r\n\t}\r\n<div style=\"color:Black;background-color:White\"><pre>        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n\t<span style=\"color:Gray\">///</span><span style=\"color:Green\"> Represents a basic provider of collection details.</span>\r\n\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">interface</span><span style=\"color:MediumTurquoise\"> IBasicItemsProvider\r\n\t</span>{\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span><span style=\"color:Green\"> Fetches the total number of items available.</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span><span style=\"color:Gray\">&lt;/returns&gt;</span>\r\n\t\t<span style=\"color:Blue\">int</span> FetchCount();\r\n\t}\r\n</pre>\r\n</div>\r\n<span style=\"color:#808080\"><br></span></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>         <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n\t<span style=\"color:Gray\">///</span><span style=\"color:Green\"> Represents a provider of collection details.</span>\r\n\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;typeparam name=&quot;T&quot;&gt;</span><span style=\"color:Green\">The type of items in the collection.&lt;/typeparam&gt;</span>\r\n\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">interface</span><span style=\"color:MediumTurquoise\"> IItemsProvider&lt;T&gt; : IBasicItemsProvider\r\n\t</span>{\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span><span style=\"color:Green\"> Fetches a range of items.</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;startIndex&quot;&gt;</span><span style=\"color:Green\">The start index.&lt;/param&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;count&quot;&gt;</span><span style=\"color:Green\">The number of items to fetch.&lt;/param&gt;</span>\r\n\t\t<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span><span style=\"color:Gray\">&lt;/returns&gt;</span>\r\n\t\tIList&lt;T&gt; FetchRange(<span style=\"color:Blue\">int</span> startIndex, <span style=\"color:Blue\">int</span> count);\r\n\t}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Untyped interface is need to me for not generic controls...</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-19T04:36:12.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203327",
    "ThreadId": "59506",
    "Html": "<p>Thanks Settler,</p>\r\n<p>Refresh works just fine now, but sice I call .Refresh() on a new thread I hade to change &quot;OnCollectionChanged&quot;, so I found this example: <a href=\"http://geekswithblogs.net/NewThingsILearned/archive/2008/01/16/have-worker-thread-update-observablecollection-that-is-bound-to-a.aspx\">http://geekswithblogs.net/NewThingsILearned/archive/2008/01/16/have-worker-thread-update-observablecollection-that-is-bound-to-a.aspx</a></p>\r\n<p>I try the sorting later...</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-19T06:07:04.933-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]