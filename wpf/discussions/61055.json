[
  {
    "Id": "207007",
    "ThreadId": "61055",
    "Html": "<p>Hi,</p>\r\n<p>I am new to WPF data grid. Here is what I am trying to do: I have a data grid which I am binding to a DataTable (using DataTable.DefaultView). In my data grid, I have an Insert Button in the header to insert a new row in the grid. Now here is what I want to accomplish:</p>\r\n<p>1. When I add a new row, a &quot;NewItemPlaceHolder&quot; row is created as well. Is there a way using which I can hide this row? I did look around the forums and one recommendation with to define the ItemsSource of the grid by creating a new CollectionView object (something like dg.ItemsSource = new CollectionView(dg.ItemsSource). This does remove the &quot;NewItemPlaceHolder&quot; but now my items source is no longer a DataView object.</p>\r\n<p>2. When I insert a new row, I want the focus on the 1st cell of the newly created row. In Silverlight, I can simply do by putting the focus on the datagrid, call it's ScrollIntoView() method &amp; then finding the cell content &amp; putting the focus there. How do I do this here?</p>\r\n<p>&nbsp;</p>\r\n<p>Any help would be highly appreciated.</p>\r\n<p>Thanks</p>\r\n<p>Gaurav</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-30T03:56:22.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "207230",
    "ThreadId": "61055",
    "Html": "<p>Hi Gaurav,</p>\r\n<p>1. I'm assuming that when you say you add a new row that you are doing this programmatically (either your app is pulling in new data and inserting it on its own or the end user&nbsp;enters the information&nbsp;for the new row in a separate dialog and then&nbsp;the app adds the new row&nbsp;after the dialog is closed)&nbsp;- is that correct?&nbsp; If so, if you want to turn off the NewItemPlaceholder, you should just be able to set DataGrid's CanUserAddRows property to false.&nbsp; Does that fix it for you?</p>\r\n<p>2. The Silverlight and WPF DataGrids are 95% API and&nbsp;behaviorally compatible, so if this works for you in the Silverlight DataGrid, it should most likely work in the WPF DataGrid.&nbsp; Have you tried this out in WPF yet?&nbsp; If it does not work, let us know and we will take a closer look.</p>\r\n<p>Thanks!<br>Samantha</p>",
    "PostedDate": "2009-06-30T13:47:44.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "207361",
    "ThreadId": "61055",
    "Html": "<p>Hi Samantha,</p>\r\n<p>Thanks for responding.</p>\r\n<p>1. Basically what I am doing is I am providing a button in the first cell of the header row (with a + sign) and creating a new row when user clicks on that row. What I did in the code is handle RowLoading event and if I see that e.Row.Item == NewItemPlaceHolder, I am setting it's height to 0 (I tried changing it's visibility first but that did not help. I know it is not an elegant solution but for now it is working. I want user to add new rows so I guess I can't set CanUserAddRows property to false. Can you recommend some other solution? Here is the code for that:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>\r\n        <span style=\"color:Blue\">void</span> DataGridEntityAttribute_LoadingRow(<span style=\"color:Blue\">object</span> sender, DataGridRowEventArgs e)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (e.Row.Item == CollectionView.NewItemPlaceholder)\r\n            {\r\n                e.Row.Visibility = Visibility.Collapsed;\r\n                e.Row.Height = 0;\r\n                DataGridEntityAttribute.UpdateLayout();\r\n            }\r\n        }\r\n\r\n</pre>\r\n</div>\r\n<p>2. I tried doing it but that did not work. Then I snooped around this forum and I found this thread: <a href=\"http://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=34065\">http://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=34065</a>. First I set the selected row of the DataGrid (last row inserted) and the I used GetCell() function to put focus on the desired cell. For now it is working fine. Is there any other way to do this?</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> DataGridRow GetRow(DataGrid DataGrid_Standard, <span style=\"color:Blue\">int</span> index)\r\n        {\r\n            DataGridRow row = (DataGridRow)DataGrid_Standard.ItemContainerGenerator.ContainerFromIndex(index);\r\n            <span style=\"color:Blue\">if</span> (row == <span style=\"color:Blue\">null</span>)\r\n            {\r\n                DataGrid_Standard.ScrollIntoView(DataGrid_Standard.Items[index]);\r\n                row = (DataGridRow)DataGrid_Standard.ItemContainerGenerator.ContainerFromIndex(index);\r\n            }\r\n            <span style=\"color:Blue\">return</span> row;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> DataGridCell GetCell(DataGrid DataGrid_Standard, <span style=\"color:Blue\">int</span> row, <span style=\"color:Blue\">int</span> column)\r\n        {\r\n            DataGridRow rowContainer = GetRow(DataGrid_Standard, row);\r\n\r\n            <span style=\"color:Blue\">if</span> (rowContainer != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                DataGridCellsPresenter presenter = GetVisualChild&lt;DataGridCellsPresenter&gt;(rowContainer);\r\n\r\n                <span style=\"color:Green\">// try to get the cell but it may possibly be virtualized</span>\r\n                DataGridCell cell = (DataGridCell)presenter.ItemContainerGenerator.ContainerFromIndex(column);\r\n                <span style=\"color:Blue\">if</span> (cell == <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    <span style=\"color:Green\">// now try to bring into view and retreive the cell</span>\r\n                    DataGrid_Standard.ScrollIntoView(rowContainer, DataGrid_Standard.Columns[column]);\r\n                    cell = (DataGridCell)presenter.ItemContainerGenerator.ContainerFromIndex(column);\r\n                }\r\n                <span style=\"color:Blue\">return</span> cell;\r\n            }\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">null</span>;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> T GetVisualChild&lt;T&gt;(Visual parent) where T : Visual\r\n        {\r\n            T child = <span style=\"color:Blue\">default</span>(T);\r\n            <span style=\"color:Blue\">int</span> numVisuals = VisualTreeHelper.GetChildrenCount(parent);\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; numVisuals; i++)\r\n            {\r\n                Visual v = (Visual)VisualTreeHelper.GetChild(parent, i);\r\n                child = v <span style=\"color:Blue\">as</span> T;\r\n                <span style=\"color:Blue\">if</span> (child == <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    child = GetVisualChild&lt;T&gt;(v);\r\n                }\r\n                <span style=\"color:Blue\">if</span> (child != <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    <span style=\"color:Blue\">break</span>;\r\n                }\r\n            }\r\n            <span style=\"color:Blue\">return</span> child;\r\n        }\r\n\r\n</pre>\r\n</div>\r\n<p>Thanks</p>\r\n<p>Gaurav</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-30T21:13:58.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "209642",
    "ThreadId": "61055",
    "Html": "<p>Hi Gaurav,</p>\r\n<p>1. The CanUserAddRows property doesn't prevent you from adding rows programmatically, it just hides the NewItemPlaceholder row from the user in the UI.&nbsp; If I'm interpreting your scenario correctly, it sounds like when the user clicks the &quot;+&quot; button, you are adding a new, blank&nbsp;item to the DataGrid and then the user can just edit that new item.&nbsp; However, if I've interpreted this wrong and what you are actually doing is un-hiding the NewItemPlaceholder row in the UI (by setting the height to something other than 0)&nbsp;so that the user can edit and submit it, then setting CanUserAddRows to false wouldn't work because it will hide that NewItemPlaceholder row.</p>\r\n<p>2. I think you are using the right approach here.&nbsp;</p>\r\n<p>Thanks!<br>Samantha</p>",
    "PostedDate": "2009-07-07T13:22:12.223-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]