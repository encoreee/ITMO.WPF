[
  {
    "Id": "131203",
    "ThreadId": "39537",
    "Html": "Hi,<br>\r\n<br>\r\nI am trying to add a feature to enable users to hide columns by right clicking on the DataGridColumnHeader and opening a ContextMenu. I have managed to work out which column was 'clicked on' by using the code below, but I don't think it is very tidy and I'm sure there must be a simpler and/or better way. I have a DataTable bound to the DataGrid, which has a Style and DataTemplate applied to the DataGridColumnHeader. The ContextMenu is applied in the DataGridHeaderTemplate.<br>\r\n<br>\r\n<span style=\"font-size:13px\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"color:#0000ff;font-size:13px\">private</span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">void</span><span style=\"font-size:13px\"> MenuItem_Click(</span><span style=\"color:#0000ff;font-size:13px\">object</span><span style=\"font-size:13px\"> sender, </span><span style=\"color:#2b91af;font-size:13px\">RoutedEventArgs</span><span style=\"font-size:13px\"> e)\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#2b91af;font-size:13px\">MenuItem</span><span style=\"font-size:13px\"> mi = sender </span><span style=\"color:#0000ff;font-size:13px\">as</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">MenuItem</span><span style=\"font-size:13px\">;\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#2b91af;font-size:13px\">ContextMenu</span><span style=\"font-size:13px\"> cm = (</span><span style=\"color:#2b91af;font-size:13px\">ContextMenu</span><span style=\"font-size:13px\">)</span><span style=\"color:#2b91af;font-size:13px\">Helpers</span><span style=\"font-size:13px\">.FindElementOfTypeUp(mi, </span><span style=\"color:#0000ff;font-size:13px\">typeof</span><span style=\"font-size:13px\">(</span><span style=\"color:#2b91af;font-size:13px\">ContextMenu</span><span style=\"font-size:13px\">));\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#0000ff;font-size:13px\">string</span><span style=\"font-size:13px\"> s = cm.DataContext.ToString();\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#0000ff;font-size:13px\">foreach</span><span style=\"font-size:13px\"> (</span><span style=\"color:#2b91af;font-size:13px\">DataGridColumn</span><span style=\"font-size:13px\"> dgc </span><span style=\"color:#0000ff;font-size:13px\">in</span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">this</span><span style=\"font-size:13px\">.dataGrid.Columns)\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#0000ff;font-size:13px\">if</span><span style=\"font-size:13px\"> ((</span><span style=\"color:#0000ff;font-size:13px\">string</span><span style=\"font-size:13px\">)dgc.Header == s)\r\n<p>&nbsp;</p>\r\n<p>dgc.Visibility = </p>\r\n</span></p>\r\n<p><span style=\"color:#2b91af;font-size:13px\">Visibility</span><span style=\"font-size:13px\">.Hidden;\r\n<p>&nbsp;</p>\r\n<p>}</p>\r\n<p>}</p>\r\n</span></p>\r\n<br>\r\nAny ideas for a better way to do this?<br>\r\n<br>\r\nThanks<br>\r\n",
    "PostedDate": "2008-11-09T12:10:15.867-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131413",
    "ThreadId": "39537",
    "Html": "This also took me some time to figure out.<br>\r\n<br>\r\nwhere my header template for the grid has:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;MenuItem Header=&quot;&quot;Hide&quot;&quot; ToolTip=&quot;&quot;Hide&quot;&quot; Command=&quot;&quot;ContextMenu&quot;&quot; CommandParameter=&quot;&quot;{0}&quot;&quot;&gt;&lt;/MenuItem&gt;<br>\r\n<br>\r\n<br>\r\nand cell template has:<br>\r\n&lt;Border x:Name=&quot;&quot;{0}&quot;&quot; <br>\r\n<br>\r\n<br>\r\nThe way i solved is as follows:<br>\r\nI iterate through all columns looking in the cell template for the name passed through the command parameter.<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GridViewRowPresenter rowpresenter = Utilities.GetVisualChild&lt;GridViewRowPresenter&gt;(myListBoxItem);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int columnIndex = 0; columnIndex &lt; rowpresenter.Columns.Count; columnIndex++)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ContentPresenter cp = Utilities.GetVisualChild&lt;ContentPresenter&gt;(rowpresenter, columnIndex);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object test = cp.ContentTemplate.FindName(args.Parameter.ToString(), cp);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (test != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowpresenter.Columns[columnIndex].Width = 0;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\nThe above works... <br>\r\n<br>\r\n<br>\r\n==============================================<br>\r\nhere's an open issue i would like to fundamentally understand.<br>\r\n<br>\r\nI originally tried to use GridViewHeaderRowPresenter to extract the column's ContentPresenter and kept getting null.<br>\r\nCan I not get to the header's content presenter?? <br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GridViewHeaderRowPresenter headerpresenter = Utilities.GetVisualChild&lt;GridViewHeaderRowPresenter&gt;(myListBoxItem);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int columnIndex = 0; columnIndex &lt; headerpresenter.Columns.Count; columnIndex++)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ContentPresenter cp = Utilities.GetVisualChild&lt;ContentPresenter&gt;(headerpresenter, columnIndex);<br>\r\n// cp is null so i get exception when the next line is run. ... ? why???<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object test = cp.ContentTemplate.FindName(args.Parameter.ToString(), cp);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (test != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerpresenter.Columns[columnIndex].Width = 0;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp; <br>\r\n<br>\r\n",
    "PostedDate": "2008-11-10T09:15:21.23-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131647",
    "ThreadId": "39537",
    "Html": "Hi,<br>\r\n<br>\r\nLeblanc - thanks for the reply. Using the CommandParameter in my case can simplify getting the Column Binding, I tried using the following in the XAML:<br>\r\n<br>\r\nCommandParameter=&quot;{Binding}&quot; which gets me the Binding for the column. I still have to iterate through the columns in the DataGrid to find the appropriate one though. Does anyone know how to eliminate the need to iterate over the columns collection and get a direct reference to the DataGridColumn?<br>\r\n<br>\r\n<br>\r\nThanks<br>\r\n",
    "PostedDate": "2008-11-11T04:52:38.007-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131730",
    "ThreadId": "39537",
    "Html": "Hi again,<br>\r\n<br>\r\nI am also seeing another problem regarding a ContextMenu applied to a DataGridColumnnHeader. I have two DataGrids in a TabControl and unless I actually click somewhere in the desired grid before I right click on the header the 'sender' object references the other grid, yet the ContextMenu appears in the correct place.<br>\r\n<br>\r\nIf I use the 'click' event rather than the RoutedCommand it is OK, but then I can't use the CommandParameter to get the column binding!<br>\r\n<br>\r\nHelp!<br>\r\n",
    "PostedDate": "2008-11-11T10:11:02.323-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132306",
    "ThreadId": "39537",
    "Html": "This doesn't support the MVVM pattern so well, but if you listen to the ContextMenuOpening event you can keep track of the column that has been clicked.<br>\r\n<span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px;color:#a31515\">&lt;Style</span><span style=\"font-size:13px;color:#ff0000\"> x</span><span style=\"font-size:13px;color:#0000ff\">:</span><span style=\"font-size:13px;color:#ff0000\">Key</span><span style=\"font-size:13px;color:#0000ff\">=&quot;dgColumnHeaderStyle_Default&quot;</span><span style=\"font-size:13px;color:#ff0000\"> TargetType</span><span style=\"font-size:13px;color:#0000ff\">=&quot;{</span><span style=\"font-size:13px;color:#a31515\">x</span><span style=\"font-size:13px;color:#0000ff\">:</span><span style=\"font-size:13px;color:#a31515\">Type</span><span style=\"font-size:13px;color:#ff0000\"> toolkit</span><span style=\"font-size:13px;color:#0000ff\">:</span><span style=\"font-size:13px;color:#ff0000\">DataGridColumnHeader</span><span style=\"font-size:13px;color:#0000ff\">}&quot;&gt;<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">    &lt;</span><span style=\"font-size:13px;color:#a31515\">EventSetter</span><span style=\"font-size:13px;color:#ff0000\"> Event</span><span style=\"font-size:13px;color:#0000ff\">=&quot;ContextMenuOpening&quot;</span><span style=\"font-size:13px;color:#ff0000\"> Handler</span><span style=\"font-size:13px;color:#0000ff\">=&quot;columnHeader_ContextMenuOpening&quot;/&gt;<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">    &lt;</span><span style=\"font-size:13px;color:#a31515\">Setter</span><span style=\"font-size:13px;color:#ff0000\"> Property</span><span style=\"font-size:13px;color:#0000ff\">=&quot;ContextMenu&quot;</span><span style=\"font-size:13px;color:#ff0000\"> Value</span><span style=\"font-size:13px;color:#0000ff\">=&quot;{</span><span style=\"font-size:13px;color:#a31515\">DynamicResource</span><span style=\"font-size:13px;color:#ff0000\"> cm_columnHeaderMenu</span><span style=\"font-size:13px;color:#0000ff\">}&quot; /&gt;<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">&lt;/</span><span style=\"font-size:13px;color:#a31515\">Style</span><span style=\"font-size:13px;color:#0000ff\">&gt;\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">\r\n<p>private</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">void</span><span style=\"font-size:13px\"> columnHeader_ContextMenuOpening(</span><span style=\"font-size:13px;color:#0000ff\">object</span><span style=\"font-size:13px\"> sender, </span><span style=\"font-size:13px;color:#2b91af\">ContextMenuEventArgs</span><span style=\"font-size:13px\"> e)<br>\r\n{<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\">    DataGridColumnHeader</span><span style=\"font-size:13px\"> columnHeader = sender </span><span style=\"font-size:13px;color:#0000ff\">as</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\">DataGridColumnHeader</span><span style=\"font-size:13px\">;<br>\r\n    _curColHeaderFromContextMenu = columnHeader;<br>\r\n</span>}<br>\r\n<br>\r\nThen when a menu item is clicked you can access _curColHeaderFromContextMenu.Column.  Still looking for a better solution though.<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n</p>\r\n",
    "PostedDate": "2008-11-13T07:14:59.893-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "227344",
    "ThreadId": "39537",
    "Html": "<p>any updates on this one? i refuse to believe that there is no OOP way to to this.</p>\r\n<p>using a temporary variable to share data between those two events pretty much violates every OOP paradigm i've ever heard/read about ...</p>\r\n<p>there has to be some way to pull the required information from the click event of the contextmenu item ...</p>",
    "PostedDate": "2009-08-24T23:39:42.527-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "234879",
    "ThreadId": "39537",
    "Html": "<div style=\"color:Black;background-color:White\">\r\n<pre><div style=\"color:Black;background-color:White\"><pre>I was looking for a way to get the WPF DataGrid column header from which the user clicked the context menu.</pre>\r\n<pre>This is the solution I used.</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>XML:\r\n\r\n&lt;ContextMenu x:Key=<span style=\"color:#A31515\">&quot;ColumnHeaderContextMenu&quot;</span>&gt;\r\n  &lt;MenuItem Header=<span style=\"color:#A31515\">&quot;Menu Item...&quot;</span> Click=<span style=\"color:#A31515\">&quot;MenuItem_Click&quot;</span> CommandParameter=<span style=\"color:#A31515\">&quot;{Binding RelativeSource={RelativeSource Self}, Path=Parent}&quot;</span> /&gt;\r\n&lt;/ContextMenu&gt;\r\n\r\n\r\n&lt;Style x:Key=<span style=\"color:#A31515\">&quot;ColumnHeaderStyle&quot;</span> TargetType=<span style=\"color:#A31515\">&quot;{x:Type dg:DataGridColumnHeader}&quot;</span>&gt;\r\n  &lt;Setter Property=<span style=\"color:#A31515\">&quot;ContextMenu&quot;</span> Value=<span style=\"color:#A31515\">&quot;{StaticResource ColumnHeaderContextMenu}&quot;</span> /&gt;\r\n&lt;/Style&gt;\r\n\r\n\r\n&lt;dg:DataGrid \r\n...\r\n  ColumnHeaderStyle=<span style=\"color:#A31515\">&quot;{StaticResource ColumnHeaderStyle}&quot;</span>\r\n\r\nCode:\r\n\r\n<span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> MenuItem_Click(<span style=\"color:Blue\">object</span> sender, RoutedEventArgs e) {\r\n  MenuItem mi = sender <span style=\"color:Blue\">as</span> MenuItem;\r\n  ContextMenu cm = mi.CommandParameter <span style=\"color:Blue\">as</span> ContextMenu;\r\n  DataGridColumnHeader ch = cm.PlacementTarget <span style=\"color:Blue\">as</span> DataGridColumnHeader;\r\n  <span style=\"color:Blue\">int</span> datagridHeaderColumnNumber = ch.DisplayIndex;\r\n\r\n  <span style=\"color:Green\">// do something...</span>\r\n}\r\n\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2009-09-15T13:08:39.967-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "457524",
    "ThreadId": "39537",
    "Html": "<p>Hi,</p>\r\n<p>&nbsp;</p>\r\n<p>I've been revisiting my code for this and was hoping that there might be an update on how to achieve this (i.e. get the DataColumn from an event on the DataGridColumnHeader) in a more &quot;MVVM&quot; way? Or this that a contradiciton in terms?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-06-19T02:45:10.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]