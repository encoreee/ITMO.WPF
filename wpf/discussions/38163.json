[
  {
    "Id": "126560",
    "ThreadId": "38163",
    "Html": "I try to use the build in CanUserAddRow behaviour. What I would have expected is, that tabbing past the last cell would add a new row and place the cursor in the first cell. What actually happens is this:<br>\r\n<br>\r\nI have build a very simple project, with a grid with 2 columns and wired up the InitializeNewItem event where I set the value of the first column to &quot;[New]&quot;<br>\r\n<br>\r\nIf I show an empty grid initially, there is one row visible and as soon as I click in the first column twice,<br>\r\nthe first column shows &quot;[New]&quot; and I can edit. when I press tab the focus jumps to column 2, editing and pressing tab the focus jumps back to column 1 and so on: no new row is added!<br>\r\n<br>\r\nIf I hit Enter in Column 2, a new row gets added and the focus is in column 2 in the 2nd row (I would expect 1st column)<br>\r\n<br>\r\nIf I write something in this new cell (column 2, row 2) and then press tab, a new row is added (good!) but the cursor jumps back up to row1, column 1.<br>\r\n<br>\r\nIf I don´t write in the last cell, and only press tab, no new row is added and cursor jumps back to cell 1<br>\r\n<br>\r\nThis is all very confusing and I don´t know how to present my users with an intuitive working behaviour here. Can anybody please help me here?<br>\r\n<br>\r\nThanks very much in advance!<br>\r\n<br>\r\nJoachim\r\n",
    "PostedDate": "2008-10-21T08:36:51.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126622",
    "ThreadId": "38163",
    "Html": "Ironically the problem seems to be the simplicity of&nbsp; your project.<br>\r\n<br>\r\n<em><strong>&gt;&gt;If I show an empty grid initially, there is one row visible and as soon as I click in the first column twice,<br>\r\nthe first column shows &quot;[New]&quot; and I can edit. when I press tab the focus jumps to column 2, editing and pressing tab the focus jumps back to column 1 and so on: no new row is added!</strong><br>\r\n</em><br>\r\nThe one row which is visible intially is the new row placeholder which one could edit and the object corresponding to it would be added to the ItemsSource when ever&nbsp;that row gets committed for first time and there by adding another new row placeholder. Pressing tab from cell of column 2 is moving to the cell of&nbsp;column 1&nbsp;because I assume there is no other control in the&nbsp;window where the tab could go to&nbsp;and as long as one is tabbing in the same row, the row doesn't get committed (assuming&nbsp;that the underlying collectionview can cancel row edit which seems to be your case) and as&nbsp;long as the row doesn't get commintted&nbsp;the new row doesnt get added.&nbsp;<br>\r\n<br>\r\n<em><strong>&gt;&gt;If I hit Enter in Column 2, a new row gets added and the focus is in column 2 in the 2nd row (I would expect 1st column)</strong></em><br>\r\n<br>\r\nThe behavior of enter is as expected, saying that it should&nbsp;move the focus to next available row maintianing in the same column.<br>\r\n<br>\r\n<em><strong>&gt;&gt;If I write something in this new cell (column 2, row 2) and then press tab, a new row is added (good!) but the cursor jumps back up to row1, column 1.</strong></em><br>\r\n<br>\r\nAs&nbsp;I already mentioned there is no other control to tab on to, so tabbing starts again at first cell of first row.<br>\r\n<br>\r\n<em><strong>&gt;&gt;This is all very confusing and I don´t know how to present my users with an intuitive working behaviour here. Can anybody please help me here?</strong></em><br>\r\n<br>\r\nI am assuming that your real world app would have some other control to tab on to (or atleast&nbsp;the datagrid wouldnt start with no existing rows)&nbsp;and hence reducing the confusion. (try adding a button or text box outside datagrid and you would understand what I am trying to say).\r\n",
    "PostedDate": "2008-10-21T11:17:30.743-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126809",
    "ThreadId": "38163",
    "Html": "<p>I thank you for your explanation. This helped me to understand the logic. I extended my simple project and added a text box before and after the grid and I see your point. But there is still one thing that feels wrong to me:<br>\r\n<br>\r\nIf I am editing the last cell in the grid and hit Tab, a new placeholder-row gets added to the grid, but the focus jumps into the textbox that is placed underneath the grid ignoring the placeholder (and the user has to click back in the grid to access the new row). So I have now 2 rows in my grid, one real and one placeholder. If I now click in the first cell again and press tab, this time the focus also moves through the placeholder cells!</p>\r\n<p>So it seems the new placeholder row is added AFTER the key event (TAB) has been processed. But shouldn´t it be before?<br>\r\n<br>\r\nAgreed, this way the user can always leave the grid via tab. But in my opinion&nbsp;it would be&nbsp;a good option to be able to toggle this behaviour especially in the CanUserAddRows-Mode.<br>\r\n<br>\r\nAnyway, maybe it is a solution for me&nbsp;to place the &quot;Add New&quot; on a key (F2, I don´t want an Addnew button, the form should be operatable with keyboard only) and set the Focus to the first cell.&nbsp;But I am having problems with that too. I tried this:<br>\r\n<span style=\"font-size:10px\">\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:10px;color:#0000ff\">protected</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#0000ff\">void</span><span style=\"font-size:10px\"> OnDataGridPreviewKeyDown(</span><span style=\"font-size:10px;color:#0000ff\">object</span><span style=\"font-size:10px\"> sender, </span><span style=\"font-size:10px;color:#2b91af\">RoutedEventArgs</span><span style=\"font-size:10px\"> args) {<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;KeyEventArgs</span><span style=\"font-size:10px\"> e = args </span><span style=\"font-size:10px;color:#0000ff\">as</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">KeyEventArgs</span><span style=\"font-size:10px\">;<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;if</span><span style=\"font-size:10px\"> (e.Key == </span><span style=\"font-size:10px;color:#2b91af\">Key</span><span style=\"font-size:10px\">.F2) {<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this</span><span style=\"font-size:10px\">.grdMain.CommitEdit();<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataRow</span><span style=\"font-size:10px\"> row = </span><span style=\"font-size:10px;color:#0000ff\">new</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">DataRow</span><span style=\"font-size:10px\">(</span><span style=\"font-size:10px;color:#a31515\">&quot;[new row]&quot;</span><span style=\"font-size:10px\">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//DataRow is my dataobject<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.Add(row);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//the grid is databound to myList<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BindingExpression</span><span style=\"font-size:10px\"> b = </span><span style=\"font-size:10px;color:#2b91af\">BindingOperations</span><span style=\"font-size:10px\">.GetBindingExpression(</span><span style=\"font-size:10px;color:#0000ff\">this</span><span style=\"font-size:10px\">.grdMain, </span><span style=\"font-size:10px;color:#2b91af\">DataGrid</span><span style=\"font-size:10px\">.ItemsSourceProperty);<br>\r\n</span><span style=\"font-size:10px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b.UpdateTarget();&nbsp;&nbsp;&nbsp;&nbsp;//I tried this to force the grid to add the new&nbsp;DataGridCellsPresenter for the new row, but does not work<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataGridCell</span><span style=\"font-size:10px\"> c = </span><span style=\"font-size:10px;color:#2b91af\">DataGridUtilities</span><span style=\"font-size:10px\">.GetCell(</span><span style=\"font-size:10px;color:#0000ff\">this</span><span style=\"font-size:10px\">.grdMain, myList.Count - 1, 0);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.Focus();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args.Handled = </span><span style=\"font-size:10px;color:#0000ff\">true</span><span style=\"font-size:10px\">;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n}<br>\r\n</span><span style=\"font-size:10px\"><br>\r\nThis gives me an exception in GetCell, however, since the index of myList (that already has the new row)&nbsp;is pointing to the placeholder row in the grid, since the new row has not yet been added.</span></p>\r\n<p><span style=\"font-size:10px\">Can you give me a hint how to achieve this?</span></p>\r\n<p><span style=\"font-size:10px\">Joachim\r\n<p>&nbsp;</p>\r\n</span></p>\r\n",
    "PostedDate": "2008-10-22T01:52:57.607-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126956",
    "ThreadId": "38163",
    "Html": "Is&nbsp;your 'mylist' an ObservableCollection&lt;DataRow&gt;? If an ItemsControl like DataGrid&nbsp;needs to pickup changes to the ItemsSource collection from outside its scope, the collection assigned to ItemsSource should implement INotifyCollectionChanged. <em>System.Collections.ObjectModel.ObservableCollection</em> is a&nbsp;packaged collection class which implements this interface, so use it if possible.<br>\r\n<br>\r\nThen the&nbsp;code would be as simple as....<br>\r\n<br>\r\n<span style=\"font-size:10px;color:#0000ff\">protected</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#0000ff\">void</span><span style=\"font-size:10px\"> OnDataGridPreviewKeyDown(</span><span style=\"font-size:10px;color:#0000ff\">object</span><span style=\"font-size:10px\"> sender, </span><span style=\"font-size:10px;color:#2b91af\">RoutedEventArgs</span><span style=\"font-size:10px\"> args) {<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;KeyEventArgs</span><span style=\"font-size:10px\"> e = args </span><span style=\"font-size:10px;color:#0000ff\">as</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">KeyEventArgs</span><span style=\"font-size:10px\">;<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;if</span><span style=\"font-size:10px\"> (e.Key == </span><span style=\"font-size:10px;color:#2b91af\">Key</span><span style=\"font-size:10px\">.F2) {</span><span style=\"font-size:10px\"><br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataRow</span><span style=\"font-size:10px\"> row = </span><span style=\"font-size:10px;color:#0000ff\">new</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">DataRow</span><span style=\"font-size:10px\">(</span><span style=\"font-size:10px;color:#a31515\">&quot;[new row]&quot;</span><span style=\"font-size:10px\">);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//DataRow is my dataobject<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.Add(row);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//the grid is databound to myList</span><span style=\"font-size:10px\"><br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataGridCell</span><span style=\"font-size:10px\"> c = </span><span style=\"font-size:10px;color:#2b91af\">DataGridUtilities</span><span style=\"font-size:10px\">.GetCell(</span><span style=\"font-size:10px;color:#0000ff\">this</span><span style=\"font-size:10px\">.grdMain, myList.Count - 1, 0); //Assume it&nbsp;takes care of virtualization<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.Focus();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args.Handled = </span><span style=\"font-size:10px;color:#0000ff\">true</span><span style=\"font-size:10px\">;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n}<br>\r\n</span><br>\r\nA couple of other thoughts.....<br>\r\n<ul>\r\n    <li>Try using someother key, other than F2. F2 already has a special meaning in DataGrid's context. It is to edit the&nbsp;cell with focus and you will lose that functionality.</li>\r\n    <li>&nbsp;I assume that your DataGridUtilities.GetCell takes care of virtualization (by calling DataGrid.ScrollIntoView method).</li>\r\n    <li>You have to note that if you are adding new object to the collection&nbsp;then it would be your responsibility to handle the cancel operation (you wont get it for free as is the case with using our new row place holder by hitting escape)</li>\r\n</ul>\r\n<p>So considering all these, if&nbsp;starting the edit&nbsp;of new row placeholder&nbsp;on keyboard action will satisfy your requirement then&nbsp;the following code may just work for you<br>\r\n<br>\r\n<span style=\"font-size:10px;color:#0000ff\">protected</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#0000ff\">void</span><span style=\"font-size:10px\"> OnDataGridPreviewKeyDown(</span><span style=\"font-size:10px;color:#0000ff\">object</span><span style=\"font-size:10px\"> sender, </span><span style=\"font-size:10px;color:#2b91af\">RoutedEventArgs</span><span style=\"font-size:10px\"> args) {<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;KeyEventArgs</span><span style=\"font-size:10px\"> e = args </span><span style=\"font-size:10px;color:#0000ff\">as</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">KeyEventArgs</span><span style=\"font-size:10px\">;<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;if</span><span style=\"font-size:10px\"> (e.Key == &lt;someKey&gt;</span><span style=\"font-size:10px\">) {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; grdMain.ScrollIntoView(CollectionView.NewItemPlaceholder, grdMain.ColumnFromDisplayIndex(0));<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataGridCell</span><span style=\"font-size:10px\"> c = </span><span style=\"font-size:10px;color:#2b91af\">DataGridUtilities</span><span style=\"font-size:10px\">.GetCell(</span><span style=\"font-size:10px;color:#0000ff\">this</span><span style=\"font-size:10px\">.grdMain, grdMain.Items.Count - 1, 0);&nbsp; //assuming that the&nbsp;column index here is display index<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.Focus();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; grdMain.BeginEdit();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args.Handled = </span><span style=\"font-size:10px;color:#0000ff\">true</span><span style=\"font-size:10px\">;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n}<br>\r\n</span></p>\r\n",
    "PostedDate": "2008-10-22T10:19:56.443-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "127120",
    "ThreadId": "38163",
    "Html": "I am sorry, but the first code expamle is definitely not working. The GetCell() method that tries to access the newly added item throws an exception, because the newly added item in the ObservableCollection is not yet present in the datagrid. This is my code (CanUserAddRows=false):<br>\r\n<span style=\"font-size:10px;color:#0000ff\"><br>\r\nprivate</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">ObservableCollection</span><span style=\"font-size:10px\">&lt;</span><span style=\"font-size:10px;color:#2b91af\">DataRow</span><span style=\"font-size:10px\">&gt; myList = </span><span style=\"font-size:10px;color:#0000ff\">new</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">ObservableCollection</span><span style=\"font-size:10px\">&lt;</span><span style=\"font-size:10px;color:#2b91af\">DataRow</span><span style=\"font-size:10px\">&gt;();<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">protected</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#0000ff\">void</span><span style=\"font-size:10px\"> OnDataGridPreviewKeyDown(</span><span style=\"font-size:10px;color:#0000ff\">object</span><span style=\"font-size:10px\"> sender, </span><span style=\"font-size:10px;color:#2b91af\">RoutedEventArgs</span><span style=\"font-size:10px\"> args) {<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;KeyEventArgs</span><span style=\"font-size:10px\"> e = args </span><span style=\"font-size:10px;color:#0000ff\">as</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">KeyEventArgs</span><span style=\"font-size:10px\">;<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;if</span><span style=\"font-size:10px\"> (e.Key == </span><span style=\"font-size:10px;color:#2b91af\">Key</span><span style=\"font-size:10px\">.F12) {<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataRow</span><span style=\"font-size:10px\"> row = </span><span style=\"font-size:10px;color:#0000ff\">new</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">DataRow</span><span style=\"font-size:10px\">(</span><span style=\"font-size:10px;color:#a31515\">&quot;[new row]&quot;</span><span style=\"font-size:10px\">);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myList.Add(row);<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataGridCell</span><span style=\"font-size:10px\"> c = </span><span style=\"font-size:10px;color:#2b91af\">DataGridUtilities</span><span style=\"font-size:10px\">.GetCell(</span><span style=\"font-size:10px;color:#0000ff\">this</span><span style=\"font-size:10px\">.grdMain, grdMain.Items.Count - 1, 0);</span><span style=\"font-size:10px;color:#008000\">//this causes an exception because the underlying datagrid does not yet contain the new row<br>\r\n</span><span style=\"font-size:10px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.Focus();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grdMain.BeginEdit();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args.Handled = </span><span style=\"font-size:10px;color:#0000ff\">true</span><span style=\"font-size:10px\">;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n}</span><br>\r\n<span style=\"font-size:10px\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:10px;color:#0000ff\">public</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#0000ff\">static</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">DataGridCell</span><span style=\"font-size:10px\"> GetCell(</span><span style=\"font-size:10px;color:#2b91af\">DataGrid</span><span style=\"font-size:10px\"> grd, </span><span style=\"font-size:10px;color:#0000ff\">int</span><span style=\"font-size:10px\"> row, </span><span style=\"font-size:10px;color:#0000ff\">int</span><span style=\"font-size:10px\"> column) {<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;DataGridRow</span><span style=\"font-size:10px\"> rowContainer = GetRow(grd, row);<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;if</span><span style=\"font-size:10px\"> (rowContainer != </span><span style=\"font-size:10px;color:#0000ff\">null</span><span style=\"font-size:10px\">) {<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataGridCellsPresenter</span><span style=\"font-size:10px\"> presenter = GetVisualChild&lt;</span><span style=\"font-size:10px;color:#2b91af\">DataGridCellsPresenter</span><span style=\"font-size:10px\">&gt;(rowContainer);<br>\r\n</span><span style=\"font-size:10px;color:#008000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// try to get the cell but it may possibly be virtualized<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataGridCell</span><span style=\"font-size:10px\"> cell = (</span><span style=\"font-size:10px;color:#2b91af\">DataGridCell</span><span style=\"font-size:10px\">)presenter.ItemContainerGenerator.ContainerFromIndex(column);<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if</span><span style=\"font-size:10px\"> (cell == </span><span style=\"font-size:10px;color:#0000ff\">null</span><span style=\"font-size:10px\">) {<br>\r\n</span><span style=\"font-size:10px;color:#008000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// now try to bring into view and retreive the cell<br>\r\n</span><span style=\"font-size:10px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grd.ScrollIntoView(rowContainer, grd.Columns[column]);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell = (</span><span style=\"font-size:10px;color:#2b91af\">DataGridCell</span><span style=\"font-size:10px\">)presenter.ItemContainerGenerator.ContainerFromIndex(column);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return</span><span style=\"font-size:10px\"> cell;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;return</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#0000ff\">null</span><span style=\"font-size:10px\">;<br>\r\n}\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<br>\r\nAlso, the second example has a flaw: If I am in the placeholder row and type some values, now I want to add a new row and hit F12 (in my case) nothing happens visually. The grid does the commit of the current (placholder) row (which actually should convert it in a real row, yes?), but obviously the current row is still treated as the placeholder. How can I trigger the addition of a new placeholder row without leaving the current row? Here is my code: (CanUserAddRows = true)<br>\r\n<span style=\"font-size:10px\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:10px;color:#0000ff\">protected</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#0000ff\">void</span><span style=\"font-size:10px\"> OnDataGridKeyDown(</span><span style=\"font-size:10px;color:#0000ff\">object</span><span style=\"font-size:10px\"> sender, </span><span style=\"font-size:10px;color:#2b91af\">RoutedEventArgs</span><span style=\"font-size:10px\"> args) {<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;KeyEventArgs</span><span style=\"font-size:10px\"> e = args </span><span style=\"font-size:10px;color:#0000ff\">as</span><span style=\"font-size:10px\"> </span><span style=\"font-size:10px;color:#2b91af\">KeyEventArgs</span><span style=\"font-size:10px\">;<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;if</span><span style=\"font-size:10px\"> (e.Key == </span><span style=\"font-size:10px;color:#2b91af\">Key</span><span style=\"font-size:10px\">.F12) {<br>\r\n</span><span style=\"font-size:10px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this</span><span style=\"font-size:10px\">.grdMain.ScrollIntoView(</span><span style=\"font-size:10px;color:#2b91af\">CollectionView</span><span style=\"font-size:10px\">.NewItemPlaceholder, grdMain.ColumnFromDisplayIndex(0));<br>\r\n</span><span style=\"font-size:10px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataGridCell</span><span style=\"font-size:10px\"> c = </span><span style=\"font-size:10px;color:#2b91af\">DataGridUtilities</span><span style=\"font-size:10px\">.GetCell(</span><span style=\"font-size:10px;color:#0000ff\">this</span><span style=\"font-size:10px\">.grdMain, grdMain.Items.Count - 1, 0);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c.Focus();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grdMain.BeginEdit();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args.Handled = </span><span style=\"font-size:10px;color:#0000ff\">true</span><span style=\"font-size:10px\">;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n}\r\n<p>&nbsp;</p>\r\n</span></p>\r\nIs there any workaround for this?<br>\r\nJoachim\r\n",
    "PostedDate": "2008-10-23T00:49:24.98-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "129498",
    "ThreadId": "38163",
    "Html": "For the first example, you need to call DataGrid.UpdateLayout() before calling GetCell().<br>\r\n<br>\r\nIn the second example, you will have to check if you are in the new row, do a commit, then set focus on the new placeholder and begin edit.\r\n",
    "PostedDate": "2008-11-02T08:13:42.71-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]