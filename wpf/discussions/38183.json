[
  {
    "Id": "126631",
    "ThreadId": "38183",
    "Html": "We are generating our DataGridColumns in code based on some outside configuration, and would like all cells to be read-only.<br>\r\n<br>\r\nWe're creating DataGridTemplateColumns, that has a CellEditingTemplate of null and a Binding mode of OneWay (found those suggestions in another post on this forum).&nbsp; All is well until I double-click on a cell at runtime.&nbsp; This apparently causes a DataGrid.BeginEditCommand to get fired, and it then throws an exception saying&nbsp; '<strong>EditItem'</strong> <strong>is not allowed for this view</strong>.&nbsp; (in DataGrid.EditRowItem calling IEditableCollectionView.EditItem)<br>\r\n<br>\r\nI tried intercepting the DataGrid.BeginEditCommand in the containing view to set e.Handled = true, or even set e.CanExecute = false in the CanExecute handler for that command, but it doesn't hit either one.&nbsp; <br>\r\n<br>\r\nHow can I turn off this ability to edit a cell via double-click? <br>\r\n<br>\r\nIs there any more straight-forward way to make cells read-only without the ability to edit? <br>\r\n<br>\r\nThanks.<br>\r\n",
    "PostedDate": "2008-10-21T12:03:22.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126649",
    "ThreadId": "38183",
    "Html": "<p>The V1 release of DataGrid would have a IsReadOnly boolean on DataGridColumn which when set to true will disable the editing for all the cells of that column. This feature was not completed for the current release.</p>\r\n<p>It seems that your underlying CollectionView doesn't support editing (based on underlying data object). Hence you will not be able to edit cells of any column. So you can <strong>try</strong> disabling the editing for all the cells (irrespective of which column they belong too) as follows<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataGrid&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataGrid.Resources&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Style TargetType=&quot;{x:Type toolkit:DataGridCell}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Setter Property=&quot;IsReadOnly&quot; Value=&quot;True&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Style&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataGrid.Resources&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataGrid&gt;<br>\r\n<br>\r\nBut if you can wait till V1, it would be much simpler.</p>\r\n",
    "PostedDate": "2008-10-21T13:02:57.517-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "127007",
    "ThreadId": "38183",
    "Html": "You could also provide your own templates for the columns.&nbsp; In the case below the TextBlock has no edit behavior so the events are never called and there is no chance of an exception:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;dg:DataGrid AutoGenerateColumns=&quot;False&quot; CanUserAddRows=&quot;False&quot; CanUserDeleteRows=&quot;False&quot;&nbsp; &gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;dg:DataGrid.Columns&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;dg:DataGridTemplateColumn Header=&quot;User Name&quot; SortMemberPath=&quot;UserName&quot; &gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;dg:DataGridTemplateColumn.CellTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;DataTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;TextBlock Text=&quot;{Binding Path=UserName}&quot; Margin=&quot;1&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/DataTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/dg:DataGridTemplateColumn.CellTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/dg:DataGridTemplateColumn&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dg:DataGrid.Columns&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dg:DataGrid&gt;<br>\r\n<br>\r\nAlso, if you find that the CanUserAddRows setting is not working properly (in my case only if the datagrid is inside a DataTemplate), you should check the following thread: http://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=34005<br>\r\n",
    "PostedDate": "2008-10-22T12:29:20.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]