[
  {
    "Id": "118667",
    "ThreadId": "35706",
    "Html": "System.Security.SecurityException was unhandled by user code<br>\r\nMessage=&quot;Request for the permission of type 'System.Security.Permissions.Securi\r\n<div id=\"ctl00_ctl00_Content_TabContentPanel_Content_DescriptionPanel\"><wbr>tyPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' failed.&quot;<br>\r\nSource=&quot;WPFToolkit&quot;<br>\r\nStackTrace:<br>\r\nat Microsoft.Windows.Controls.WeakHash<wbr>table.SetWeak(Object key, Object value)<br>\r\nat Microsoft.Windows.Controls.DataGrid<wbr>Helper.GetPropertyTransferEnabledMa<wbr>pForObject(DependencyObject d, DependencyProperty p)<br>\r\nat Microsoft.Windows.Controls.DataGrid<wbr>Helper.TransferProperty(DependencyO<wbr>bject d, DependencyProperty p)<br>\r\nat Microsoft.Windows.Controls.DataGrid<wbr>Column.SyncProperties()<br>\r\nat Microsoft.Windows.Controls.DataGrid<wbr>.UpdateColumnSizeConstraints(IList list)<br>\r\nat Microsoft.Windows.Controls.DataGrid<wbr>.OnColumnsChanged(Object sender, NotifyCollectionChangedEventArgs e)<br>\r\nat System.Collections.ObjectModel.Obse<wbr>rvableCollection`1.OnCollectionChan<wbr>ged(NotifyCollectionChangedEventArg<wbr>s e)<br>\r\nat Microsoft.Windows.Controls.DataGrid<wbr>ColumnCollection.OnCollectionChange<wbr>d(NotifyCollectionChangedEventArgs e)<br>\r\nat System.Collections.ObjectModel.Obse<wbr>rvableCollection`1.InsertItem(Int32 index, T item)<br>\r\nat Microsoft.Windows.Controls.DataGrid<wbr>ColumnCollection.InsertItem(Int32 index, DataGridColumn item)<br>\r\nat System.Collections.ObjectModel.Coll<wbr>ection`1.Add(T item)<br>\r\nat System.Collections.ObjectModel.Coll<wbr>ection`1.System.Collections.IList.A<wbr>dd(Object value)<br>\r\nat System.Windows.Markup.BamlRecordRea<wbr>der.SetPropertyValueToParent(Boolea<wbr>n fromStartTag, Boolean&amp; isMarkupExtension)<br>\r\nInnerException: <br>\r\n<br>\r\nI\r\nmanaged to hack out the weak hash table references but then I lose the\r\ncolumn headers. A workaround for this would be greatly appreciated and\r\nI would hope that the released version will support partial trust xbap\r\nas it is a supported means of deployment.</div>\r\n",
    "PostedDate": "2008-09-15T14:05:07.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "118681",
    "ThreadId": "35706",
    "Html": "I managed to find a fairly easy way to work around this issue.&nbsp; I simply replaced the hash table with a generic collection.&nbsp; Replace the following two methods and field declaration in DataGridHelper.cs (lines 354-387) with the ones below and everything should work :)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static Dictionary&lt;DependencyProperty, bool&gt; GetPropertyTransferEnabledMapForObject(DependencyObject d, DependencyProperty p)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dictionary&lt;DependencyProperty, bool&gt; propertyTransferEnabledForObject = null;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (_propertyTransferEnabledMap.ContainsKey(d))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propertyTransferEnabledForObject = _propertyTransferEnabledMap[d];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (propertyTransferEnabledForObject == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propertyTransferEnabledForObject = new Dictionary&lt;DependencyProperty, bool&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _propertyTransferEnabledMap.Add(d, propertyTransferEnabledForObject);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return propertyTransferEnabledForObject;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static bool IsPropertyTransferEnabled(DependencyObject d, DependencyProperty p)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dictionary&lt;DependencyProperty, bool&gt; propertyTransferEnabledForObject = null;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (_propertyTransferEnabledMap.ContainsKey(d))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propertyTransferEnabledForObject = _propertyTransferEnabledMap[d];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (propertyTransferEnabledForObject != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool isPropertyTransferEnabled;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (propertyTransferEnabledForObject.TryGetValue(p, out isPropertyTransferEnabled))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return isPropertyTransferEnabled;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ///&nbsp;&nbsp;&nbsp;&nbsp; Tracks which properties are currently being transfered.&nbsp; This information is needed when GetPropertyTransferEnabledMapForObject<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ///&nbsp;&nbsp;&nbsp;&nbsp; is called inside of Coersion.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static Dictionary&lt;DependencyObject, Dictionary&lt;DependencyProperty, bool&gt;&gt; _propertyTransferEnabledMap = new Dictionary&lt;DependencyObject, Dictionary&lt;DependencyProperty, bool&gt;&gt;();<br>\r\n",
    "PostedDate": "2008-09-15T14:59:28.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "118818",
    "ThreadId": "35706",
    "Html": "This is a known bug and will be fixed in the v1 release.\r\n",
    "PostedDate": "2008-09-16T06:14:39.63-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]