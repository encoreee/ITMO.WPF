[
  {
    "Id": "138010",
    "ThreadId": "41591",
    "Html": "The current DataGrid ColumnWidth (DataGridLength) options do not cover my most commonly required scenario, where columns have an automatically calculated minimum width so that column content will not be truncated, and where the column width will also grow to fill available space.<br>\r\n<br>\r\nSo, it would be just like the current Star option, but with the MinWidth of each column set to the ActualWidth of the column if it were sized using Auto.<br>\r\n<br>\r\nI am currently achieving this using custom code (on DataGrid v1), but I would have thought this would be a common enough requirement to warrant a simpler approach, like a value that could be set on the ColumnWidth property of the DataGrid.<br>\r\n<br>\r\nThis sizing technique is particularly useful for scenarios where columns are auto-generated.\r\n",
    "PostedDate": "2008-12-05T07:01:36.753-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "138082",
    "ThreadId": "41591",
    "Html": "Thanks for the suggestion, chrisduff.  We will take this into consideration when choosing features for V2.\r\n",
    "PostedDate": "2008-12-05T10:37:35.97-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "144618",
    "ThreadId": "41591",
    "Html": "chrisduff,<br>\r\n<br>\r\ncould you give a clue as to how you are providing this behavior with custom code?<br>\r\n<br>\r\nI can't seem to find any way of finding out from a column what it's fitted width should be... short of declaring it's width as Auto and peeking at the ActualWidth property.<br>\r\n<br>\r\nLike yourself, I would like all auto-generated columns to have a minimum width set to the &quot;Auto&quot; value, and the width set to &quot;*&quot;.<br>\r\n<br>\r\nThanks for any help.<br>\r\n<br>\r\nKB \r\n",
    "PostedDate": "2009-01-05T21:26:11.47-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "146214",
    "ThreadId": "41591",
    "Html": "Hi KB,<br>\r\n<br>\r\nYou're on the right track re: declaring columns as Auto and peeking at their ActualWidth property.<br>\r\n<br>\r\nMy approach has been to create my own derived DataGrid class to work around various issues such as this. I've quickly edited my code to leave the parts relevant to this thread and pasted below (not compiled/tested).<br>\r\n<br>\r\nSome points to note:<br>\r\n<br>\r\n&gt; It's obviously a hack approach, but does the job for me and seems to be the easiest way to achieve the functionality.<br>\r\n&gt; Note that I only use this data grid for read-only purposes. It works for both pre-defined and auto-generated column scenarios.<br>\r\n&gt; I've noticed UI responsiveness issues during resizing when used with large data sets.<br>\r\n<br>\r\nI hope you find it useful.<br>\r\n<br>\r\nCheers,<br>\r\nChris<br>\r\n===========================<br>\r\nusing System;<br>\r\nusing System.Collections;<br>\r\nusing System.Windows;<br>\r\nusing System.Windows.Controls;<br>\r\nusing System.Windows.Input;<br>\r\nusing Microsoft.Windows.Controls;\r\n<p>namespace MyNamespace<br>\r\n{<br>\r\n    public class MyDataGrid : DataGrid<br>\r\n    {<br>\r\n        private bool newCols = false;<br>\r\n        private bool rowsLoaded = false;<br>\r\n        private IList itemsSourceList = null;</p>\r\n<p>        public MyDataGrid()<br>\r\n        {<br>\r\n            this.LoadingRow += new EventHandler&lt;DataGridRowEventArgs&gt;(MyDataGrid_LoadingRow);<br>\r\n            this.LayoutUpdated += new EventHandler(MyDataGrid_LayoutUpdated);<br>\r\n        }</p>\r\n<p>        protected override void OnInitialized(EventArgs e)<br>\r\n        {<br>\r\n            base.OnInitialized(e);</p>\r\n<p>            if (this.ColumnWidth.IsStar)<br>\r\n            {<br>\r\n                if (this.Columns.Count &gt; 0)<br>\r\n                {<br>\r\n                    newCols = true;<br>\r\n                    foreach (DataGridColumn col in this.Columns)<br>\r\n                    {<br>\r\n                        col.Width = DataGridLength.Auto;<br>\r\n                    }<br>\r\n                }<br>\r\n            }<br>\r\n        }<br>\r\n        <br>\r\n        protected override void OnAutoGeneratingColumn(DataGridAutoGeneratingColumnEventArgs e)<br>\r\n        {<br>\r\n            base.OnAutoGeneratingColumn(e);</p>\r\n<p>            if (this.ColumnWidth.IsStar)<br>\r\n            {<br>\r\n                e.Column.Width = DataGridLength.Auto;<br>\r\n            }<br>\r\n        }</p>\r\n<p>        protected override void OnAutoGeneratedColumns(EventArgs e)<br>\r\n        {<br>\r\n            base.OnAutoGeneratedColumns(e);</p>\r\n<p>            if (this.ColumnWidth.IsStar)<br>\r\n            {<br>\r\n                newCols = true;<br>\r\n                rowsLoaded = false;<br>\r\n                itemsSourceList = null;<br>\r\n            }<br>\r\n        }</p>\r\n<p>        private void MyDataGrid_LoadingRow(object sender, DataGridRowEventArgs e)<br>\r\n        {<br>\r\n            if (this.ColumnWidth.IsStar)<br>\r\n            {<br>\r\n                if (!rowsLoaded)<br>\r\n                {<br>\r\n                    if (itemsSourceList == null)<br>\r\n                    {<br>\r\n                        itemsSourceList = this.ItemsSource as IList;<br>\r\n                    }</p>\r\n<p>                    if (itemsSourceList == null)<br>\r\n                    {<br>\r\n                        rowsLoaded = true;<br>\r\n                    }<br>\r\n                    else<br>\r\n                    {<br>\r\n                        if (itemsSourceList.IndexOf(e.Row.Item) == (itemsSourceList.Count - 1))<br>\r\n                        {<br>\r\n                            rowsLoaded = true;<br>\r\n                        }<br>\r\n                    }<br>\r\n                }<br>\r\n            }<br>\r\n        }</p>\r\n<p>        private void MyDataGrid_LayoutUpdated(object sender, EventArgs e)<br>\r\n        {<br>\r\n            if (rowsLoaded)<br>\r\n            {<br>\r\n                if (this.ColumnWidth.IsStar)<br>\r\n                {<br>\r\n                    if (newCols)<br>\r\n                    {<br>\r\n                        double totalMinWidth = 0D;<br>\r\n                        foreach (DataGridColumn col in this.Columns)<br>\r\n                        {<br>\r\n                            col.MinWidth = col.ActualWidth;<br>\r\n                            totalMinWidth += col.MinWidth;<br>\r\n                        }<br>\r\n                        this.MinWidth = totalMinWidth;</p>\r\n<p>                        newCols = false;<br>\r\n                    }</p>\r\n<p>                    ResizeColumns();<br>\r\n                }<br>\r\n            }<br>\r\n        }</p>\r\n<p>        private void ResizeColumns()<br>\r\n        {<br>\r\n            double leftover = (this.ActualWidth - this.MinWidth);<br>\r\n            double leftoverPerCol = (leftover / this.Columns.Count);</p>\r\n<p>            foreach (DataGridColumn col in this.Columns)<br>\r\n            {<br>\r\n                double desiredWidth = (col.MinWidth + leftoverPerCol);</p>\r\n<p>                if (col.ActualWidth != desiredWidth)<br>\r\n                {<br>\r\n                    col.Width = new DataGridLength(desiredWidth);<br>\r\n                }<br>\r\n            }<br>\r\n        }<br>\r\n    }<br>\r\n}<br>\r\n=========================== </p>\r\n",
    "PostedDate": "2009-01-12T00:20:59.667-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]