[
  {
    "Id": "461445",
    "ThreadId": "217802",
    "Html": "<p>I am trying to use the AutoCompleteBox to implement a&nbsp;filesystem based&nbsp;auto-completion, ala the run prompt (though only for folders).<br>The AutoCompleteBox seems to work well if you have a static list, but I am trying to update the list with every keystroke.&nbsp; I am still having problems, and I'd like some help.&nbsp; Here's the problems I've had so far, and what I've done to solve some of them:</p>\r\n<p>The first problem I had was that the Text property is not pushed down to the DataContext every time the text changes.&nbsp; This is true of a TextBox, as well, so I expected this.&nbsp; To get around the problem, I added a TextChanged handler (so I could handle deleting text, otherwise I'd use a TextInput handler).&nbsp; Every time the handler is called, I update the DataContext's &quot;Folder&quot; property (which is bound to AutoTextBox.Text), and the completion list.</p>\r\n<p>\r\n<p>&nbsp;</p>\r\n</p>\r\n<p>This caused a second problem.&nbsp; Every time the selection changes, the text changes, which updates the completion list.&nbsp; This broke browsing the completion list, because every time you selected an item (without commiting the selection), it would update the list, and kick the user out of the dropdown.&nbsp; For example, you couldn't pick an item in them middle by using the keyboard.<br>I tried many different combinations of hacks to solve the second problem, including handling various events, checking the SearchText, Text and SelectedItem properties, and trying to store and compare old values of properties between combinations of events.&nbsp; What I settled on to solve this was to check if the selected item's text was not equal to the text field (or if it was null).&nbsp; This solved the second problem.\r\n<p>&nbsp;</p>\r\n</p>\r\n<p>The third problem I have now is when the user selects an item from the list, if they start typing again, their selection is undone.<br>Try this:&nbsp; At the Run prompt: Type &quot;C:\\&quot;, select an item via the keyboard, then hit the &quot;\\&quot; key.&nbsp; It will continue typing and update the auto-completion based on that.<br>In the app I have now: The user types &quot;C:\\&quot;, selects an item via the keyboard, then hits the &quot;\\&quot; key.&nbsp; The app ignores the newly typed &quot;\\&quot;, kicks the user out of the popup, and reverts the text to whatever was typed before the popup was displayed.</p>\r\n<p>Here is the code I have so far (note: I've stripped out a little code.&nbsp; That code is working correctly, though, including the code that sets dataContext):</p>\r\n<p><span style=\"color:blue\">public</span> MyView()<br>{<br>&nbsp;&nbsp;&nbsp; InitializeComponent();<br>&nbsp;&nbsp;&nbsp; folderChooserBox.TextChanged += folderChooserBox_TextChanged;<br>}<br><br><span style=\"color:blue\">void</span> folderChooserBox_TextChanged(<span style=\"color:blue\">object</span> sender, RoutedEventArgs e)<br>{<br>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">var</span> newText = folderChooserBox.Text;<br>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">var</span> selectedItem = folderChooserBox.SelectedItem;<br><br>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">if</span> (selectedItem == <span style=\"color:blue\">null</span> || (<span style=\"color:blue\">string</span>)selectedItem != newText)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dataContext.UpdateFolderCompletion(newText);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dataContext.Folder = newText;<br>&nbsp;&nbsp;&nbsp; }<br>}</p>",
    "PostedDate": "2010-06-29T19:47:52.05-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]