[
  {
    "Id": "158587",
    "ThreadId": "47383",
    "Html": "Hi,<br>\r\n<br>\r\nI am attempting to add a validation template to the cells in my DataGrid. When an error occurs in a cell, I would like to show a tooltip-like message showing the error. I am doing this by setting the EditingElementStyle on each of the columns to a ControlTemplate that shows the error in a label next to the cell that has the error. The problem I am getting is that the error message label gets clipped to the bounds of the DataGrid whenever the message is very long, and so the user only gets to see half of the message. I have tried putting the label inside a canvas with ClipToBounds set to false, but the label still gets clipped.<br>\r\n<br>\r\nHere is some sample XAML that demonstrates the problem:<br>\r\n<br>\r\n<span style=\"font-size:10px;color:#0000ff\"><span style=\"font-size:10px;color:#0000ff\">&lt;Window x:Class=&quot;HandlingWpfDatabindingErrors.Window1&quot;<br>\r\n    xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n    xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n    xmlns:Controls=&quot;clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit&quot;<br>\r\n    xmlns:HandlingWpfDatabindingErrors=&quot;clr-namespace:HandlingWpfDatabindingErrors&quot;<br>\r\n    Title=&quot;Window1&quot; SizeToContent=&quot;WidthAndHeight&quot;&gt;<br>\r\n    &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;<br>\r\n        &lt;Controls:DataGrid ItemsSource=&quot;{x:Static HandlingWpfDatabindingErrors:Person.Persons}&quot; AutoGenerateColumns=&quot;False&quot; Width=&quot;100&quot;&gt;<br>\r\n            &lt;Controls:DataGrid.Resources&gt;<br>\r\n                &lt;Style x:Key=&quot;validationTemplate&quot; TargetType=&quot;{x:Type TextBox}&quot;&gt;<br>\r\n                    &lt;Setter Property=&quot;Validation.ErrorTemplate&quot;&gt;<br>\r\n                        &lt;Setter.Value&gt;<br>\r\n                            &lt;ControlTemplate&gt;<br>\r\n                                &lt;DockPanel&gt;<br>\r\n                                    &lt;Border BorderBrush=&quot;Red&quot; BorderThickness=&quot;2&quot; CornerRadius=&quot;5&quot;&gt;<br>\r\n                                        &lt;AdornedElementPlaceholder x:Name=&quot;adorner&quot;&gt;&lt;/AdornedElementPlaceholder&gt;<br>\r\n                                    &lt;/Border&gt;<br>\r\n                                    &lt;Canvas ClipToBounds=&quot;False&quot; Panel.ZIndex=&quot;9999&quot;&gt;<br>\r\n                                        &lt;Label Margin=&quot;2,0,0,0&quot; Foreground=&quot;Red&quot; FontWeight=&quot;Bold&quot; Background=&quot;White&quot; BorderThickness=&quot;1&quot; <br>\r\n                       Content=&quot;{Binding ElementName=adorner,Path=AdornedElement.(Validation.Errors)[0].ErrorContent}&quot;&gt;<br>\r\n                                            &lt;Label.BitmapEffect&gt;<br>\r\n                                                &lt;DropShadowBitmapEffect Color=&quot;Black&quot; Direction=&quot;320&quot; ShadowDepth=&quot;10&quot; Softness=&quot;0.5&quot; Opacity=&quot;0.7&quot;/&gt;<br>\r\n                                            &lt;/Label.BitmapEffect&gt;<br>\r\n                                            &lt;Label.BorderBrush&gt;<br>\r\n                                                &lt;SolidColorBrush Color=&quot;{x:Static SystemColors.WindowFrameColor}&quot;/&gt;<br>\r\n                                            &lt;/Label.BorderBrush&gt;<br>\r\n                                        &lt;/Label&gt;<br>\r\n                                    &lt;/Canvas&gt;<br>\r\n                                &lt;/DockPanel&gt;<br>\r\n                            &lt;/ControlTemplate&gt;<br>\r\n                        &lt;/Setter.Value&gt;                        <br>\r\n                    &lt;/Setter&gt;<br>\r\n                &lt;/Style&gt;<br>\r\n            &lt;/Controls:DataGrid.Resources&gt;<br>\r\n            &lt;Controls:DataGrid.Columns&gt;<br>\r\n                &lt;Controls:DataGridTextColumn Binding=&quot;{Binding Age,ValidatesOnExceptions=True}&quot; Header=&quot;Age&quot; EditingElementStyle=&quot;{StaticResource validationTemplate}&quot;/&gt;<br>\r\n                &lt;Controls:DataGridTextColumn Binding=&quot;{Binding Height,ValidatesOnExceptions=True}&quot; Header=&quot;Height&quot; EditingElementStyle=&quot;{StaticResource validationTemplate}&quot;/&gt;<br>\r\n            &lt;/Controls:DataGrid.Columns&gt;\r\n<p>        &lt;/Controls:DataGrid&gt;<br>\r\n        &lt;Button Content=&quot;OK&quot;/&gt;        <br>\r\n    &lt;/StackPanel&gt;<br>\r\n&lt;/Window&gt;</p>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:10px;color:#0000ff\">The underlying class looks like this:<br>\r\n<br>\r\nnamespace HandlingWpfDatabindingErrors {<br>\r\n    public class Person {\r\n<p>&nbsp;</p>\r\n<p>        public static Person[] Persons = new Person[] {<br>\r\n            new Person(1,2),<br>\r\n            new Person(3,4),<br>\r\n            new Person(5,6)};</p>\r\n<p>        public double Age { get; set; }<br>\r\n        public double Height { get; set; }</p>\r\n<p>        public Person(double age, double height) {<br>\r\n            Age = age;<br>\r\n            Height = height;<br>\r\n        }<br>\r\n    }<br>\r\n}</p>\r\n<p>To reproduce this problem, put a non-numeric value (eg. AAAA) in one of the cells and you will see the message.<br>\r\n<br>\r\nThere are a couple of problems with this that I would like to fix<br>\r\n1. I would like to show the full message in the label without it getting clipped to the DataGrid bounds.<br>\r\n2. I would like to apply the validationTemplate ElementEditingStyle to all columns in my application automatically, rather than having to explicitly specify this every time.<br>\r\n3. I woud like to set <span style=\"font-size:10px;color:#0000ff\">ValidatesOnExceptions=True on all columns in my application rather than having to excplicitly do it on each binding</span><br>\r\n<br>\r\n<br>\r\nAny help is greatly appreciated!<br>\r\n<br>\r\nThanks,<br>\r\n<br>\r\nGeoff</p>\r\n</span></p>\r\n",
    "PostedDate": "2009-02-17T10:55:30.833-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]