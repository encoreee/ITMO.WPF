[
  {
    "Id": "244819",
    "ThreadId": "71745",
    "Html": "I'm getting desperate for a solution to this problem. I'm made a number<br>of different posts documenting my attempts to solve this from different<br>angles and I've received no response.<br><br>Again, the issue is that when a top level DataGrid's ItemsSource is<br>re-queried, any row selection made on a DataGrid (contained within<br>RowDetailsTemplate of the top level DataGrid) is lost, the selection's<br>RowDetails are collapsed, and these previous user selections can't seem<br>to be recovered in any programmatic way.<br><br>Thanks,<br><br>Bill",
    "PostedDate": "2009-10-12T13:48:37.08-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "245251",
    "ThreadId": "71745",
    "Html": "Finally figured this one out, or at least a good part of it. I found this: <br>http://www.codeplex.com/wpf/Thread/View.aspx?ThreadId=37823 which got me <br>close enough.<br><br>The DataGridRowEventArgs event args of the LoadingRow event has Row <br>property. It in turn exposes an Items collection where each item is a field <br>from the EntitySet. The Row property also exposes an IsSelected property and <br>setting this to true for the desired row does work.<br><br>However, if for some rows the RowDetails contain other controls like combo <br>boxes, and the DataContext for these other controls is not the same as the <br>grid, and the LoadingRowDetails event takes care of setting the DataContext <br>and SelectedIndex of the ComboBox, this leads to some very unsightly <br>updating. Wrapping the setting of the DataContext inside a <br>ComboBox.Items.DeferRefresh() does not help. But I suppose all that is for <br>another thread.<br><br>Here's a sample LoadingRow event handler:<br>private void DspGrid_LoadingRow(object sender, DataGridRowEventArgs e) {<br>   if (selectedDspPrimaryKeys.Count == 0) return;<br><br>   // find the DataTable row that this DataGrid row is assocaited with<br>   Dsp dsp = e.Row.Item as Dsp;<br><br>   // find its PK<br>   string pk = dsp.DspSerial.ToString();<br><br>   // determien whether it should be selected<br>   if (selectedDspPrimaryKeys.Contains(pk)) {<br>     e.Row.IsSelected = true;<br>     selectedDspPrimaryKeys.Clear();<br>   }<br>}<br><br>Somewhere before you reset the ItemsSource for the grid, load the pk of the <br>record into a List&lt;string&gt;.<br><br><br>I hope somebody else finds this useful.<br><br><br>Bill<br><br>On 10/12/2009 3:48 PM, wpmccormick wrote:<br>&gt; <br>&gt; <br>&gt; From: wpmccormick<br>&gt; <br>&gt; I'm getting desperate for a solution to this problem. I'm made a number<br>&gt; of different posts documenting my attempts to solve this from different<br>&gt; angles and I've received no response.<br>&gt; <br>&gt; Again, the issue is that when a top level DataGrid's ItemsSource is<br>&gt; re-queried, any row selection made on a DataGrid (contained within<br>&gt; RowDetailsTemplate of the top level DataGrid) is lost, the selection's<br>&gt; RowDetails are collapsed, and these previous user selections can't seem<br>&gt; to be recovered in any programmatic way.<br>&gt; <br>&gt; Thanks,<br>&gt; <br>&gt; Bill<br>&gt; <br>&gt; Read the full discussion online <br>&gt; &lt;http://wpf.codeplex.com/Thread/View.aspx?ThreadId=71745&ANCHOR#Post244819&gt;.<br>&gt; <br>&gt; To add a post to this discussion, reply to this email <br>&gt; ([email removed] <br>&gt; &lt;mailto:[email removed]?subject=[wpf:71745]&gt;)<br>&gt; <br>&gt; To start a new discussion for this project, email <br>&gt; [email removed] &lt;mailto:[email removed]&gt;<br>&gt; <br>&gt; You are receiving this email because you subscribed to this discussion <br>&gt; on CodePlex. You can unsubscribe or change your settings <br>&gt; &lt;https://wpf.codeplex.com/subscriptions/thread/project/edit&gt; on <br>&gt; codePlex.com.<br>&gt; <br>&gt; Please note: Images and attachments will be removed from emails. Any <br>&gt; posts to this discussion will also be available online at codeplex.com<br>&gt;",
    "PostedDate": "2009-10-13T13:17:29.427-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]