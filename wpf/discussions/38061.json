[
  {
    "Id": "126261",
    "ThreadId": "38061",
    "Html": "We do basic NUnit testing of our dialog boxes, consisting of WPF controls, using data bindings to properties on a source object:<br>\r\n&nbsp;-&nbsp;We set up the source object<br>\r\n&nbsp;- We open the dialog<br>\r\n&nbsp;- We go through the Controls in the dialog and check that they display the correct value, e.g. compare the Text&nbsp;properties of TextBoxes with the source object property value bound to the Control<br>\r\n&nbsp;- We then go through the control and change their properties to emulate user input and test that the updated values make it into the source object's properties (we e.g. set the Text properties of TextBoxes or set the Text propertie or the SelectedIndex property of ComboBoxes)<br>\r\n<br>\r\nThis works for basic controls of the type CheckBox, TextBox and ComboBox.&nbsp; But I haven't been able to make it work for DataGrid controls bound to IList&lt;T&gt; properties on the source object.<br>\r\n<br>\r\nWhat I&nbsp;first did to&nbsp;access the cell controls,&nbsp;and attempt to modify them,&nbsp;was<br>\r\n&nbsp;&nbsp; <span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGrid</span></span><span style=\"font-size:13px\"> tupleGrid = (</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGrid</span></span><span style=\"font-size:13px\">) grid.Children[25]; // The controls of the dialog are laid out in a Grid<br>\r\n&nbsp;&nbsp;&nbsp; <span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGridColumn</span></span><span style=\"font-size:13px\"> tupleGridFirstColumn = tupleGrid.Columns[0];<br>\r\n&nbsp;&nbsp;&nbsp; <span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">TextBlock</span></span><span style=\"font-size:13px\"> tupleGridCellControl = (</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">TextBlock</span></span><span style=\"font-size:13px\">)tupleGridFirstColumn.GetCellContent(cells[0].Item);<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp; string</span></span><span style=\"font-size:13px\"> aNewTextValue = </span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">&quot;This a new value to put in a cell&quot;</span></span><span style=\"font-size:13px\">;<br>\r\n&nbsp;&nbsp;&nbsp; tupleGrid.CurrentCell = cells[0];<br>\r\n&nbsp;&nbsp;&nbsp; tupleGrid.BeginEdit();<br>\r\n&nbsp;&nbsp;&nbsp; tupleGridCellControl.Text = aNewTextValue;<br>\r\n</span><span style=\"font-size:13px;color:#008000\"><span style=\"font-size:13px;color:#008000\">&nbsp;&nbsp;&nbsp; tupleGrid.CommitEdit();<br>\r\n</span></span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">&nbsp;&nbsp; Assert</span></span><span style=\"font-size:13px\">.AreEqual(aNewTextValue, op.AListOfStucts[0].AStringValueThatBecomesTheColumnHeader, </span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">&quot;The new string value set on the DataGrid cell control, should have been transferred to the equivalent list item of the bound operator property&quot;</span></span><span style=\"font-size:13px\">);<br>\r\n<br>\r\nUnfortunately the test fails because the value in the list property member is the original value.<br>\r\n<br>\r\nI debugged this into&nbsp;<br>\r\n&gt;&nbsp;WPFToolkit.dll!Microsoft.Windows.Controls.DataGrid.EndEdit(System.Windows.Input.RoutedCommand command = {System.Windows.Input.RoutedCommand}, Microsoft.Windows.Controls.DataGridCell cellContainer = {Microsoft.Windows.Controls.DataGridCell: fdfsfds}, Microsoft.Windows.Controls.DataGridEditingUnit editingUnit = Row, bool exitEditMode = true) Line 2448&nbsp;C#<br>\r\n&nbsp;&nbsp;WPFToolkit.dll!Microsoft.Windows.Controls.DataGrid.OnCurrentCellChanged(System.Windows.DependencyObject d = {Microsoft.Windows.Controls.DataGrid Items.Count:3}, System.Windows.DependencyPropertyChangedEventArgs e = {System.Windows.DependencyPropertyChangedEventArgs}) Line 2116 + 0x1d bytes&nbsp;C#<br>\r\n[snip!]<br>\r\n<br>\r\nBut I was unable to debug any deeper than&nbsp;the line:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"font-size:13px\">command.Execute(editingUnit, cellContainer);<br>\r\n<br>\r\nBased on how running the dialog seemed to upgrade the source object's list property I modified the test to change cell, to trigger the update:<br>\r\n<span style=\"font-size:13px\"><span style=\"color:#0000ff\">&nbsp;&nbsp;&nbsp; string</span> aNewTextValue = <span style=\"color:#a31515\"><span style=\"color:#a31515\">&quot;This a new value to put in a cell&quot;</span></span>;<br>\r\n&nbsp;&nbsp;&nbsp; tupleGrid.CurrentCell = cells[0];<br>\r\n&nbsp;&nbsp;&nbsp; tupleGrid.BeginEdit(); // I've tried both with and without calling this method it didn't seem to make any difference<br>\r\n&nbsp;&nbsp;&nbsp; tupleGridCellControl.Text = aNewTextValue;<br>\r\n</span><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp; tupleGrid.CurrentCell = cells[1]; </span><span style=\"font-size:13px\"><span style=\"color:#008000\"><span style=\"color:#008000\">// Switching to a new cell update the source value of the previous cell<br>\r\n</span></span><span style=\"color:#2b91af\"><span style=\"color:#2b91af\">&nbsp;&nbsp; Assert</span></span>.AreEqual(aNewTextValue, op.AListOfStucts[0].AStringValueThatBecomesTheColumnHeader, <span style=\"color:#a31515\"><span style=\"color:#a31515\">&quot;The new string value set on the DataGrid cell control, should have been transferred to the equivalent list item of the bound operator property&quot;</span></span>);<br>\r\n<br>\r\nDoes anyone know what's the proper way of modifying the control, so that the update of the source will take place as it does during user interaction?<br>\r\n<br>\r\nThanx!</span></span></span></span></span>\r\n",
    "PostedDate": "2008-10-20T05:06:00.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126271",
    "ThreadId": "38061",
    "Html": "Found it.<br>\r\n<br>\r\nIt has to do with the point in time I get the cell control.&nbsp; I have to get the control, after the BeginEdit() call has been made, because that's the point in time when the _currentCellContainer() changes from null to something that holds what looks to be the right Control.&nbsp; Also the Control changes from a TextBlock to a TextBox.&nbsp; The code now looks like this, and the assert doesn't fail:<br>\r\n<span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp; string</span></span><span style=\"font-size:13px\"> aNewTextValue = </span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">&quot;This a new value to put in a cell&quot;</span></span><span style=\"font-size:13px\">;<br>\r\n&nbsp;&nbsp;&nbsp; tupleGrid.CurrentCell = cells[0];<br>\r\n&nbsp;&nbsp;&nbsp; tupleGrid.BeginEdit();<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">&nbsp;&nbsp;&nbsp; TextBox</span></span><span style=\"font-size:13px\"> tupleGridCellControl = (</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">TextBox</span></span><span style=\"font-size:13px\">) tupleGridFirstColumn.GetCellContent(cells[0].Item);<br>\r\n&nbsp;&nbsp;&nbsp; tupleGridCellControl.Text = aNewTextValue;<br>\r\n</span><span style=\"font-size:13px\">&nbsp;&nbsp;&nbsp; tupleGrid.CurrentCell = cells[1]; </span><span style=\"font-size:13px;color:#008000\"><span style=\"font-size:13px;color:#008000\">// Switching to a new cell update the source value of the previous cell<br>\r\n</span></span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">&nbsp;&nbsp;&nbsp; BindingExpression</span></span><span style=\"font-size:13px\"> bindexp = tupleGrid.GetBindingExpression(</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">ItemsControl</span></span><span style=\"font-size:13px\">.ItemsSourceProperty);<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">&nbsp;&nbsp;&nbsp; Assert</span></span><span style=\"font-size:13px\">.AreEqual(aNewTextValue, op.AListOfStucts[0].AStringValueThatBecomesTheColumnHeader, </span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">&quot;The new string value set on the DataGrid cell control, should have been transferred to the equivalent list item of the bound operator property&quot;</span></span><span style=\"font-size:13px\">);<br>\r\n<p>&nbsp;</p>\r\n</span>\r\n",
    "PostedDate": "2008-10-20T06:01:18.15-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]