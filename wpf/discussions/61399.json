[
  {
    "Id": "208276",
    "ThreadId": "61399",
    "Html": "<p>Hi!</p>\r\n<p>I just evaluate the charting capabilites of the new&nbsp;toolkit&nbsp;release&nbsp;and I think its&nbsp;great!</p>\r\n<p>But it would be nice to display the linear axis as logarithmic and it would be nice too, to display the charts as 3D charts.</p>\r\n<p>Are there any Option to do this?</p>\r\n<p>If no is it proposed for the next release?</p>\r\n<p>&nbsp;</p>\r\n<p>Regrads</p>\r\n<p>&nbsp;Hendrik</p>",
    "PostedDate": "2009-07-03T03:24:54.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "209302",
    "ThreadId": "61399",
    "Html": "<p>Hendrik,</p>\r\n<p>Yes, LogarithmicAxis is planned for a future release - as is the ability for people to easily write their own Axes to support *whatever* modes they need!</p>\r\n<p>Thanks for your patience!</p>",
    "PostedDate": "2009-07-06T23:07:23.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "209382",
    "ThreadId": "61399",
    "Html": "<p>Customizable axes sounds nice. From a previous job, I know first hand that a logarithmic axis can be pretty darn hard to do right. The users expect all sorts of things. E.g. the &quot;1..10..100&quot;&nbsp;labels&nbsp;should always be visible. Then they feed the chart with a dataset that varies between 1.10 and 5.50 and still expect the axis labels to make some sort of sense. It was... Interesting.</p>\r\n<p>What sort of performance are you guys targetting? In the application I worked on, our users typically displayed hundreds of various charts, each updated frequently. (feeding data from Nasdaq/NYSE and other stock exchanges)</p>",
    "PostedDate": "2009-07-07T03:18:27.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "211721",
    "ThreadId": "61399",
    "Html": "<p>Hi,</p>\r\n<p>thanks for your response!</p>\r\n<p>I thought you would say that :-)</p>\r\n<p>And what about 3D charts, is it planned too?</p>\r\n<p>Regrads</p>\r\n<p>Hendrik</p>",
    "PostedDate": "2009-07-14T06:45:15.257-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "211846",
    "ThreadId": "61399",
    "Html": "<p>bikedude,</p>\r\n<p>We want our performance to be enough that most scenarios &quot;just work&quot;. So if you have realistic scenarios that don't, then please let us know about them and we'll take that into account. :)</p>\r\n<p>&nbsp;</p>\r\n<p>hendrik82,</p>\r\n<p>3D is planned, but at a lower priority than rounding out our core 2D offering with some of the basics that aren't there yet (like logarithmic, etc.).</p>",
    "PostedDate": "2009-07-14T13:27:57.527-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "212047",
    "ThreadId": "61399",
    "Html": "<p>Well... One scenario: Chart the MSFT stock ticker in real time. Then try with a couple of hundred other stock tickers simultanuously. (keep in mind that you do not need a fancy-looking graph for such usage -- just&nbsp;plain linecharts will suffice)</p>",
    "PostedDate": "2009-07-15T02:40:36.183-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "212773",
    "ThreadId": "61399",
    "Html": "<p>bikedude,</p>\r\n<p>It's a fair point. I can imagine there are ways to do that which would have poor performance. However, I also think there may be ways that work with what we've got today. And if there aren't, there will always be scenarios that are out of reach. That's not to say we don't want to reach them now or in the future - just that the primary objective is to address the 80% scenario. And I don't *think* (though maybe I'm wrong!) the scenario you propose is super-common.</p>\r\n<p>Please know that I'm not dismissing the scenario at all - I'm just trying to balance it against other work that might be of greater communal benefit. Hope this seems reasonable!</p>",
    "PostedDate": "2009-07-16T14:16:05.723-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "212907",
    "ThreadId": "61399",
    "Html": "<p>I do not know how common it is, but keep in mind all those instrumentation graphs. Everything from Windows' own performance monitor, someone charting voltage drops in hundred different batteries to a tick-by-tick chart of MSFT.</p>\r\n<p>&quot;Realtime charting&quot; is often mentioned when a third-party vendor tries to push their charting component.</p>\r\n<p>Mind you, I haven't tried your charting component, but it will be the first I will try when I need a chart the next time. For my current employer, it is doubtful they will find any use for realtime performance, but I'm sure others do.</p>",
    "PostedDate": "2009-07-17T00:50:17.957-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "213079",
    "ThreadId": "61399",
    "Html": "<p>I agree with you both; we're in the genetic sequencing arena, and we definitely have the need for realtime charting. &nbsp;We're building WPF and Silverlight based applications and we're finding some not-too-pretty performance limitations (not just from the Microsoft toolkit charts) as the number of points or number of series exceeds a certain threshold. &nbsp;For example, I tried loading 2 line series, each with 10000 data points; it took 21 seconds on a beefy system to load and render the chart. &nbsp;I think the current release is fantastic for 80% of our cases, but for the other 20%, where virtualization is required and other performance numbers (speed and memory) are gating factors, we need to look elsewhere, or play tricks with the current charts. &nbsp;For instance, one road I'm on at the moment, will have the data model have 2 components: an observable collection A that's bound to the chart series, but which does not have the entire set of data points, and another collection B which contains all the data points I wish to plot; as such, when I want the chart to plot data between x and x+n, I load that portion from B into A. &nbsp;For scrolling, I end up dropping some data from A on one side and adding more to the other side; etc.. My poor man's virtualization.</p>\r\n<p>And finally, could we please have zooming, zooming, and umm, built-in zooming? ;) &nbsp;While you're at it, if zooming can be allowed independently in the x and y directions, that would be wonderful.</p>\r\n<p>Thanks so much, and keep up the good work.</p>",
    "PostedDate": "2009-07-17T08:26:28.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "213237",
    "ThreadId": "61399",
    "Html": "<p>Thanks for the feedback, everyone!</p>\r\n<p>One quick tip for improving perf of many-point LineSeries is to get rid of the data points entirely. You can do this by providing either a null Style to LineSeries.DataPointStyle or else a LineDataPoint Style with a null or empty Template (these are all conceptually the same; they may not all run, but at least one of them does). This gets rid of a lot of UI overhead and speeds things up noticably. Maybe not enough for 10000 points, but it should help! :)</p>",
    "PostedDate": "2009-07-17T16:31:12.117-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "213444",
    "ThreadId": "61399",
    "Html": "<p>Hi,</p>\r\n<p>&nbsp;</p>\r\n<p>For the ones who are looking for great performance and different axes support (including log axes), please have a look to this project also hosted on codeplex:</p>\r\n<p>http://dynamicdatadisplay.codeplex.com</p>\r\n<p>&nbsp;</p>\r\n<p>I am working with tick data(several refresh per second) from different stock exchanges and it works great!!</p>\r\n<p>&nbsp;</p>\r\n<p>Do the coordinators have any comment to make between the two projects?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks,</p>\r\n<p>Kamel</p>",
    "PostedDate": "2009-07-18T14:39:20.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "213460",
    "ThreadId": "61399",
    "Html": "<p>Very interesting, Kamel; any idea on how the Dynamic Data Display library performs on large data sets? &nbsp;And does it, by any chance support zooming?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-18T17:12:25.853-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "213510",
    "ThreadId": "61399",
    "Html": "Lol!<br><br>Please have a look to the project!!! You can download 1 million points in less than 10 secs! And zooming is not a problem!<br><br><div>2009/7/18 EeeeEfff <span dir=ltr>&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span><br>\r\n<blockquote style=\"margin:0pt 0pt 0pt 0.8ex;padding-left:1ex\">   <div> <p>From: EeeeEfff</p> <div><p>Very interesting, Kamel; any idea on how the Dynamic Data Display library performs on large data sets?  And does it, by any chance support zooming?</p>\r\n\r\n<p> </p></div><div> <div> <p>Read the <a href=\"http://wpf.codeplex.com/Thread/View.aspx?ThreadId=61399&ANCHOR#Post213460\">full discussion online</a>.</p> <p>To add a post to this discussion, reply to this email (<a href=\"mailto:wpf@discussions.codeplex.com?subject=[wpf:61399]\">wpf@discussions.codeplex.com</a>)</p>\r\n <p>To start a new discussion for this project, email <a href=\"mailto:wpf@discussions.codeplex.com\">wpf@discussions.codeplex.com</a></p> <p>You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/61399\">unsubscribe</a> on codePlex.com.</p>\r\n <p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at <a href=\"http://codeplex.com\">codeplex.com</a></p> </div> </div></div> </blockquote>\r\n</div><br>",
    "PostedDate": "2009-07-18T23:15:04.28-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "362733",
    "ThreadId": "61399",
    "Html": "<p>I am having difficulty using the chart in this toolkit for real time data visualization.</p>\r\n<p>As an example, I have an area chart that has seven series in it. Each series uses an in-memory collection for its source of data; each collection has about 22 elements that are X/Y coordinates. This is small set of data by almost any standard.</p>\r\n<p>When I update the data on just one series at the rate of once-per-second by setting the series&rsquo; ItemSource property, my CPU usage for the application rises from 1% to an average of 12-15%, and occasionally spikes to the 20s. If I set all seven series in a single method that is called at once-per-second, I see an average CPU usage of 60-65% with spikes as in the 90s. Reducing the interval to as little as once every five seconds didn't seem make much impact on performance either.</p>\r\n<p>I have verified through code isolation that setting the ItemSource property is what is bogging down the CPU. I have also used the WPF Performance Suite (Wndows SDK)&nbsp; to verify that it is in fact the chart control that is responsible for the usage during that time.</p>\r\n<p>Based on this, I don&rsquo;t see how it could be used in a lot of &ldquo;real time visualization&rdquo; scenarios such as instrumentation applications&mdash;especially where larger sets of data might be required, multiple charts per screen, and/or other applications need to be running in the background.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-02-22T09:42:40.45-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1355100",
    "ThreadId": "61399",
    "Html": "Hi,\r<br />\nI am looking for exploded 3d pie chart like the one available in Office.Interop dlls. I saw that latest toolkit doesn't include this. \r<br />\nThanks,\r<br />\nNiraj Bhatt<br />\n",
    "PostedDate": "2015-02-23T22:44:31.16-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]