[
  {
    "Id": "228589",
    "ThreadId": "67248",
    "Html": "<p>I have an admin screen application where the user can edit an <strong>ObservableCollection&lt;DataItem&gt;</strong> in a WPF <strong>DataGrid</strong>&nbsp;(including add new ones).</p>\r\n<p>And then they can preview the result of their work in a <strong>ComboBox</strong>.</p>\r\n<p>Unfortunatly, somehow, due to editing the collection in the datagrid, when the list is shown in a combo box, I got a 'NewItemPlaceholder' in the list (in the observable collection that is) which is not a DataItem.</p>\r\n<p>That cause all sorts of exception.. why is that? what can I do to prevent my combobox from crashing the application?</p>\r\n<p>As the datagrid take the initiative on it own (apparently) of silently updating the default collection view of the itemsSource, shouldn't it works with its own ICollectionView instead of using the default one?</p>",
    "PostedDate": "2009-08-27T21:52:05.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "228844",
    "ThreadId": "67248",
    "Html": "<p>Hi superlloyd,</p>\r\n<p>Ok, so it sounds like you've got your DataGrid and ComboBox bound to the same collection, and since the ComboBox doesn't know what to do with the NewItemPlaceholder, it crashes.&nbsp; NewItemPlaceholder is something which we add to the DataGrid.Items collection to represent the blank AddNewRow in the DataGrid.&nbsp; However, NewItemPlaceholder should not be added to the DataGrid.ItemsSource (just the Items collection), so if you bind your ComboBox to DataGrid.ItemsSource, then this should solve the problem.&nbsp;</p>\r\n<p>If for some reason that doesn't work, a less elegant solution would be to have two separate collections, one for DataGrid (which includes the&nbsp;NewItemPlaceholder)&nbsp;and one for ComboBox (which does not).&nbsp; Whenever anything is updated or added in the DataGrid's collection, you can manually make those same changes in the ComboBox's collection, which should give the same appearance to the end user of the editing the ComboBox's collection through the DataGrid.</p>\r\n<p>Thanks!<br>Samantha</p>",
    "PostedDate": "2009-08-28T13:34:44.28-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "228884",
    "ThreadId": "67248",
    "Html": "<p>The ItemsControl.Items is a one to one wrapper on the CollectionViewSource.GetDefaultCollection() or so it seems.</p>\r\n<p>Because while the NewItemPlaceholder was not added to my underlying collection, the combo box which use the default collection by default, as all ItemsControl (including the DataGrid) has it.</p>\r\n<p>The work around I used was to create a&nbsp;<br>new ListCollectionView(myCollection)</p>\r\n<p>and use that as the collection for the datagrid.</p>\r\n<p>In fact I had to do that for all collection I was displaying in the datagrid.&nbsp;</p>",
    "PostedDate": "2009-08-28T17:46:23.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "522644",
    "ThreadId": "67248",
    "Html": "\r\n<p>15 months later I'm having a similar problem, but I'm not willing to create a second collection just to cover-up this bug.&nbsp; That wouldn't be very MVVM would it?&nbsp; The best workaround I can come up with is to use a style selector to hide the entry\r\n in the ComboBox and hope there's absolutely no way the user can accidently select it.&nbsp; How can the DataGrid be adding an item to my strongly-typed BindingList which is of the NewItemPlaceholder type?&nbsp; I guess that it's not, and there's some sort\r\n of secret middle tier.&nbsp; If this is so, why to do controls in the same window share this middle tier rather than having independent bindings to the same object?</p>\r\n",
    "PostedDate": "2010-11-16T05:08:05.087-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "733157",
    "ThreadId": "67248",
    "Html": "<p>And another 14 months later i'v run into the same problem. In my case i have a wizard style application using pages. On one page i have a DataGrid bound to a DataTable where the user can add/delete/edit items. On the next page i have a ComboBox that is bound to the same DataTable (the user is supposed to select an entry from the page before). If i open the second page directly (with some initial entries to the DataTable) everything is fine. Then i open the page with the DataGrid and don't do anything there. When i go back to the second page the ComboBox now has a new row, the new item placeholder. The user can select it and all sorts of problems arise. And like harmish i'm not willing to have a second DataTable because of this bug.</p>",
    "PostedDate": "2012-01-31T04:43:23.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "733216",
    "ThreadId": "67248",
    "Html": "<p>Hey Naryoril!</p>\r\n<p>&nbsp;</p>\r\n<p>Well, I don't have the code here (new company) but basically I wrote a custom NullableCombox class to use in my datatemplate.</p>\r\n<p>This one was particularly tricky! One problem is the order in which the properties (ItemsSource, SelectedItem) are binded matters!</p>",
    "PostedDate": "2012-01-31T06:36:04.11-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "820284",
    "ThreadId": "67248",
    "Html": "<p>I also used a CollectionViewSource (same as superlloyd) for the ComboBox to remove the NewItemPlaceholder items.</p>\r\n<p>Really surprised at this issue - I think it's bad that the DataGrid doesn't deal with the adding of items internally.&nbsp; It seems a bit flimsy that an extra item is added to the collection before the user adds one.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-04-05T02:28:40.967-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]