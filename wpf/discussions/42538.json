[
  {
    "Id": "141404",
    "ThreadId": "42538",
    "Html": "Hi,<br>\r\n<br>\r\nI want to achive that a Textbox with Validation.HasError = true does not releases his focus, nor by mouse, neither by keyboard:<br>\r\n<br>\r\n// for Mouse<br>\r\nthis.tbContactName.LostFocus += new RoutedEventHandler(tbContactName_LostFocus);<br>\r\n// for Keyboard, but fires before Validation <br>\r\nthis.tbContactName.LostKeyboardFocus += new KeyboardFocusChangedEventHandler(tbContactName_LostKeyboardFocus);<br>\r\n<br>\r\n<br>\r\nvoid tbContactName_LostFocus(object sender, RoutedEventArgs e)<br>\r\n{<br>\r\n// <a href=\"http://http://www.developersdex.com/vb/message.asp?p=2924&ID=&lt;2749DD91-B8F8-424E-8E14-68C21A36591D@microsoft.com&gt;\">DevelopersDex</a><br>\r\nTextBox tb = e.Source as TextBox;<br>\r\nif (Validation.GetHasError(tb))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; tb.Focus();<br>\r\n}<br>\r\n<br>\r\nvoid tbContactName_LostKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)<br>\r\n{ // The same code like in tbContactName_LostFocus() }<br>\r\n<br>\r\nMy questions: <br>\r\n1.) Is it the right approach to use this TWO Events?<br>\r\n2.) The LostKeyboardFocus fires before validation. But I need it: if I remove it, the LostFocus() rund into an endlees loop -&gt; Stack overflow :-(<br>\r\n<br>\r\n-christoph<br>\r\n",
    "PostedDate": "2008-12-17T11:41:42.573-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "145025",
    "ThreadId": "42538",
    "Html": "If you take that approach of using these two events, for the LostKeyboardFocus you can wrap the code inside in a Dispatcher.BeginInvoke and set the priority lower so the validation fires.  I haven't tested that out though.<br>\r\n<br>\r\nAnother approach is to not police the user based on focus of a textbox but more based on what is enabled.  I have an example here, <a href=\"http://blogs.msdn.com/vinsibal/archive/2008/12/18/wpf-datagrid-sample-locking-input-to-the-row-being-edited.aspx\">http://blogs.msdn.com/vinsibal/archive/2008/12/18/wpf-datagrid-sample-locking-input-to-the-row-being-edited.aspx</a>, which locks input to the row being edited.  Maybe you can try the same idea when a cell is in error.\r\n",
    "PostedDate": "2009-01-07T06:02:41.157-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "145516",
    "ThreadId": "42538",
    "Html": "Hi vinsibal,<br>\r\n<br>\r\nthanks for your advice!<br>\r\n<em><br>\r\n&gt;wrap the code inside in a Dispatcher.BeginInvoke and set the priority\r\nlower so the validation fires. </em><br>\r\nCan you give me some code, how to do this? I'm a deverloper since many years, but a newbee in WPF/c# ;-)<br>\r\n",
    "PostedDate": "2009-01-08T12:32:46.213-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "146526",
    "ThreadId": "42538",
    "Html": "Here is an example:<br>\r\n<br>\r\n<span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">\r\n<p>Dispatcher</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px\">.CurrentDispatcher.BeginInvoke(</span><span style=\"font-size:13px;color:#0000ff\">new</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\">DispatcherOperationCallback</span><span style=\"font-size:13px\">((param) =&gt; { /* code goes here*/}), </span><span style=\"font-size:13px;color:#2b91af\">DispatcherPriority</span><span style=\"font-size:13px\">.Background, new object[] { null } /* parameter */);\r\n<p>&nbsp;</p>\r\n</span></p>\r\n",
    "PostedDate": "2009-01-12T18:47:06.08-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "147996",
    "ThreadId": "42538",
    "Html": "Thanks, but The LostKeyboardFocus alway fires before validation :-(<br>\r\nThis is my code, ist there an error?<br>\r\n<br>\r\n&nbsp;void tbContactName_LostKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dispatcher.CurrentDispatcher.BeginInvoke(new DispatcherOperationCallback((param) =&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TextBox tb = e.Source as TextBox;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.Show(&quot;LostKeyboardFocus&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (Validation.GetHasError(tb))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tb.Focus();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return null;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ), DispatcherPriority.Background, new object[] { null });<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n",
    "PostedDate": "2009-01-17T14:21:25.85-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]