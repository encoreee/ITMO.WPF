[
  {
    "Id": "441943",
    "ThreadId": "212393",
    "Html": "<p>Change the properties <em>IndependentValueBinding</em> and <em>DependentValueBinding</em> from normal to <em>DependencyProperties</em>.</p>\r\n<p>To be able to use these for templating in&nbsp;<em>FrameworkElementFactories</em>.</p>\r\n<p>Code:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the Binding to use for identifying the dependent value.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> Binding DependentValueBinding\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (Binding)GetValue(DependentValueBindingProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(DependentValueBindingProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Using a DependencyProperty as the backing store for IndependentValueBinding.  This enables animation, styling, binding, etc...</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty DependentValueBindingProperty =\r\n            DependencyProperty.Register(<span style=\"color:#a31515\">&quot;DependentValueBinding&quot;</span>, <span style=\"color:blue\">typeof</span>(Binding), <span style=\"color:blue\">typeof</span>(DataPointSeries), <span style=\"color:blue\">new</span> UIPropertyMetadata(<span style=\"color:blue\">null</span>, <span style=\"color:blue\">new</span> PropertyChangedCallback(OnDependentValueBindingChanged)));\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnDependentValueBindingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            DataPointSeries dps = d <span style=\"color:blue\">as</span> DataPointSeries;\r\n            Binding oldValue = e.OldValue <span style=\"color:blue\">as</span> Binding;\r\n            Binding newValue = e.NewValue <span style=\"color:blue\">as</span> Binding;\r\n            dps.OnDependentValueBindingChanged(oldValue, newValue);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnDependentValueBindingChanged(Binding oldValue, Binding newValue)\r\n        {\r\n            Refresh();\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the Binding to use for identifying the independent value.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> Binding IndependentValueBinding\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (Binding)GetValue(IndependentValueBindingProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(IndependentValueBindingProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\">  Using a DependencyProperty as the backing store for IndependentValueBinding.  This enables animation, styling, binding, etc...</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty IndependentValueBindingProperty =\r\n            DependencyProperty.Register(<span style=\"color:#a31515\">&quot;IndependentValueBinding&quot;</span>, <span style=\"color:blue\">typeof</span>(Binding), <span style=\"color:blue\">typeof</span>(DataPointSeries), <span style=\"color:blue\">new</span> UIPropertyMetadata(<span style=\"color:blue\">null</span>, <span style=\"color:blue\">new</span> PropertyChangedCallback(OnIndependentValueBindingChanged)));\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnIndependentValueBindingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            DataPointSeries dps = d <span style=\"color:blue\">as</span> DataPointSeries;\r\n            Binding oldValue = e.OldValue <span style=\"color:blue\">as</span> Binding;\r\n            Binding newValue = e.NewValue <span style=\"color:blue\">as</span> Binding;\r\n            dps.OnIndependentValueBindingChanged(oldValue, newValue);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnIndependentValueBindingChanged(Binding oldValue, Binding newValue)\r\n        {\r\n            Refresh();\r\n        }\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-05-12T02:53:39.33-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]