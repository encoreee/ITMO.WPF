[
  {
    "Id": "129548",
    "ThreadId": "39047",
    "Html": "I'm posting this solution as both an example for people who need this behavior and as a question for those of you who may know of a better way to accomplish this.  Built-in support for this scenario would be appreciated as well.<br>\r\n<br>\r\n<strong>Problem description:<br>\r\n<br>\r\n</strong>A <strong>DataGrid </strong>is being used in a WPF application to provide a convenient way for end-users to edit data.  The value of one particular column in the grid is constrained to a set of allowable values, although these values are only recommendations.  An end-user must be able to add new values on-the-fly.<br>\r\n<br>\r\n<strong>Solution:</strong><br>\r\n<br>\r\n<hr>\r\n<em><strong>Update: </strong>Read further into this thread for a better solution that makes use of an actual <strong>DataGridComboBoxColumn</strong> and the <strong>DataGrid</strong>.<strong>CellEditEnding</strong> event instead of a DataGridTemplateColumn and the ComboBox.PreviewLostKeyboardFocus event, which is used in the following example.</em><br>\r\n<hr>\r\n<br>\r\nA common approach for constraining a column's value to an allowable set is to use a <strong>DataGridComboBoxColumn</strong>, which can provide a convenient drop-down list of data-bound choices.  However, it doesn't appear to support the behavior that is required in this scenario (see the <strong>Note </strong>at the end of this post for more information).<br>\r\n<br>\r\nThe <strong>ComboBox</strong>.<strong>IsEditable</strong> property can be set to <strong>True</strong> to have a <strong>ComboBox</strong> act as both a <strong>TextBox </strong>and a drop-down list simultaneously.  But when the <strong>ComboBox </strong>is data-bound (both the selected item and the drop-down list), entering custom text will not cause a new item to be added to the data-bound collection, so it must be done manually.  In other words, if I enter 'Joe' in a <strong>ComboBox</strong> that is bound to a list of people, which doesn't contain the value 'Joe', then the value 'Joe' is not going to be added to the drop-down list automatically.  So if a binding is set for the <strong>SelectedValue</strong> or <strong>SelectedItem</strong> properties, or if <strong>SelectedValuePath </strong>is set, then the new value will simply be discarded when the control loses focus because the binding cannot find a corresponding value in the <strong>ItemsSource</strong>.<br>\r\n<br>\r\nTo enable this scenario we have to ditch <strong>DataGridComboBoxColumn</strong> and use <strong>DataGridTemplateColumn</strong> instead.  This gives us more control over the <strong>ComboBox</strong> so that we can manually insert new values into the data-bound collection when they are entered into the text area.<br>\r\n<br>\r\nThe following XAML binds a <strong>DataGrid</strong> to an <strong>ObservableCollection </strong>of <strong>Pair</strong> instances (<em>Pair </em>is a custom type and its source code follows).  The <strong>DataGrid</strong> contains a <strong>DataGridTextColumn </strong>bound to the <strong>Pair</strong>.<strong>Name</strong> property, a regular <strong>DataGridComboBoxColumn</strong> that does not allow you to add custom items and is bound to the <strong>Pair</strong>.<strong>Value</strong> property, and a <strong>DataGridTemplateColumn</strong> that meets the requirements of this scenario.  The XAML also contains a read-only <strong>DataGrid</strong> that is bound to the same data source as the editable <strong>DataGrid</strong> to prove that the underlying <strong>Pair</strong> collection is being updated when custom values are entered.<br>\r\n<br>\r\n<div style=\"font-family:courier new;background:white;color:black;font-size:10pt\">\r\n<p style=\"margin:0px\"><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">Window</span><span style=\"color:#ff0000\"> x</span><span style=\"color:#0000ff\">:</span><span style=\"color:#ff0000\">Class</span><span style=\"color:#0000ff\">=&quot;WpfApplication1.Window1&quot;</span></p>\r\n<p style=\"margin:0px\">       <span style=\"color:#ff0000\">xmlns</span><span style=\"color:#0000ff\">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></p>\r\n<p style=\"margin:0px\">       <span style=\"color:#ff0000\">xmlns</span><span style=\"color:#0000ff\">:</span><span style=\"color:#ff0000\">x</span><span style=\"color:#0000ff\">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></p>\r\n<p style=\"margin:0px\">       <span style=\"color:#ff0000\">xmlns</span><span style=\"color:#0000ff\">:</span><span style=\"color:#ff0000\">toolkit</span><span style=\"color:#0000ff\">=&quot;clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit&quot;</span></p>\r\n<p style=\"margin:0px\">       <span style=\"color:#ff0000\">xmlns</span><span style=\"color:#0000ff\">:</span><span style=\"color:#ff0000\">local</span><span style=\"color:#0000ff\">=&quot;clr-namespace:WpfApplication1&quot;</span></p>\r\n<p style=\"margin:0px\">       <span style=\"color:#ff0000\">Title</span><span style=\"color:#0000ff\">=&quot;Editable DataGrid ComboxBox Column Sample&quot;</span><span style=\"color:#ff0000\"> Height</span><span style=\"color:#0000ff\">=&quot;320&quot;</span><span style=\"color:#ff0000\"> Width</span><span style=\"color:#0000ff\">=&quot;380&quot;</span></p>\r\n<p style=\"margin:0px\">       <span style=\"color:#ff0000\">Loaded</span><span style=\"color:#0000ff\">=&quot;Window_Loaded&quot;&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">  </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">Window.Resources</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">    </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">ObjectDataProvider</span><span style=\"color:#ff0000\"> x</span><span style=\"color:#0000ff\">:</span><span style=\"color:#ff0000\">Key</span><span style=\"color:#0000ff\">=&quot;items&quot;/&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">    </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">ObjectDataProvider</span><span style=\"color:#ff0000\"> x</span><span style=\"color:#0000ff\">:</span><span style=\"color:#ff0000\">Key</span><span style=\"color:#0000ff\">=&quot;lookup&quot;/&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">  </span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">Window.Resources</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">  </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">StackPanel</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">    </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">TextBlock</span><span style=\"color:#ff0000\"> Margin</span><span style=\"color:#0000ff\">=&quot;5&quot;&gt;</span><span style=\"color:#a31515\">Editable Grid:</span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">TextBlock</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">    </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGrid</span><span style=\"color:#ff0000\"> ItemsSource</span><span style=\"color:#0000ff\">=&quot;{</span><span style=\"color:#a31515\">Binding</span><span style=\"color:#ff0000\"> Source</span><span style=\"color:#0000ff\">={</span><span style=\"color:#a31515\">StaticResource</span><span style=\"color:#ff0000\"> items</span><span style=\"color:#0000ff\">}}&quot;</span></p>\r\n<p style=\"margin:0px\">                     <span style=\"color:#ff0000\">AutoGenerateColumns</span><span style=\"color:#0000ff\">=&quot;False&quot;&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">      </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGrid.Columns</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">        </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGridTextColumn</span><span style=\"color:#ff0000\"> Header</span><span style=\"color:#0000ff\">=&quot;Name&quot;</span><span style=\"color:#ff0000\"> Binding</span><span style=\"color:#0000ff\">=&quot;{</span><span style=\"color:#a31515\">Binding</span><span style=\"color:#ff0000\"> Name</span><span style=\"color:#0000ff\">}&quot;/&gt;</span></p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">        </span><span style=\"color:#008000\">&lt;!-- This column shows the actual value of the item but new values cannot be added --&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">        </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGridComboBoxColumn</span><span style=\"color:#ff0000\"> Header</span><span style=\"color:#0000ff\">=&quot;Allowable Value&quot;</span><span style=\"color:#ff0000\"> Width</span><span style=\"color:#0000ff\">=&quot;*&quot;</span></p>\r\n<p style=\"margin:0px\">                                       <span style=\"color:#ff0000\">SelectedItemBinding</span><span style=\"color:#0000ff\">=&quot;{</span><span style=\"color:#a31515\">Binding</span><span style=\"color:#ff0000\"> Value</span><span style=\"color:#0000ff\">}&quot;</span></p>\r\n<p style=\"margin:0px\">                                       <span style=\"color:#ff0000\">ItemsSource</span><span style=\"color:#0000ff\">=&quot;{</span><span style=\"color:#a31515\">Binding</span><span style=\"color:#ff0000\"> Source</span><span style=\"color:#0000ff\">={</span><span style=\"color:#a31515\">StaticResource</span><span style=\"color:#ff0000\"> lookup</span><span style=\"color:#0000ff\">}}&quot; /&gt;</span></p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">        </span><span style=\"color:#008000\">&lt;!-- This column allows an end-user to edit the collection of allowable values </span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#008000\">             by simply typing a new value into the column  --&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">        </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGridTemplateColumn</span><span style=\"color:#ff0000\"> Header</span><span style=\"color:#0000ff\">=&quot;Editable Value&quot;</span><span style=\"color:#ff0000\"> Width</span><span style=\"color:#0000ff\">=&quot;*&quot;&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">          </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGridTemplateColumn.CellTemplate</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">            </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">DataTemplate</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">              </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">TextBlock</span><span style=\"color:#ff0000\"> Text</span><span style=\"color:#0000ff\">=&quot;{</span><span style=\"color:#a31515\">Binding</span><span style=\"color:#ff0000\"> Value</span><span style=\"color:#0000ff\">}&quot;/&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">            </span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">DataTemplate</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">          </span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGridTemplateColumn.CellTemplate</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">          </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGridTemplateColumn.CellEditingTemplate</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">            </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">DataTemplate</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">              </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">ComboBox</span><span style=\"color:#ff0000\"> IsEditable</span><span style=\"color:#0000ff\">=&quot;True&quot;</span></p>\r\n<p style=\"margin:0px\">                       <span style=\"color:#ff0000\">SelectedItem</span><span style=\"color:#0000ff\">=&quot;{</span><span style=\"color:#a31515\">Binding</span><span style=\"color:#ff0000\"> Value</span><span style=\"color:#0000ff\">}&quot;</span></p>\r\n<p style=\"margin:0px\">                       <span style=\"color:#ff0000\">ItemsSource</span><span style=\"color:#0000ff\">=&quot;{</span><span style=\"color:#a31515\">Binding</span><span style=\"color:#ff0000\"> Source</span><span style=\"color:#0000ff\">={</span><span style=\"color:#a31515\">StaticResource</span><span style=\"color:#ff0000\"> lookup</span><span style=\"color:#0000ff\">}}&quot;</span></p>\r\n<p style=\"margin:0px\">                       <span style=\"color:#ff0000\">PreviewLostKeyboardFocus</span><span style=\"color:#0000ff\">=&quot;ComboBox_PreviewLostKeyboardFocus&quot; /&gt;</span></p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">            </span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">DataTemplate</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">          </span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGridTemplateColumn.CellEditingTemplate</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">        </span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGridTemplateColumn</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">      </span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGrid.Columns</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">    </span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGrid</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">    </span><span style=\"color:#008000\">&lt;!-- This grid binds to the same collection as the grid above to prove that the </span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#008000\">         changes actually exist in the underlying collection --&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">    </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">TextBlock</span><span style=\"color:#ff0000\"> Margin</span><span style=\"color:#0000ff\">=&quot;5&quot;&gt;</span><span style=\"color:#a31515\">Read-Only Grid:</span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">TextBlock</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">    </span><span style=\"color:#0000ff\">&lt;</span><span style=\"color:#a31515\">toolkit</span><span style=\"color:#0000ff\">:</span><span style=\"color:#a31515\">DataGrid</span><span style=\"color:#ff0000\"> ItemsSource</span><span style=\"color:#0000ff\">=&quot;{</span><span style=\"color:#a31515\">Binding</span><span style=\"color:#ff0000\"> Source</span><span style=\"color:#0000ff\">={</span><span style=\"color:#a31515\">StaticResource</span><span style=\"color:#ff0000\"> items</span><span style=\"color:#0000ff\">}}&quot;</span> </p>\r\n<p style=\"margin:0px\">                     <span style=\"color:#ff0000\">IsReadOnly</span><span style=\"color:#0000ff\">=&quot;True&quot; /&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#a31515\">  </span><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">StackPanel</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n<p style=\"margin:0px\"><span style=\"color:#0000ff\">&lt;/</span><span style=\"color:#a31515\">Window</span><span style=\"color:#0000ff\">&gt;</span></p>\r\n</div>\r\n&lt;!--EndFragment--&gt;<br>\r\n<div style=\"font-family:courier new;background:white;color:black;font-size:10pt\">\r\n<p style=\"margin:0px\"><span style=\"color:#0000ff\">using</span> System.Collections.Generic;</p>\r\n<p style=\"margin:0px\"><span style=\"color:#0000ff\">using</span> System.Collections.ObjectModel;</p>\r\n<p style=\"margin:0px\"><span style=\"color:#0000ff\">using</span> System.Windows;</p>\r\n<p style=\"margin:0px\"><span style=\"color:#0000ff\">using</span> System.Windows.Controls;</p>\r\n<p style=\"margin:0px\"><span style=\"color:#0000ff\">using</span> System.Windows.Data;</p>\r\n<p style=\"margin:0px\"><span style=\"color:#0000ff\">using</span> System.Windows.Input;</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\"><span style=\"color:#0000ff\">namespace</span> WpfApplication1</p>\r\n<p style=\"margin:0px\">{</p>\r\n<p style=\"margin:0px\">  <span style=\"color:#808080\">///</span><span style=\"color:#008000\"> </span><span style=\"color:#808080\">&lt;summary&gt;</span></p>\r\n<p style=\"margin:0px\">  <span style=\"color:#808080\">///</span><span style=\"color:#008000\"> Interaction logic for Window1.xaml</span></p>\r\n<p style=\"margin:0px\">  <span style=\"color:#808080\">///</span><span style=\"color:#008000\"> </span><span style=\"color:#808080\">&lt;/summary&gt;</span></p>\r\n<p style=\"margin:0px\">  <span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">partial</span> <span style=\"color:#0000ff\">class</span> <span style=\"color:#2b91af\">Window1</span> : <span style=\"color:#2b91af\">Window</span></p>\r\n<p style=\"margin:0px\">  {</p>\r\n<p style=\"margin:0px\">    <span style=\"color:#0000ff\">public</span> Window1()</p>\r\n<p style=\"margin:0px\">    {</p>\r\n<p style=\"margin:0px\">      InitializeComponent();</p>\r\n<p style=\"margin:0px\">    }</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:#0000ff\">private</span> <span style=\"color:#0000ff\">void</span> Window_Loaded(<span style=\"color:#0000ff\">object</span> sender, <span style=\"color:#2b91af\">RoutedEventArgs</span> e)</p>\r\n<p style=\"margin:0px\">    {</p>\r\n<p style=\"margin:0px\">      <span style=\"color:#2b91af\">ObjectDataProvider</span> lookup = (<span style=\"color:#2b91af\">ObjectDataProvider</span>) FindResource(<span style=\"color:#a31515\">&quot;lookup&quot;</span>);</p>\r\n<p style=\"margin:0px\">      lookup.ObjectInstance = <span style=\"color:#0000ff\">new</span> <span style=\"color:#2b91af\">ObservableCollection</span>&lt;<span style=\"color:#0000ff\">string</span>&gt;()</p>\r\n<p style=\"margin:0px\">      {</p>\r\n<p style=\"margin:0px\">        <span style=\"color:#a31515\">&quot;Value 1&quot;</span>, </p>\r\n<p style=\"margin:0px\">        <span style=\"color:#a31515\">&quot;Value 2&quot;</span>, </p>\r\n<p style=\"margin:0px\">        <span style=\"color:#a31515\">&quot;Value 3&quot;</span></p>\r\n<p style=\"margin:0px\">      };</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">      <span style=\"color:#2b91af\">ObjectDataProvider</span> items = (<span style=\"color:#2b91af\">ObjectDataProvider</span>) FindResource(<span style=\"color:#a31515\">&quot;items&quot;</span>);</p>\r\n<p style=\"margin:0px\">      items.ObjectInstance = <span style=\"color:#0000ff\">new</span> <span style=\"color:#2b91af\">ObservableCollection</span>&lt;<span style=\"color:#2b91af\">Pair</span>&gt;()</p>\r\n<p style=\"margin:0px\">      {</p>\r\n<p style=\"margin:0px\">        <span style=\"color:#0000ff\">new</span> <span style=\"color:#2b91af\">Pair</span>() { Name = <span style=\"color:#a31515\">&quot;Pair 1&quot;</span>, Value = <span style=\"color:#a31515\">&quot;Value 1&quot;</span> }, </p>\r\n<p style=\"margin:0px\">        <span style=\"color:#0000ff\">new</span> <span style=\"color:#2b91af\">Pair</span>() { Name = <span style=\"color:#a31515\">&quot;Pair 2&quot;</span>, Value = <span style=\"color:#a31515\">&quot;Value 2&quot;</span> }, </p>\r\n<p style=\"margin:0px\">        <span style=\"color:#0000ff\">new</span> <span style=\"color:#2b91af\">Pair</span>() { Name = <span style=\"color:#a31515\">&quot;Pair 3&quot;</span>, Value = <span style=\"color:#a31515\">&quot;Value 3&quot;</span> }</p>\r\n<p style=\"margin:0px\">      };</p>\r\n<p style=\"margin:0px\">    }</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:#0000ff\">private</span> <span style=\"color:#0000ff\">void</span> ComboBox_PreviewLostKeyboardFocus(<span style=\"color:#0000ff\">object</span> sender, <span style=\"color:#2b91af\">KeyboardFocusChangedEventArgs</span> e)</p>\r\n<p style=\"margin:0px\">    {</p>\r\n<p style=\"margin:0px\">      <span style=\"color:#2b91af\">ComboBox</span> box = (<span style=\"color:#2b91af\">ComboBox</span>) sender;</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">      <span style=\"color:#0000ff\">if</span> (box.SelectedIndex &lt; 0 &amp;&amp; box.Text.Length &gt; 0)</p>\r\n<p style=\"margin:0px\">      {</p>\r\n<p style=\"margin:0px\">        <span style=\"color:#2b91af\">IList</span>&lt;<span style=\"color:#0000ff\">string</span>&gt; items = (<span style=\"color:#2b91af\">IList</span>&lt;<span style=\"color:#0000ff\">string</span>&gt;) box.ItemsSource;</p>\r\n<p style=\"margin:0px\">        items.Add(box.Text);</p>\r\n<p style=\"margin:0px\">        box.SelectedValue = box.Text;</p>\r\n<p style=\"margin:0px\">      }</p>\r\n<p style=\"margin:0px\">    }</p>\r\n<p style=\"margin:0px\">  }</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">  <span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">class</span> <span style=\"color:#2b91af\">Pair</span></p>\r\n<p style=\"margin:0px\">  {</p>\r\n<p style=\"margin:0px\">    <span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">string</span> Name { <span style=\"color:#0000ff\">get</span>; <span style=\"color:#0000ff\">set</span>; }</p>\r\n<p style=\"margin:0px\">    <span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">string</span> Value { <span style=\"color:#0000ff\">get</span>; <span style=\"color:#0000ff\">set</span>; }</p>\r\n<p style=\"margin:0px\">  }</p>\r\n<p style=\"margin:0px\">}</p>\r\n</div>\r\n&lt;!--EndFragment--&gt;<br>\r\nThe custom behavior that we need here is written in the <strong>PreviewLostKeyboardFocus</strong> event handler.  The handler first checks that there's no <em>selected </em>item (<em>box.SelectedIndex &lt; 0</em>) and then checks that the user has entered some text, and if so creates a new item (<em>items.Add(box.Text);</em>) and selects it (<em>box.SelectedValue = box.Text;</em>).<br>\r\n<br>\r\n<strong>Note: </strong>Although <a href=\"http://www.codeplex.com/wpf/WorkItem/View.aspx?WorkItemId=7961\">DataGridComboBoxColumn</a><a href=\"http://www.codeplex.com/wpf/WorkItem/View.aspx?WorkItemId=7961\"> does not provide an IsEditable property</a> that you can set, it does allow you to set it by creating a custom <strong>EditingElementStyle</strong>, as mentioned in the work item's comments.  Howver, in trying to implement this scenario using <strong>DataGridComboBoxColumn </strong>with an <strong>EditingElementStyle</strong> and two <strong>Setters</strong>, one for <strong>IsEditable</strong> and one for the <strong>PreviewLostKeyboardFocus </strong>or <strong>LostFocus </strong>event, it seems impossible to update the actual value in the binding.  Setting the <strong>SelectedValue (</strong>or even <strong>SelectedIndex</strong>) like in the example above<strong> </strong>does nothing.  Setting the value on the current <strong>DataContext </strong>(by casting it to the expected type; in this case, <strong>Pair</strong>) will in fact select the appropriate item in that column but the binding is never updated; i.e., the <em>Allowable Value</em> column from the example above does not reflect the change when a custom value is entered into the <em>Editable Value</em> column even though that column does in fact retain the value.  The templated approach used in the example above does not exhibit this broken behavior.<br>\r\n<br>\r\n- Dave \r\n",
    "PostedDate": "2008-11-02T15:17:49.82-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130129",
    "ThreadId": "39047",
    "Html": "<p style=\"font-size:11pt;margin:0in;font-family:calibri\">I am not sure why DataGridComboBoxColumn didnt work for you but, the following XAML definition with exact same implementation of ComboBox_PreviewLostKeyboardFocus and Window_Loaded worked fine for me....<br>\r\n<br>\r\n&lt;Window x:Class=&quot;WpfApplication13.Window2&quot;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                     xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                     xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                     xmlns:toolkit=&quot;http://schemas.microsoft.com/wpf/2008/toolkit&quot;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                     Title=&quot;Window2&quot; Height=&quot;300&quot; Width=&quot;300&quot; Loaded=&quot;Window_Loaded&quot;&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        &lt;Window.Resources&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;ObjectDataProvider x:Key=&quot;items&quot;/&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;ObjectDataProvider x:Key=&quot;lookup&quot;/&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        &lt;/Window.Resources&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        &lt;StackPanel&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;TextBlock Margin=&quot;5&quot;&gt;Editable Grid:&lt;/TextBlock&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;toolkit:DataGrid ItemsSource=&quot;{Binding Source={StaticResource items}}&quot; AutoGenerateColumns=&quot;False&quot;&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                        &lt;toolkit:DataGrid.Columns&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                              &lt;toolkit:DataGridTextColumn Header=&quot;Name&quot; Binding=&quot;{Binding Name}&quot;/&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                              &lt;toolkit:DataGridComboBoxColumn Header=&quot;Allowable Value&quot; Width=&quot;*&quot; SelectedItemBinding=&quot;{Binding Value}&quot; ItemsSource=&quot;{Binding Source={StaticResource lookup}}&quot; /&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                              &lt;toolkit:DataGridComboBoxColumn Header=&quot;Editable Value&quot; SelectedItemBinding=&quot;{Binding Path=Value}&quot; ItemsSource=&quot;{Binding Source={StaticResource lookup}}&quot;&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                                     &lt;toolkit:DataGridComboBoxColumn.EditingElementStyle&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                                            &lt;Style TargetType=&quot;{x:Type ComboBox}&quot;&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                                                    &lt;Setter Property=&quot;IsEditable&quot; Value=&quot;True&quot;&gt;&lt;/Setter&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                                                    &lt;EventSetter Event=&quot;PreviewLostKeyboardFocus&quot; Handler=&quot;ComboBox_PreviewLostKeyboardFocus&quot;&gt;&lt;/EventSetter&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                                            &lt;/Style&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                                     &lt;/toolkit:DataGridComboBoxColumn.EditingElementStyle&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                              &lt;/toolkit:DataGridComboBoxColumn&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                        &lt;/toolkit:DataGrid.Columns&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;/toolkit:DataGrid&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;TextBlock Margin=&quot;5&quot;&gt;Read-Only Grid:&lt;/TextBlock&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;toolkit:DataGrid ItemsSource=&quot;{Binding Source={StaticResource items}}&quot;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                          IsReadOnly=&quot;True&quot; /&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        &lt;/StackPanel&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">&lt;/Window&gt;</p>\r\n",
    "PostedDate": "2008-11-04T20:32:39.607-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130161",
    "ThreadId": "39047",
    "Html": "Hi, <br>\r\n<br>\r\nThanks for the suggestion, but that XAML was what I had tried previously.<br>\r\n<br>\r\nTo test your solution again I overwrote my existing XAML file with your XAML and then renamed the <strong>x:Class</strong> to use the <strong>Window1</strong> code-behind implementation from my original example.  The behavior I observed at runtime was both correct and <em>not </em>correct, depending upon my actions, so I can see why you may have thought that it worked properly.<br>\r\n<br>\r\n<strong>To repro the issue:<br>\r\n</strong><br>\r\n<ol>\r\n    <li>Run the application with your XAML and my original code-behind.</li>\r\n    <li>Left-click the <strong>Editable Value </strong>column once in the first row.</li>\r\n    <li>Left-click the <strong>Editable Value</strong> column again, in the first row, so that it goes into edit mode.</li>\r\n    <li>Type any value into the <strong>ComboBox</strong><em>.</em></li>\r\n    <li><em>Left-click once anywhere else in the grid, such as on the third row, </em>so that the focus leaves the first row.  The value you entered is committed and the <strong>Allowable Value </strong>column is automatically updated to reflect the change.  This is the correct behavior.</li>\r\n    <li>Restart the application and perform the same steps again up to and including step #4.  (Alternatively, don't restart the application and just use the second row instead.)</li>\r\n    <li>This time instead of left-clicking a different row to end the edit, press the <strong>Enter </strong>key.</li>\r\n</ol>\r\n<p>The <strong>Allowable Value</strong> field is blank after pressing the <strong>Enter </strong>key.  In my original example you'll find that pressing <strong>Enter </strong>exhibits the same behavior as left-clicking to change the input focus, which is the expected behavior.</p>\r\n<p>- Dave</p>\r\n",
    "PostedDate": "2008-11-05T00:30:22.4-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130287",
    "ThreadId": "39047",
    "Html": "I see the problem now. That's becuase of how combobox handles focus when its editable and how enter key handler is implemented in DataGrid. But your implementation is not without problems too.<br>\r\n<ul>\r\n    <li>For instance we cannot use Text property of combobox in editing template of template column (Editable Value) along with SelectedValueBinding on ComboBox columns (&quot;Allowed Value&quot;)</li>\r\n    <li>Also, since you are using a template column you would loose the entire built-in cancel functionality, which is quite essential in such editable combobox cells. (Try editing your template column cell and hit an escape)</li>\r\n</ul>\r\n<p>Considering all these I am thinking another solution which would get rid of the dependency of focus change (which is kind of complicated in the context of editable combobox)....</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">       &lt;toolkit:DataGrid CellEditEnding=&quot;DataGrid_CellEditEnding&quot; ItemsSource=&quot;{Binding Source={StaticResource items}}&quot; AutoGenerateColumns=&quot;False&quot;&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">            &lt;toolkit:DataGrid.Columns&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;toolkit:DataGridTextColumn Header=&quot;Name&quot; Binding=&quot;{Binding Name}&quot;/&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;toolkit:DataGridComboBoxColumn Header=&quot;Allowable Value&quot; SelectedItemBinding=&quot;{Binding Value}&quot; ItemsSource=&quot;{Binding Source={StaticResource lookup}}&quot; /&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;toolkit:DataGridComboBoxColumn Header=&quot;Editable Value&quot; x:Name=&quot;mycombo&quot; SelectedItemBinding=&quot;{Binding Path=Value}&quot; ItemsSource=&quot;{Binding Source={StaticResource lookup}}&quot;&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                    &lt;toolkit:DataGridComboBoxColumn.EditingElementStyle&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                        &lt;Style TargetType=&quot;{x:Type ComboBox}&quot;&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                            &lt;Setter Property=&quot;IsEditable&quot; Value=&quot;True&quot;&gt;&lt;/Setter&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                        &lt;/Style&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                    &lt;/toolkit:DataGridComboBoxColumn.EditingElementStyle&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;/toolkit:DataGridComboBoxColumn&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">            &lt;/toolkit:DataGrid.Columns&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        &lt;/toolkit:DataGrid&gt;<br>\r\n  </p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        private void DataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        {</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                ComboBox box = e.EditingElement as ComboBox;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                if (e.EditAction == DataGridEditAction.Commit &amp;&amp;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                      e.Column == mycombo &amp;&amp; // or some other way to identify that this is one of the columns to deal with</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                      box != null)</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                {</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                       if (box.SelectedIndex &lt; 0 &amp;&amp; box.Text.Length &gt; 0)</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                       {</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                             IList&lt;string&gt; items = (IList&lt;string&gt;)box.ItemsSource;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                             items.Add(box.Text); // real code should check if it not already exists</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                             box.SelectedValue = box.Text;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                       }</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                }</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        }<br>\r\n<br>\r\nThis should work even if you commit the cell programatically using CommitEdit method of DataGrid.</p>\r\n",
    "PostedDate": "2008-11-05T11:01:15.143-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130475",
    "ThreadId": "39047",
    "Html": "Hi, <br>\r\n<br>\r\nThanks for the solution, it seems to work well :)<br>\r\n<br>\r\n- Dave\r\n",
    "PostedDate": "2008-11-06T04:34:00.26-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]