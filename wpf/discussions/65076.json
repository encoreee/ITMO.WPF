[
  {
    "Id": "221594",
    "ThreadId": "65076",
    "Html": "<p>I've successfully specified the Commands namespace in the xaml header, and specified the Command and CommandParameter for each button in the xaml. I've created the MyCmd_Executed(object sender, ExecutedRoutedEventArgs e) and&nbsp;MyCmd<span style=\"font-size:x-small\">_CanExecute(</span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">object</span></span><span style=\"font-size:x-small\"> sender,</span><span style=\"font-size:x-small;color:#2b91af\"><span style=\"font-size:x-small;color:#2b91af\">CanExecuteRoutedEventArgs</span></span><span style=\"font-size:x-small\"> e) in the C# code and hit those when expected. </span></p>\r\n<p>My question:&nbsp;I need an Execute method for my command logic, but cannot find that in either ICommand or RoutedUICommand. I need something that looks like the following:</p>\r\n<p>public returnStatus Execute(object parameter)</p>\r\n<p>Am I really suppose to put my command logic in MyCmd_Executed(), even though the name imples that this method gets called after the command executes (some examples do this)? That strikes me as pretty bad.</p>\r\n<p>Thanks,</p>\r\n<p>Randy</p>",
    "PostedDate": "2009-08-10T10:08:08.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "221614",
    "ThreadId": "65076",
    "Html": "<p>Somehow, I must have been getting ICommand from someplace other than Syste.Windows.Input.&nbsp;I created a class for a specific command:</p>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">&lt;font size=&quot;2&quot; color=&quot;#0000ff&quot;&gt;&lt;font size=&quot;2&quot; color=&quot;#0000ff&quot;&gt;\r\n<p>public</p>\r\n&lt;/font&gt;&lt;/font&gt;</span>&lt;font size=&quot;2&quot; color=&quot;#0000ff&quot;&gt;\r\n<p>&nbsp;</p>\r\n&lt;/font&gt;</span>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">class</span></span><span style=\"font-size:x-small\"> </span><span style=\"font-size:x-small;color:#2b91af\"><span style=\"font-size:x-small;color:#2b91af\">AbortForecastCmd</span></span><span style=\"font-size:x-small\"> : </span><span style=\"font-size:x-small;color:#2b91af\"><span style=\"font-size:x-small;color:#2b91af\">ICommand</span></span></p>\r\n<p><span style=\"color:#2b91af\">In myCommands class, I create the command in the constructor. This starts where many of the online examples start for RoutedUICommand:</span></p>\r\n</p>\r\n<p><span style=\"font-size:x-small\">&lt;font size=&quot;2&quot;&gt;\r\n<p>_abortForecast =</p>\r\n&lt;/font&gt;</span>\r\n<p><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">new</span></span><span style=\"font-size:x-small\"> </span><span style=\"font-size:x-small;color:#2b91af\"><span style=\"font-size:x-small;color:#2b91af\">AbortForecastCmd</span></span><span style=\"font-size:x-small\">(</span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">&quot;Abort Forecast Download&quot;</span></span><span style=\"font-size:x-small\">,</span><span style=\"font-size:x-small;color:#a31515\"><span style=\"font-size:x-small;color:#a31515\">&quot;AbortForecast&quot;</span></span><span style=\"font-size:x-small\">, </span><span style=\"font-size:x-small;color:#0000ff\"><span style=\"font-size:x-small;color:#0000ff\">typeof</span></span><span style=\"font-size:x-small\">(</span><span style=\"font-size:x-small;color:#2b91af\"><span style=\"font-size:x-small;color:#2b91af\">EdswCommands</span></span><span style=\"font-size:x-small\">));</span></p>\r\n<p>I call the following in myCommands from the constructor in the code-behind class:</p>\r\n</p>\r\n<p>\r\n<p>pubic static void BindCommandsToWindow(UserControl userControl)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; userControl.CommandBindings.Add(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CommandBinding(AbortForecast, AbortForecast_Executed, AbortForecast_CanExecute));<br> }</p>\r\n<p>When&nbsp;I click the button in xaml, the Execute in AbortForecastCmd get executed. Yeah!</p>\r\n<p>Randy</p>\r\n</p>",
    "PostedDate": "2009-08-10T10:54:37.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "221638",
    "ThreadId": "65076",
    "Html": "<p>Since my last post looked terrible, I'll try again:</p>\r\n<p>Class that contains my specific command:</p>\r\n<pre>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Windows;\r\nusing System.Windows.Input;\r\nusing System.Windows.Controls;\r\n\r\nnamespace BackEnd\r\n{\r\n    public class AbortForecastCmd : ICommand\r\n    {\r\n        private string _text = string.Empty;\r\n        private string _name = string.Empty;\r\n        private Type _ownerType;\r\n        public AbortForecastCmd(string text, string name, Type ownerType)\r\n        {\r\n            _text = text;\r\n            _name = name;\r\n            _ownerType = ownerType;\r\n        }\r\n\r\n        #region Implementation of ICommand\r\n\r\n        public void Execute(object parameter)\r\n        {\r\n            System.Windows.MessageBox.Show(&quot;Execute Works for AbortForecastCmd&quot;);\r\n        }\r\n\r\n        public bool CanExecute(object parameter)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        public event EventHandler CanExecuteChanged;\r\n\r\n        #endregion\r\n    }\r\n}</pre>\r\n<p>Class that processes commands:</p>\r\n<pre>using System;\r\nusing System.Windows;\r\nusing System.Windows.Input;\r\nusing System.Windows.Controls;\r\n\r\nnamespace BackEnd\r\n{\r\n    public static class EdswCommands\r\n    {\r\n        #region Private Command Variables\r\n\r\n        private static AbortForecastCmd _abortForecast;\r\n\r\n        #endregion Private Command Variables\r\n\r\n        static EdswCommands()\r\n        {\r\n            _abortForecast = new AbortForecastCmd(&quot;Abort Forecast Download&quot;,\r\n                            &quot;AbortForecast&quot;, typeof(EdswCommands));\r\n        }\r\n\r\n        #region Public Command Properties\r\n\r\n        // Command: AddContact\r\n        public static AbortForecastCmd AbortForecast\r\n        {\r\n            get { return _abortForecast; }\r\n        }\r\n\r\n\r\n        #endregion Public Command Properties\r\n\r\n\r\n        #region Public Command Event Handlers\r\n\r\n\r\n        public static void AbortForecast_Executed(object sender,\r\n                   ExecutedRoutedEventArgs e)\r\n        {\r\n            Console.WriteLine(&quot;AbortForecast command executed&quot;);\r\n        }\r\n        public static void AbortForecast_CanExecute(object sender,\r\n                           CanExecuteRoutedEventArgs e)\r\n        {\r\n            e.CanExecute = true;\r\n        }\r\n\r\n\r\n        #endregion Public Command Event Handlers\r\n\r\n\r\n        public static void BindCommandsToWindow(UserControl userControl)\r\n        {\r\n            userControl.CommandBindings.Add(\r\n                new CommandBinding(AbortForecast, AbortForecast_Executed, AbortForecast_CanExecute));\r\n\r\n        }\r\n\r\n    }\r\n}\r\n</pre>\r\n<p>From my code-behind class:</p>\r\n<pre>using System;\r\nusing System.Collections.Generic;\r\nusing System.Collections.ObjectModel;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Input;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Imaging;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Shapes;\r\n\r\n\r\nnamespace UserInterface\r\n{\r\n    public class CommandParameter\r\n    {\r\n        public bool CanEditBeExecuted { get; set; }\r\n    }\r\n    /// \r\n    /// Interaction logic for WeatherConfigurationControl.xaml\r\n    /// \r\n    public partial class WeatherConfigurationControl : UserControl\r\n    {\r\n        #region Private Members\r\n        EdswWeatherConfigurationInfo _wci;\r\n        public CommandParameter parameter { get; set; }\r\n\r\n        #endregion\r\n\r\n\r\n        public WeatherConfigurationControl()\r\n        {\r\n            //If we don't do this before InitializeComponent(), the buttons\r\n            //don't have anything to bind to.\r\n            EdswCommands.BindCommandsToWindow(this);\r\n\r\n            InitializeComponent();\r\n\r\n            //Setup binding through button event handlers\r\n            _wci = new EdswWeatherConfigurationInfo();\r\n\r\n            //Connects all single-item controls like \r\n            //text boxes to data source in BackEnd.\r\n            this.DataContext = _wci;\r\n\r\n            //Setup binding through xaml\r\n            parameter = new CommandParameter();\r\n            parameter.CanEditBeExecuted = true;\r\n\r\n            Loaded += new RoutedEventHandler(WeatherConfigurationControl_Loaded);\r\n        }\r\n\r\n        void WeatherConfigurationControl_Loaded(object sender, RoutedEventArgs e)\r\n        {\r\n            EdswCommands.BindCommandsToWindow(this);\r\n        }\r\n\r\n    }\r\n}\r\n</pre>\r\n<p>xaml code header and button entry:</p>\r\n<pre>xmlns:Commands=&quot;clr-namespace:BackEnd;assembly=BackEnd&quot;\r\n\r\n\r\n&lt;button&gt;<br>&lt;/button&gt;</pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-10T11:24:09.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]