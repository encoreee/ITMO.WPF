[
  {
    "Id": "247902",
    "ThreadId": "72596",
    "Html": "<div><span style=\"font-family:Arial;font-size:x-small\"><span>We are binding a set  of &nbsp;objects to a WPF DataGrid.&nbsp; In the SelectionChanged event, we need  to do some validation.&nbsp; If validation does not pass, we need to cancel the  event.&nbsp; Since there is no option to cancel this event, and simply changing the  selected item from within the event puts us into an infinite loop, I've had to  do the following:</span></span></div>\r\n<div>&nbsp;</div>\r\n<div><span style=\"font-family:Arial;font-size:x-small\"><span>Remove the  handler</span></span></div>\r\n<div><span style=\"font-family:Arial;font-size:x-small\"><span>Change the  SelectedIndex to the previously selected index</span></span></div>\r\n<div><span style=\"font-family:Arial;font-size:x-small\"><span>Add the handler  again</span></span></div>\r\n<div>&nbsp;</div>\r\n<div><span style=\"font-family:Arial;font-size:x-small\"><span>This works  correctly, but the problem is that the UI does not reflect the change to the  selected item.&nbsp; The SelectedItem property of the DataGrid is changed, but the UI  still highlights the newly-selected row.</span></span></div>\r\n<div>&nbsp;</div>\r\n<div><span style=\"font-family:Arial;font-size:x-small\"><span>Anyone have any ideas?</span></span></div>\r\n<div>&nbsp;</div>\r\n<div><span style=\"font-family:Arial;font-size:x-small\"><span>Here's the  code:</span></span></div>\r\n<div><span><span><span style=\"color:#0000ff\"><span style=\"color:#0000ff\"> </span></span>\r\n<p><span style=\"color:#0000ff\"><span style=\"color:#0000ff\"><span style=\"font-family:Arial;font-size:x-small\">private</span></span></span><span style=\"font-size:x-small\"><span style=\"font-family:Arial\"> <span style=\"color:#0000ff\"><span style=\"color:#0000ff\">void</span></span> dg_SelectionChanged(<span style=\"color:#0000ff\"><span style=\"color:#0000ff\">object</span></span> sender, <span style=\"color:#2b91af\"><span style=\"color:#2b91af\">SelectionChangedEventArgs</span></span></span><span style=\"font-family:Arial\"> e)</span></span></p>\r\n<p><span style=\"font-family:Arial;font-size:x-small\">{</span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"color:#0000ff\"><span style=\"font-family:Arial;color:#0000ff\">if</span></span><span style=\"font-family:Arial\"> (<span>Validate()</span>)&nbsp;<span style=\"color:#008000\">//Check to see if  description is left blank;</span></span></span></p>\r\n<p><span style=\"font-family:Arial;font-size:x-small\">{</span></p>\r\n<p><span style=\"font-family:Arial\"><span style=\"font-size:x-small\"><span style=\"color:#2b91af\"><span style=\"color:#2b91af\">MessageBox</span></span>.Show(<span style=\"color:#a31515\">&quot;Blank Desc<span>ription</span>&quot;</span>);</span></span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-family:Arial\">dg.SelectionChanged -= </span><span style=\"font-family:Arial\"><span style=\"color:#0000ff\"><span style=\"color:#0000ff\">new</span></span> <span style=\"color:#2b91af\"><span style=\"color:#2b91af\">SelectionChangedEventHandler</span></span></span><span style=\"font-family:Arial\">(dg_SelectionChanged);</span></span></p>\r\n<p><span style=\"font-family:Arial\"><span style=\"font-size:x-small\">dg.Selected<span>Index</span> = <span style=\"color:#0000ff\"><span style=\"color:#0000ff\">this</span></span>.previousIndex;</span></span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-family:Arial\">dg.SelectionChanged += <span style=\"color:#0000ff\"><span style=\"color:#0000ff\">new</span></span> <span style=\"color:#2b91af\"><span style=\"color:#2b91af\">SelectionChangedEventHandler</span></span></span><span style=\"font-family:Arial\">(dg_SelectionChanged); </span></span></p>\r\n<p><span style=\"font-family:Arial;font-size:x-small\">e.Handled = true;</span></p>\r\n<p><span style=\"font-family:Arial;font-size:x-small\">}</span></p>\r\n<p><span style=\"font-family:Arial;font-size:x-small\">this.previousIndex = dg.SelectedIndex;</span></p>\r\n<p><span style=\"font-family:Arial;font-size:x-small\">}</span></p>\r\n</span></span></div>",
    "PostedDate": "2009-10-20T15:39:43.287-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "248159",
    "ThreadId": "72596",
    "Html": "Try setting the row selected property in the LoadingRow event.<br><br>Bill<br><br>On 10/20/2009 5:39 PM, dez182 wrote:<br>&gt; <br>&gt; <br>&gt; From: dez182<br>&gt; <br>&gt; We are binding a set of  objects to a WPF DataGrid.  In the <br>&gt; SelectionChanged event, we need to do some validation.  If validation <br>&gt; does not pass, we need to cancel the event.  Since there is no option to <br>&gt; cancel this event, and simply changing the selected item from within the <br>&gt; event puts us into an infinite loop, I've had to do the following:<br>&gt;  <br>&gt; Remove the handler<br>&gt; Change the SelectedIndex to the previously selected index<br>&gt; Add the handler again<br>&gt;  <br>&gt; This works correctly, but the problem is that the UI does not reflect <br>&gt; the change to the selected item.  The SelectedItem property of the <br>&gt; DataGrid is changed, but the UI still highlights the newly-selected row.<br>&gt;  <br>&gt; Anyone have any ideas?<br>&gt;  <br>&gt; Here's the code:<br>&gt; <br>&gt; private void dg_SelectionChanged(object sender, SelectionChangedEventArgs e)<br>&gt; <br>&gt; {<br>&gt; <br>&gt; if (Validate()) //Check to see if description is left blank;<br>&gt; <br>&gt; {<br>&gt; <br>&gt; MessageBox.Show(&quot;Blank Description&quot;);<br>&gt; <br>&gt; dg.SelectionChanged -= new <br>&gt; SelectionChangedEventHandler(dg_SelectionChanged);<br>&gt; <br>&gt; dg.SelectedIndex = this.previousIndex;<br>&gt; <br>&gt; dg.SelectionChanged += new <br>&gt; SelectionChangedEventHandler(dg_SelectionChanged);<br>&gt; <br>&gt; e.Handled = true;<br>&gt; <br>&gt; }<br>&gt; <br>&gt; this.previousIndex = dg.SelectedIndex;<br>&gt; <br>&gt; }<br>&gt; <br>&gt; Read the full discussion online <br>&gt; &lt;http://wpf.codeplex.com/Thread/View.aspx?ThreadId=72596&ANCHOR#Post247902&gt;.<br>&gt; <br>&gt; To add a post to this discussion, reply to this email <br>&gt; ([email removed] <br>&gt; &lt;mailto:[email removed]?subject=[wpf:72596]&gt;)<br>&gt; <br>&gt; To start a new discussion for this project, email <br>&gt; [email removed] &lt;mailto:[email removed]&gt;<br>&gt; <br>&gt; You are receiving this email because you subscribed to this discussion <br>&gt; on CodePlex. You can unsubscribe or change your settings <br>&gt; &lt;https://wpf.codeplex.com/subscriptions/thread/project/edit&gt; on <br>&gt; codePlex.com.<br>&gt; <br>&gt; Please note: Images and attachments will be removed from emails. Any <br>&gt; posts to this discussion will also be available online at codeplex.com<br>&gt;",
    "PostedDate": "2009-10-21T08:23:39.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "248164",
    "ThreadId": "72596",
    "Html": "<p>The LoadingRow event is not called after the SelectionChanged event.</p>",
    "PostedDate": "2009-10-21T08:29:52.927-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "248291",
    "ThreadId": "72596",
    "Html": "Right, sorry. Then my first thought is to pick some other time to do the <br>validation, if possible. And if not, allow the SelectedRow to remain <br>selected but present the user with some way to correct the data.<br><br>Thanks,<br><br>Bill<br><br>On 10/21/2009 10:30 AM, dez182 wrote:<br>&gt; <br>&gt; <br>&gt; From: dez182<br>&gt; <br>&gt; The LoadingRow event is not called after the SelectionChanged event.<br>&gt; <br>&gt; Read the full discussion online <br>&gt; &lt;http://wpf.codeplex.com/Thread/View.aspx?ThreadId=72596&ANCHOR#Post248164&gt;.<br>&gt; <br>&gt; To add a post to this discussion, reply to this email <br>&gt; ([email removed] <br>&gt; &lt;mailto:[email removed]?subject=[wpf:72596]&gt;)<br>&gt; <br>&gt; To start a new discussion for this project, email <br>&gt; [email removed] &lt;mailto:[email removed]&gt;<br>&gt; <br>&gt; You are receiving this email because you subscribed to this discussion <br>&gt; on CodePlex. You can unsubscribe or change your settings <br>&gt; &lt;https://wpf.codeplex.com/subscriptions/thread/project/edit&gt; on <br>&gt; codePlex.com.<br>&gt; <br>&gt; Please note: Images and attachments will be removed from emails. Any <br>&gt; posts to this discussion will also be available online at codeplex.com<br>&gt;",
    "PostedDate": "2009-10-21T14:20:49.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "280081",
    "ThreadId": "72596",
    "Html": "<p>Did you ever find a resolution for this issue? I am trying to accomplish the same thing and have tried everything I can think of to this point.</p>",
    "PostedDate": "2010-01-21T08:28:55.023-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "280085",
    "ThreadId": "72596",
    "Html": "<p>Nope.</p>",
    "PostedDate": "2010-01-21T08:30:38.323-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "280112",
    "ThreadId": "72596",
    "Html": "<p>Thanks for the quick response anyway.</p>",
    "PostedDate": "2010-01-21T09:08:20.413-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "467861",
    "ThreadId": "72596",
    "Html": "<p>For anyone still struggling, here's how I did it (after several frustrating hours):</p>\r\n<p>1) Create a static&nbsp;property to hold the currently selected row of&nbsp;the datagrid.</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">static</span> <span style=\"color:blue\">int</span> currentlySelectedImportRow { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }</pre>\r\n<pre>2) At the end of the SelectionChanged method for the datagrid, populate the property to hold the new index.</pre>\r\n<pre><div style=\"color:black;background-color:white\"><pre>currentlySelectedRow = ThisDataGrid.SelectedIndex;\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>3) Based on code from <span style=\"font-family:Consolas;color:#008000;font-size:x-small\"><span style=\"font-family:Consolas;color:#008000;font-size:x-small\"><span style=\"font-family:Consolas;color:#008000;font-size:x-small\"><a href=\"http://social.msdn.microsoft.com/forums/en-US/wpf/thread/63974f4f-d9ee-45af-8499-42f29cbc22ae\">http://social.msdn.microsoft.com/forums/en-US/wpf/thread/63974f4f-d9ee-45af-8499-42f29cbc22ae</a></span></span></span>, create static methods to get a cell within a datagrid.</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><div style=\"color:black;background-color:white\"><pre>        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> DataGridCell GetCell(DataGrid dg, <span style=\"color:blue\">int</span> row, <span style=\"color:blue\">int</span> column)\r\n        {\r\n            DataGridRow rowContainer = GetRow(dg, row);\r\n\r\n            <span style=\"color:blue\">if</span> (rowContainer != <span style=\"color:blue\">null</span>)\r\n            {\r\n                DataGridCellsPresenter presenter = GetVisualChild&lt;DataGridCellsPresenter&gt;(rowContainer);\r\n\r\n                <span style=\"color:green\">// try to get the cell but it may possibly be virtualized</span>\r\n                DataGridCell cell = (DataGridCell)presenter.ItemContainerGenerator.ContainerFromIndex(column);\r\n                <span style=\"color:blue\">if</span> (cell == <span style=\"color:blue\">null</span>)\r\n                {\r\n                    <span style=\"color:green\">// now try to bring into view and retreive the cell</span>\r\n                    dg.ScrollIntoView(rowContainer, dg.Columns[column]);\r\n                    cell = (DataGridCell)presenter.ItemContainerGenerator.ContainerFromIndex(column);\r\n                }\r\n                <span style=\"color:blue\">return</span> cell;\r\n            }\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n        }\r\n\r\n        <span style=\"color:blue\">static</span> T GetVisualChild&lt;T&gt;(Visual parent) <span style=\"color:blue\">where</span> T : Visual\r\n        {\r\n            T child = <span style=\"color:blue\">default</span>(T);\r\n            <span style=\"color:blue\">int</span> numVisuals = VisualTreeHelper.GetChildrenCount(parent);\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; numVisuals; i++)\r\n            {\r\n                Visual v = (Visual)VisualTreeHelper.GetChild(parent, i);\r\n                child = v <span style=\"color:blue\">as</span> T;\r\n                <span style=\"color:blue\">if</span> (child == <span style=\"color:blue\">null</span>)\r\n                {\r\n                    child = GetVisualChild&lt;T&gt;(v);\r\n                }\r\n                <span style=\"color:blue\">if</span> (child != <span style=\"color:blue\">null</span>)\r\n                {\r\n                    <span style=\"color:blue\">break</span>;\r\n                }\r\n            }\r\n            <span style=\"color:blue\">return</span> child;\r\n        } \r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> DataGridRow GetRow(DataGrid dg, <span style=\"color:blue\">int</span> index)\r\n        {\r\n            DataGridRow row = (DataGridRow)dg.ItemContainerGenerator.ContainerFromIndex(index);\r\n            <span style=\"color:blue\">if</span> (row == <span style=\"color:blue\">null</span>)\r\n            {\r\n                <span style=\"color:green\">// may be virtualized, bring into view and try again</span>\r\n                dg.ScrollIntoView(dg.Items[index]);\r\n                row = (DataGridRow)dg.ItemContainerGenerator.ContainerFromIndex(index);\r\n            }\r\n            <span style=\"color:blue\">return</span> row;\r\n        }</pre>\r\n<pre>4) Create a static method which will set the index for the datagrid according to the value of the property, and focus on the first cell of the appropriate row.</pre>\r\n<pre><div style=\"color:black;background-color:white\"><pre>        <span style=\"color:blue\">static</span> <span style=\"color:blue\">object</span> RestoreSelectedRow(<span style=\"color:blue\">object</span> sender)\r\n        {\r\n            DataGrid thisDG = (DataGrid)sender;\r\n            thisDG.SelectedIndex = currentlySelectedRow;\r\n\r\n            DataGridCell cell = GetCell(impFiles, currentlySelectedRow, 0);\r\n            cell.Focus();\r\n\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n        }\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n5) In the SelectionChanged event for the DataGrid, use BeginInvoke to launch a new thread which will set the index back to the row which failed validation.</span></span></p>\r\n</pre>\r\n</div>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\">\r\n<div style=\"color:black;background-color:white\">\r\n<pre>ThisDataGrid.Dispatcher.BeginInvoke(DispatcherPriority.Normal, <span style=\"color:blue\">new</span> DispatcherOperationCallback(RestoreSelectedRow), ThisDataGrid);\r\n</pre>\r\n<pre>6) At the end of the SelectionChanged event, if the datagrid row fails validation, exit without changing the value of the currentlySelectedRow property.</pre>\r\n</div>\r\n</span></span></span><span style=\"font-family:Consolas;font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span></span></span><span style=\"font-family:Consolas;font-size:x-small\">&nbsp;</span></span></span></span><span style=\"font-family:Consolas;font-size:x-small\">&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family:Consolas;color:#008000;font-size:x-small\"><span style=\"font-family:Consolas;color:#008000;font-size:x-small\">&nbsp;</span></span></p>",
    "PostedDate": "2010-07-15T08:55:57.463-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]