[
  {
    "Id": "174841",
    "ThreadId": "52089",
    "Html": "I am developing a WPF application using MVVM and the current version of the Ribbon control. The commands in my app are all ICommands, which are exposed as properties of the main window's view model. I don't want to change that to accommodate the Ribbon, particularly since the RibbonCommand appears to be going away in the next release.<br>\r\n<br>\r\nWhat I had hoped to do was bind a RibonCommand's <em>Executed</em> and <em>CanExecute</em> properties to my ICommand <em>Execute()</em> and <em>CanExecute()</em> methods, since I can't bind a RibbonCommand to an ICommand directly. Here is the code I tried:<br>\r\n<br>\r\n&lt;r:RibbonCommand x:Key=&quot;Open&quot;<br>\r\n    <strong>CanExecute=&quot;{Binding Path=FileOpen.CanExecute}&quot;<br>\r\n    Executed=&quot;{Binding Path=FileOpen.Execute}&quot;<br>\r\n</strong>    LabelTitle=&quot;Open&quot;<br>\r\n    LabelDescription=&quot;Opens an existing data file.&quot;<br>\r\n    LargeImageSource=&quot;Images/OpenLarge.png&quot;<br>\r\n    SmallImageSource=&quot;Images/OpenSmall.png&quot;<br>\r\n    ToolTipTitle=&quot;Open Data File&quot;<br>\r\n    ToolTipDescription=&quot;Opens an existing data file.&quot; /&gt;<br>\r\n<br>\r\nThe compiler throws the following error: &quot;Error 1 CanExecute=&quot;{Binding Path=FileOpen.CanExecute}&quot; is not valid. '{Binding Path=FileOpen.CanExecute}' is not a valid event handler method name. Only instance methods on the generated or code-behind class are valid. &quot;<br>\r\n<br>\r\nHere's my question: Is there any way to do the binding that I am trying to do, or do I have to implement handlers in my code-behind that invoke my ICommand methods? Thanks for your help.<br>\r\n<br>\r\nDavid Veeneman<br>\r\nForesight Systems<br>\r\n",
    "PostedDate": "2009-04-02T08:11:26.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "193075",
    "ThreadId": "52089",
    "Html": "<p>Hi. I'm in the same problem. I'm using Office 2007 Ribbon conrol in Model-View-ViewModel application. What I'm using now is custom class RibbonCommandReference derived from RibbonCommand. This class expose new simple property called Command which accepts CommandReference&nbsp;declared in XAML resources&nbsp;and redirect all calls to methods maped to CommandReferene instance.&nbsp;I don't know is this a&nbsp;good way to reach the exprected behavior. Today I'll try VS2010 Beta1&nbsp;with .NET 4.0 Beta1 and I&nbsp;hope&nbsp;find some improvements there.</p>\r\n<p>Best regards.</p>",
    "PostedDate": "2009-05-21T22:36:12.033-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "193172",
    "ThreadId": "52089",
    "Html": "<p>I've created an own RibbonCommand:</p>\r\n<p>public class RibbonCommandEx : RibbonCommand<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private ICommand _delegatedCommand;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ICommand DelegatedCommand<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return _delegatedCommand; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (_delegatedCommand != value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _delegatedCommand = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (_delegatedCommand != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.CanExecute += RibbonCommandEx_CanExecute;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Executed += RibbonCommandEx_Executed;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.CanExecute -= RibbonCommandEx_CanExecute;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Executed -= RibbonCommandEx_Executed;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void RibbonCommandEx_Executed(object sender, ExecutedRoutedEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DelegatedCommand.Execute(e.Parameter);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void RibbonCommandEx_CanExecute(object sender, CanExecuteRoutedEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.CanExecute = DelegatedCommand.CanExecute(e.Parameter);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br><br>&lt;commands:CommandReference x:Key=&quot;WelcomePageCommandReference&quot; Command=&quot;{Binding WelcomePageCommand}&quot;/&gt;<br><br>&lt;commands:RibbonCommandEx x:Key=&quot;RibbonWelcomePageCommand&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DelegatedCommand=&quot;{StaticResource WelcomePageCommandReference}&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LabelTitle=&quot;{x:Static properties:Resources.RSTR_WelcomePage}&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LabelDescription=&quot;{x:Static properties:Resources.RSTR_WelcomePageDescription}&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SmallImageSource=&quot;/Resources/Images/WelcomePage.png&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LargeImageSource=&quot;/Resources/Images/WelcomePage.png&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ToolTipImageSource=&quot;/Resources/Images/WelcomePage.png&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ToolTipTitle=&quot;{x:Static properties:Resources.RSTR_WelcomePage}&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ToolTipDescription=&quot;{x:Static properties:Resources.RSTR_WelcomePageDescription}&quot;/&gt;</p>",
    "PostedDate": "2009-05-22T05:09:41.727-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "193386",
    "ThreadId": "52089",
    "Html": "<p>Thank you for your post and for comprehensive example. Appreciate highly your help to clarify this.</p>",
    "PostedDate": "2009-05-22T14:25:58.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "238284",
    "ThreadId": "52089",
    "Html": "<p>Hi, sorry if I'm being stupid, but I just can't figure out what is the CommandReference.</p>\r\n<p>Can someone give me a clue?</p>\r\n<p>Tks</p>\r\n<p>Diego</p>",
    "PostedDate": "2009-09-24T05:54:34.483-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "238288",
    "ThreadId": "52089",
    "Html": "<p>Don't bother with the current version of the WPF Ribbon--it's a mess. Microsoft scrapped it, mainly because it wasn't compatible with MVVM, and they have rewritten it. It's supposed to be out any time now.</p>",
    "PostedDate": "2009-09-24T06:02:25.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "238386",
    "ThreadId": "52089",
    "Html": "<p>I've found it.</p>\r\n<p>Tks everyone.</p>",
    "PostedDate": "2009-09-24T09:50:54.97-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "245369",
    "ThreadId": "52089",
    "Html": "<p>To clarify others, here is how to use above code. CommandReference class is created for you, when you create a new WPF Model-View Application. To have that project type you would need to install the MVVM template toolkit, which you can download here&nbsp;<span style=\"color:#30332d\"><a style=\"text-decoration:underline;color:#ce8b10\" href=\"http://wpf.codeplex.com/Wiki/View.aspx?title=WPF Model-View-ViewModel Toolkit\">WPF Model-View-ViewModel Toolkit</a></span></p>\r\n<p>&lt;Window.Resources&gt;</p>\r\n<p>&lt;commands:CommandReference x:Key=&quot;WelcomePageCommandReference&quot; Command=&quot;{Binding WelcomePageCommand}&quot;/&gt;<br><br>&lt;commands:RibbonCommandEx x:Key=&quot;RibbonWelcomePageCommand&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DelegatedCommand=&quot;{StaticResource WelcomePageCommandReference}&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LabelTitle=&quot;{x:Static properties:Resources.RSTR_WelcomePage}&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LabelDescription=&quot;{x:Static properties:Resources.RSTR_WelcomePageDescription}&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SmallImageSource=&quot;/Resources/Images/WelcomePage.png&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LargeImageSource=&quot;/Resources/Images/WelcomePage.png&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ToolTipImageSource=&quot;/Resources/Images/WelcomePage.png&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ToolTipTitle=&quot;{x:Static properties:Resources.RSTR_WelcomePage}&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ToolTipDescription=&quot;{x:Static properties:Resources.RSTR_WelcomePageDescription}&quot;/&gt;</p>\r\n<p>&lt;/Window.Resources&gt;</p>\r\n<p>.<br>.<br>.<br>&nbsp;&lt;r:Ribbon.ApplicationMenu&gt;<br>&nbsp;&nbsp; &nbsp; &nbsp; <span style=\"white-space:pre\"> </span>&lt;r:RibbonApplicationMenu Command=&quot;{StaticResource&nbsp;RibbonWelcomePageCommand}&quot;&gt;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/r:RibbonApplicationMenu&gt;<br><span style=\"white-space:pre\"> </span>&lt;/r:Ribbon.ApplicationMenu&gt;<br>&lt;r:Ribbon.ApplicationMenu&gt;</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:71px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;r:RibbonApplicationMenu Command=&quot;{StaticResource RibbonExitCommand}&quot;&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:71px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;r:RibbonApplicationMenuItem Command=&quot;{StaticResource RibbonExitCommand}&quot;&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:71px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/r:RibbonApplicationMenuItem&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:71px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/r:RibbonApplicationMenu&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:71px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;/r:Ribbon.ApplicationMenu&gt;</div>\r\n<p>.<br>.<br>.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>My 2 cents.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-13T20:35:46.463-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "245932",
    "ThreadId": "52089",
    "Html": "<p>Thanks for this. It has been very useful.</p>\r\n<p>But!! I do have another question. How can I change the ribbontab Selected event&nbsp;to a Command in the viewmodel.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">r</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">RibbonTab</span> <span style=\"color:Red\">Label</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;Home&quot;</span> <span style=\"color:Red\">Selected</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;RibbonTab_Selected&quot;</span>  <span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">r</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">RibbonTab</span> <span style=\"color:Red\">Label</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;House Keeping&quot;</span> <span style=\"color:Red\">Selected</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;RibbonTab_Selected&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">r</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">RibbonTab</span> <span style=\"color:Red\">Label</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;Config&quot;</span> <span style=\"color:Red\">Selected</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;RibbonTab_Selected&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p><span style=\"color:Blue\">&nbsp;</span><br>What I need to do is, each tab has its own workspace. Any button clicked&nbsp;on the selected tab goes only to the selected workspace. Selecting a different tab hides the previous workspace and shows this workspace only. The current code behind looks like this</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> RibbonTab_Selected(<span style=\"color:Blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            <span style=\"color:Blue\">switch</span> (ribbonmenu.SelectedTab.Label)\r\n            {\r\n                <span style=\"color:Blue\">case</span> <span style=\"color:#A31515\">&quot;Home&quot;</span>:\r\n                    SelectControl(ucHome);\r\n                    <span style=\"color:Blue\">break</span>;\r\n                <span style=\"color:Blue\">case</span> <span style=\"color:#A31515\">&quot;House Keeping&quot;</span>:\r\n                    SelectControl(ucHouse);\r\n                    <span style=\"color:Blue\">break</span>;\r\n                <span style=\"color:Blue\">case</span> <span style=\"color:#A31515\">&quot;Config&quot;</span>:\r\n                    SelectControl(ucConfig);\r\n                    <span style=\"color:Blue\">break</span>;\r\n              <span style=\"color:Blue\">default</span>:\r\n                    SelectControl(ucHome);\r\n                    <span style=\"color:Blue\">break</span>;\r\n            }\r\n\r\n        }\r\n<span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> SelectControl(Control selectedControl)\r\n        {\r\n            <span style=\"color:Blue\">foreach</span> (UserControl uc <span style=\"color:Blue\">in</span> workspace.Children.OfType&lt;UserControl&gt;())\r\n            {\r\n                uc.Visibility = Visibility.Collapsed;\r\n            }\r\n\r\n            selectedControl.Visibility = Visibility.Visible;\r\n        }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-15T01:57:56.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "258836",
    "ThreadId": "52089",
    "Html": "<p><a id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl14_UserNameLink\" href=\"http://www.codeplex.com/site/users/view/sergioesp\">sergioesp</a>, I am feeling a bit dense here :( .</p>\r\n<p>I have copied the CommandReference.cs and Created the RibbonCommandEx class.</p>\r\n<p><span style=\"color:#ff0000\">I <strong>have a global command class :</strong></span></p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">namespace</span> Infrastructure<br>{<br>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">class</span> MenuCommands<br>    { <span style=\"color:Green\">//Composite command from the Prism Framework</span>\r\n <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> CompositeCommand DivertCommand = <span style=\"color:Blue\">new</span> CompositeCommand();<br>}<br><span style=\"color:#ff0000\"><br><strong>And in my ViewModel, I have </strong></span><strong><br></strong><br><div style=\"color:Black;background-color:White\"><pre>         <span style=\"color:Blue\">private</span> DelegateCommand&lt;<span style=\"color:Blue\">object</span>&gt; divertCommand;<br>        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> DivertItem(<span style=\"color:Blue\">object</span> e)<br>        {<br>            Debug.WriteLine(<span style=\"color:#A31515\">&quot;Itemwas diverted&quot;</span> );<br>        }<br>        <span style=\"color:Blue\">public</span> System.Windows.Input.ICommand DivertCommand<br>        {<br>            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">if</span> (divertCommand == <span style=\"color:Blue\">null</span>)<br>                {<br>                    divertCommand = <span style=\"color:Blue\">new</span> DelegateCommand&lt;<span style=\"color:Blue\">object</span>&gt;(DivertItem, <span style=\"color:Blue\">delegate</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>; });<br>                }<br>                <span style=\"color:Blue\">return</span> divertCommand;<br>            }<br>        }<br><br>.....<br><span style=\"color:#ff0000\"><strong>in constructor</strong><br></span><br>Infrastructure.MenuCommands.DivertCommand.RegisterCommand(DivertCommand); <br></pre>\r\n</div>\r\n<span style=\"color:#ff0000\"><br><strong>and finally, in xaml..</strong>.</span><br>\r\n<pre>\r\n<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">r</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">RibbonWindow.Resources</span><span style=\"color:Blue\">&gt;</span>\r\n\t <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">infrastructure</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">CommandReference</span> <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">DivertCommandReference</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Command</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding infrastructure:MenuCommands.DivertCommand}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n\t <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">infrastructure</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">RibbonCommandEx</span> <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">DivertCommand</span><span style=\"color:Black\">&quot;</span>\r\n\t\t\t\t\t\t\t\t   <span style=\"color:Red\">DelegatedCommand</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{StaticResource DivertCommandReference}</span><span style=\"color:Black\">&quot;</span>\r\n\t\t\t\t\t\t\t\t\t<span style=\"color:Red\">LabelTitle</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Divert</span><span style=\"color:Black\">&quot;</span>\r\n\t\t\t\t\t\t\t\t <span style=\"color:Red\">ToolTipTitle</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Divert Item</span><span style=\"color:Black\">&quot;</span>\r\n\t\t\t\t\t\t\t\t <span style=\"color:Red\">ToolTipDescription</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Divert a items</span><span style=\"color:Black\">&quot;</span>\r\n\t\t\t\t\t\t\t\t <span style=\"color:Red\">SmallImageSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">images/Divert.png</span><span style=\"color:Black\">&quot;</span>\r\n\t\t\t\t\t\t\t\t <span style=\"color:Red\">LargeImageSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">images/Divert.png</span><span style=\"color:Black\">&quot;</span>\r\n\t\t\t\t\t\t\t<span style=\"color:Blue\">/&gt;</span>\r\n\r\n\t<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">r</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">RibbonWindow.Resources</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n.<br><br>The RibbonEx hits the DelegatedCommand, but the commandReference never gets the OnCommandChanged(), which it does in a project from the MVVM toolkit. <br><br>Any idea what I am missing here ? Some syntax issue ? The visual is that the ribbonbutton is never CanExecute==true.<br>Larry<br>\r\n<pre>\t\r\n\t \r\n\t \r\n\r\n\t</pre>\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-11-19T12:33:48.243-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "259006",
    "ThreadId": "52089",
    "Html": "<p>Hi,</p>\r\n<p>Your command call is wrong&nbsp; - <span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding infrastructure:MenuCommands.DivertCommand}</span><span style=\"color:black\">&quot;</span></p>\r\n<p><span style=\"color:black\">This should be property in your ViewModel - <span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding DivertCommand}</span><span style=\"color:black\">&quot;</span></span></p>\r\n<p><span style=\"color:black\"><span style=\"color:black\">The viewmodel looks like:</span></span></p>\r\n<p><span style=\"color:black\"><span style=\"color:black\">\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public class ViewModel</span></pre>\r\n<pre><span style=\"color:Blue\">{</span></pre>\r\n<pre><span style=\"color:Blue\">private</span> SimpleCommand divertCommand;\r\n\r\n\r\n<span style=\"color:Blue\">public</span> ViewModel()\r\n{\r\ntestCommand = <span style=\"color:Blue\">new</span> SimpleCommand\r\n        {\r\n            CanExecuteDelegate = x =&gt; <span style=\"color:Blue\">true</span>,\r\n            ExecuteDelegate = x =&gt; ExecuteCommand()\r\n        };\r\n}\r\n\r\n        <span style=\"color:Blue\">public</span> SimpleCommand DivertCommand\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> divertCommand; }\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> ExecuteCommand()\r\n        {\r\n            DivertCommand.CommandSucceeded = <span style=\"color:Blue\">false</span>;\r\n\r\n<span style=\"color:Green\">//Your code to execute</span>\r\n\r\n            DivertCommand.CommandSucceeded = <span style=\"color:Blue\">true</span>;\r\n        }</pre>\r\n<pre>}\r\n\r\n</pre>\r\n</div>\r\nI use SimpleCommand commandreference&nbsp;as used by Sacha Barber <a href=\"http://www.codeproject.com/KB/WPF/Cinch.aspx\">http://www.codeproject.com/KB/WPF/Cinch.aspx</a></span></span></p>",
    "PostedDate": "2009-11-20T02:31:02.437-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "259092",
    "ThreadId": "52089",
    "Html": "<p>Thanks Seventeeth !</p>\r\n<p>&nbsp;</p>\r\n<p>It was in fact an issue with the syntax. I was able to use this with the CompositeCommand. This was important because several modules needed to &quot;play&quot; with the command, and the original VM didn't need the dependicies.</p>\r\n&nbsp;\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">infrastructure</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">CommandReference</span> <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">DivertCommandReference</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Command</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Static infrastructure:MenuCommands.DivertCommand}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n<br><br>Allows me to simply use the static command like I do with other things.</pre>\r\n</div>",
    "PostedDate": "2009-11-20T07:51:58.177-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "264867",
    "ThreadId": "52089",
    "Html": "<p>Thank you all, I have found this discussion very helpful.</p>\r\n<p>I have just started to get to grips with the ribbon control and MVVM and would like some help regarding&nbsp;how best to implement it into the&nbsp;MVVM pattern.</p>\r\n<p>I take it you should have one main view containing the ribbon, that is&nbsp;binded to a main view model. From this main view I want to access a number of&nbsp;different child views, which will be displayed within the main view. The&nbsp;child views&nbsp;should use the same ribbon contained within the main view. How do I bind the ribbon controls so that depending on which child view is open the ribbon control responds to that view?</p>",
    "PostedDate": "2009-12-08T03:39:53.563-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "282537",
    "ThreadId": "52089",
    "Html": "<p>segioesp!</p>\r\n<p>You are a freaking legend. Well done, man.</p>\r\n<p>I downloaded the MVVM toolkit, foudn the CommandReference class and converted it to VB.NET.</p>\r\n<p>Now, with sergioesp's RibbonCommandEx I am using the RibbonCommand in a fully MVVM-complaint manner (including Input Gestures) with no forwarding of CanExecute and Execute handlers&nbsp; from code-behind.</p>\r\n<p>Thanks WPF Futures for the CodeReference class and thanks sergio for the RibbonCommandEx class</p>\r\n<p>Will post the conversion to VB.NEt on my blog soon.</p>",
    "PostedDate": "2010-01-27T16:15:44.057-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "283855",
    "ThreadId": "52089",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>baraholka wrote:</strong><br>\r\n<p>segioesp!</p>\r\n<p>You are a freaking legend. Well done, man.</p>\r\n<p>I downloaded the MVVM toolkit, foudn the CommandReference class and converted it to VB.NET.</p>\r\n<p>Now, with sergioesp's RibbonCommandEx I am using the RibbonCommand in a fully MVVM-complaint manner (including Input Gestures) with no forwarding of CanExecute and Execute handlers&nbsp; from code-behind.</p>\r\n<p>Thanks WPF Futures for the CodeReference class and thanks sergio for the RibbonCommandEx class</p>\r\n<p>Will post the conversion to VB.NEt on my blog soon.</p>\r\n</blockquote>\r\n<p>Here's Sergio's Code in VB.NET with support for InputGestures and not requiring you to use WPF MVVM&nbsp;Toolkit <a href=\"http://waxtadpole.wordpress.com/2010/01/31/integrating-wpf-ribbon-with-prism-and-mvvm-with-vb-net-example/\">http://waxtadpole.wordpress.com/2010/01/31/integrating-wpf-ribbon-with-prism-and-mvvm-with-vb-net-example/</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-01-31T03:28:44.94-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]