[
  {
    "Id": "173805",
    "ThreadId": "51799",
    "Html": "I have come upon a situation where I need to validate a record that the user enters (or updates) in the DataGrid against all rows in the underlying collection. Basically, this is duplicates detection with a custom definition of what constitutes a duplicate. (There are a few distinct cases that need to be accounted for.) At first, I reached for RowValidationRules, but those have no concept of the collection to which the row is about to be added, which is an absolute requirement in this case, and they also have no means of passing parameters in a manner similar to that of value converters (so I cannot use a hack based around a RelativeSource binding either).<br>\r\n<br>\r\nCurrently, I am catching the &quot;duplicate entries&quot; condition when the user saves the changes in the UI (&quot;save&quot; is a distinct operation in the UI, so this works), but since we might be talking about hundreds of rows, I really would like to provide the user with some sort of immediate feedback when they add a duplicate row based on this custom logic's definition of duplicate. I know of MultiValueBindings, but they obviously don't help here, and I would really rather not couple the validation logic _too_ closely to the DataGrid in the presentation layer. The collection itself is an ObservableCollection&lt;T&gt; derivate, and for a moment, I thought of the CollectionChanged event, but there doesn't seem to be any way to override the collection change from there (NotifyCollectionChangedEventArgs.Action is read-only, and there is nothing like NotifyCollectionChangedEventArgs.Cancel).<br>\r\n<br>\r\nAny suggestions would be greatly appreciated.<br>\r\n",
    "PostedDate": "2009-03-31T02:10:23.19-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "173864",
    "ThreadId": "51799",
    "Html": "This article describes a technique for global validation, <a href=\"http://www.codeproject.com/KB/WPF/GlobalWPFValidation.aspx\">http://www.codeproject.com/KB/WPF/GlobalWPFValidation.aspx</a>.Â  It does stray away from the normal platform validation but it may give you some ideas.\r\n",
    "PostedDate": "2009-03-31T05:33:13.257-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]