[
  {
    "Id": "174190",
    "ThreadId": "51923",
    "Html": "<p>Hi All,<br>\r\n<br>\r\n Am fed up with an issue in wpf datagrid . I have a data grid which is having check boxes in first column . Also i have a checkbox outside the Datagrid . When am cheking the checkbox outside the datagrid, i want all the checkboxes inside the grid . I tried implementing this in the following way(Code attached along with this) , but it is showing strange behaviour . Some checkboxes in rows randomly getting checked(if some more clearly says first 10 rows are getting checked after that say 5 not checked again next 10 getting checked  and this process continues till the end of records). I have tried solving this issue using the helper class in Vinsibal's demo application , but still it is showing same behaviour.  I dont know why this happening . Am attaching my code here . <br>\r\nPlease suggest a solution <br>\r\nRegards<br>\r\nsreeraj <br>\r\n-----------XAML For Grid------------------</p>\r\n<p>&lt;dg:DataGrid Grid.Row=&quot;1&quot; AutoGenerateColumns=&quot;False&quot; AlternatingRowBackground=&quot;SkyBlue&quot; RowDetailsVisibilityMode=&quot;Collapsed&quot; <br>\r\n                     AllowDrop=&quot;False&quot; HeadersVisibility=&quot;All&quot; <br>\r\n                     ColumnHeaderHeight=&quot;30&quot; FontFamily=&quot;Verdana&quot; FontSize=&quot;12&quot;    Background=&quot;#FFFFFFFF&quot; <br>\r\n                     OpacityMask=&quot;#FFF1E3E3&quot; Foreground=&quot;#FF000000&quot; <br>\r\n                     BorderThickness=&quot;1&quot; SnapsToDevicePixels=&quot;False&quot; CanUserDeleteRows=&quot;False&quot; CanUserAddRows=&quot;False&quot; <br>\r\n                     ClipToBounds=&quot;False&quot; RowHeight=&quot;25&quot; <br>\r\n                      ScrollViewer.CanContentScroll=&quot;True&quot; Padding=&quot;0&quot; <br>\r\n                     VerticalContentAlignment=&quot;Center&quot; MinWidth=&quot;0&quot;  HorizontalScrollBarVisibility=&quot;Hidden&quot; VerticalScrollBarVisibility=&quot;Visible&quot; GridLinesVisibility=&quot;All&quot; Name=&quot;grdWorkOrders&quot; Margin=&quot;0,0,0,52&quot; Height=&quot;150&quot; VerticalAlignment=&quot;Top&quot; EnableColumnVirtualization=&quot;False&quot;&gt;<br>\r\n                        <br>\r\n                        &lt;dg:DataGrid.Columns&gt;<br>\r\n                            &lt;dg:DataGridTemplateColumn  MinWidth=&quot;30&quot;&gt;<br>\r\n                                &lt;dg:DataGridTemplateColumn.CellTemplate&gt;<br>\r\n                                    &lt;DataTemplate&gt;<br>\r\n                                        &lt;CheckBox x:Name=&quot;chkMain&quot;&gt;&lt;/CheckBox&gt;<br>\r\n                                    &lt;/DataTemplate&gt;<br>\r\n                                &lt;/dg:DataGridTemplateColumn.CellTemplate&gt;<br>\r\n                            &lt;/dg:DataGridTemplateColumn&gt;<br>\r\n                            &lt;!--&lt;dg:DataGridCheckBoxColumn    Header=&quot;Access&quot;&gt;&lt;/dg:DataGridCheckBoxColumn&gt;--&gt;<br>\r\n                            &lt;dg:DataGridTextColumn Binding=&quot;{Binding Path=ActivityName}&quot; Header=&quot;AIRCRAFT&quot;       FontSize=&quot;10&quot; MinWidth=&quot;110&quot; /&gt;<br>\r\n                            &lt;dg:DataGridTextColumn Binding=&quot;{Binding Path=Description}&quot; Header=&quot;FLEET&quot;   FontSize=&quot;10&quot; MinWidth=&quot;40&quot; /&gt;<br>\r\n                            &lt;dg:DataGridTextColumn Binding=&quot;{Binding Path=Description}&quot; Header=&quot;MAINTENANCE FLEET&quot;   FontSize=&quot;10&quot; MinWidth=&quot;40&quot; /&gt;<br>\r\n                            &lt;dg:DataGridCheckBoxColumn  Header=&quot;RESPONSABILITY&quot;&gt;&lt;/dg:DataGridCheckBoxColumn&gt;<br>\r\n                        &lt;/dg:DataGrid.Columns&gt;<br>\r\n <br>\r\n                    &lt;/dg:DataGrid&gt;</p>\r\n<p>-----------Code Behind --------------------</p>\r\n<p>for (int nCntr = 0; nCntr &lt; grdWorkOrders.Items.Count; nCntr++)<br>\r\n            {               <br>\r\n                var cntr = MyDataGrid.ItemContainerGenerator.ContainerFromIndex(nCntr);<br>\r\n                DataGridRow ObjROw = (DataGridRow)cntr;<br>\r\n                if (ObjROw == null)<br>\r\n                {<br>\r\n                    ObjROw = (DataGridRow)MyDataGrid.ItemContainerGenerator.ContainerFromIndex(nCntr);<br>\r\n <br>\r\n                }<br>\r\n                else<br>\r\n                {<br>\r\n                    FrameworkElement objElement = MyDataGrid.Columns[0].GetCellContent(ObjROw);<br>\r\n                    if (objElement != null)<br>\r\n                    {<br>\r\n                        if (objElement.GetType().ToString().EndsWith(&quot;CheckBox&quot;))<br>\r\n                        {<br>\r\n                            CheckBox objChk = (CheckBox)objElement;<br>\r\n                            objChk.IsChecked = true;<br>\r\n                        }<br>\r\n                    }                   <br>\r\n                }<br>\r\n <br>\r\n            }</p>\r\n<p> </p>\r\n",
    "PostedDate": "2009-03-31T23:35:57.057-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "174201",
    "ThreadId": "51923",
    "Html": "Wouldn't it be easier to iterate over&nbsp; MyDataGrid.Items and set the property that the checkbox's IsChecked property is bound to? Or use DataGridCheckBoxColumn, if you aren't already.<br>\r\n",
    "PostedDate": "2009-04-01T00:32:48.047-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "174300",
    "ThreadId": "51923",
    "Html": "The issue you are running into is the row virtualization.  While turning off virtualization will solve the problem, it will make the perf go way down.  You could take a different approach:<br>\r\n<br>\r\n<p>     &lt;Grid&gt;<br>\r\n        &lt;Grid.RowDefinitions&gt;<br>\r\n            &lt;RowDefinition Height=&quot;Auto&quot; /&gt;<br>\r\n            &lt;RowDefinition Height=&quot;*&quot; /&gt;<br>\r\n        &lt;/Grid.RowDefinitions&gt;<br>\r\n        &lt;CheckBox Content=&quot;Check All&quot; IsChecked=&quot;{Binding IsCheckedAll}&quot;/&gt;<br>\r\n        &lt;dg:DataGrid x:Name=&quot;MyDataGrid&quot;<br>\r\n                     Grid.Row=&quot;1&quot;<br>\r\n                     AutoGenerateColumns=&quot;False&quot;                                       <br>\r\n                     SelectionUnit=&quot;FullRow&quot;<br>\r\n                     Background=&quot;Transparent&quot;<br>\r\n                     ItemsSource=&quot;{Binding Items}&quot;<br>\r\n                     RowBackground=&quot;White&quot; <br>\r\n                     AlternatingRowBackground=&quot;LightGray&quot;<br>\r\n                     AlternationCount=&quot;2&quot; <br>\r\n                     CanUserAddRows=&quot;False&quot;&gt;           <br>\r\n            &lt;dg:DataGrid.Columns&gt;<br>\r\n                &lt;dg:DataGridCheckBoxColumn Header=&quot;Check Me&quot; Binding=&quot;{Binding Path=IsChecked}&quot; /&gt;<br>\r\n                &lt;dg:DataGridTextColumn Header=&quot;Data1&quot; Binding=&quot;{Binding Path=Data1}&quot; /&gt;<br>\r\n                &lt;dg:DataGridTextColumn Header=&quot;Data2&quot; Binding=&quot;{Binding Path=Data2}&quot; /&gt;<br>\r\n            &lt;/dg:DataGrid.Columns&gt;<br>\r\n        &lt;/dg:DataGrid&gt;<br>\r\n    &lt;/Grid&gt;</p>\r\n<p>    public partial class Window3 : Window<br>\r\n    {<br>\r\n        ViewModel _vm;</p>\r\n<p>        public Window3()<br>\r\n        {<br>\r\n            InitializeComponent();</p>\r\n<p>            _vm = new ViewModel();<br>\r\n            this.DataContext = _vm;<br>\r\n        }<br>\r\n    }</p>\r\n<p>    public class ViewModel : INotifyPropertyChanged<br>\r\n    {<br>\r\n        private ObservableCollection&lt;DummyClass&gt; _items;<br>\r\n        private bool _isCheckedAll;</p>\r\n<p>        public ViewModel()<br>\r\n        {<br>\r\n            Items = new ObservableCollection&lt;DummyClass&gt;<br>\r\n            {<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },<br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; },                <br>\r\n                new DummyClass { Data1 = &quot;testData&quot;, Data2 = &quot;testData&quot; }<br>\r\n            };<br>\r\n        }</p>\r\n<p>        public ObservableCollection&lt;DummyClass&gt; Items<br>\r\n        {<br>\r\n            get { return _items; }<br>\r\n            set<br>\r\n            {<br>\r\n                _items = value;<br>\r\n                OnPropertyChanged(&quot;Items&quot;);<br>\r\n            }<br>\r\n        }</p>\r\n<p>        public bool IsCheckedAll<br>\r\n        {<br>\r\n            get { return _isCheckedAll; }<br>\r\n            set<br>\r\n            {<br>\r\n                _isCheckedAll = value;</p>\r\n<p>                foreach (var item in Items)<br>\r\n                    item.IsChecked = _isCheckedAll;</p>\r\n<p>                OnPropertyChanged(&quot;IsCheckedAll&quot;);<br>\r\n            }<br>\r\n        }</p>\r\n<p>        #region INotifyPropertyChanged</p>\r\n<p>        public event PropertyChangedEventHandler PropertyChanged;</p>\r\n<p>        private void OnPropertyChanged(string propertyName)<br>\r\n        {<br>\r\n            if (PropertyChanged != null)<br>\r\n            {<br>\r\n                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));<br>\r\n            }<br>\r\n        }</p>\r\n<p>        #endregion INotifyPropertyChanged<br>\r\n    }</p>\r\n<p>    public class DummyClass : INotifyPropertyChanged<br>\r\n    {<br>\r\n        private string _data1;<br>\r\n        private string _data2;<br>\r\n        private bool _isChecked;</p>\r\n<p>        public string Data1<br>\r\n        {<br>\r\n            get { return _data1; }<br>\r\n            set<br>\r\n            {<br>\r\n                _data1 = value;<br>\r\n                OnPropertyChanged(&quot;Data1&quot;);<br>\r\n            }<br>\r\n        }</p>\r\n<p>        public string Data2<br>\r\n        {<br>\r\n            get { return _data2; }<br>\r\n            set<br>\r\n            {<br>\r\n                _data2 = value;<br>\r\n                OnPropertyChanged(&quot;Data2&quot;);<br>\r\n            }<br>\r\n        }</p>\r\n<p>        public bool IsChecked<br>\r\n        {<br>\r\n            get { return _isChecked; }<br>\r\n            set<br>\r\n            {<br>\r\n                _isChecked = value;<br>\r\n                OnPropertyChanged(&quot;IsChecked&quot;);<br>\r\n            }<br>\r\n        }</p>\r\n<p>        #region INotifyPropertyChanged</p>\r\n<p>        public event PropertyChangedEventHandler PropertyChanged;</p>\r\n<p>        private void OnPropertyChanged(string propertyName)<br>\r\n        {<br>\r\n            if (PropertyChanged != null)<br>\r\n            {<br>\r\n                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));<br>\r\n            }<br>\r\n        }</p>\r\n<p>        #endregion INotifyPropertyChanged<br>\r\n    }</p>\r\n",
    "PostedDate": "2009-04-01T05:54:04.69-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "176069",
    "ThreadId": "51923",
    "Html": "Hello Vinsibal ,<br>\r\nSorry for the late reply , the issue solved . <br>\r\nThank you very much <br>\r\nregards<br>\r\nsreeraj\r\n",
    "PostedDate": "2009-04-06T04:38:34.603-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "225989",
    "ThreadId": "51923",
    "Html": "<p>Vincent-</p>\r\n<p>This was a great post. While I am not using a &quot;Check All&quot; column like the example above. I am using a DataGrid tied to a view model much like you show above. Each row has a column that tracks a processing state, an Enum on the view model that is converted to bool for the grid's consumption in a check box column.</p>\r\n<p>So far so good. Binding is working well. CRUD is firing with immediate state updates to oracle whenever the checkbox changes.</p>\r\n<p>Next I have a button in the row header. This button fires a modal window when selected, presenting the user with a different view. As of now, it is Enabled and Disabled on a DataTrigger checking if the row IsSelected. Works well.</p>\r\n<p>So where I am at now is I would like to add the check box column's current value to these triggers for the row header button... so that when the check box is checked the button is disabled. And if the user unchecks the row, the button enables so the user can pop open their edit window.</p>\r\n<p>For some reason I am getting the DataTrigger/Trigger wrong.</p>\r\n<p>?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-20T12:16:03.543-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "226543",
    "ThreadId": "51923",
    "Html": "<p>So I simplified the check box binding a little bit. Only 2 common states so I switched it to a bool property, got rid of the converter... still having trouble working the Trigger/DataTrigger however...</p>\r\n<p>The key is how do I make my RowHeaderStyle conscious of the value of the CheckBoxColumn in the same row it is in? That's what I am trying to trigger. The other possibility is to bind it do the IsProcessed bool property value on the view model (the one the check box is bound to) via a DataTrigger. It seems like that should work, but who knows.</p>\r\n<p>Any ideas guys?</p>",
    "PostedDate": "2009-08-21T15:14:33.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "226547",
    "ThreadId": "51923",
    "Html": "<p>Ok, I feel dumb. But hopefully you'll get a laugh out of this one. Maybe it will help someone.</p>\r\n<p>My code was correct. I was binding the trigger properly as I thought, but I did not know that the Triggers are processed/applied top to bottom in XAML.</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTrigger</span> <span style=\"color:Red\">Binding</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type toolkit:DataGridRow}}, Path=IsSelected}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">False</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter</span> <span style=\"color:Red\">TargetName</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">EditButton</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Property</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">IsEnabled</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">False</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTrigger</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTrigger</span> <span style=\"color:Red\">Binding</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type toolkit:DataGridRow}}, Path=IsSelected}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">True</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter</span> <span style=\"color:Red\">TargetName</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">EditButton</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Property</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">IsEnabled</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">True</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTrigger</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTrigger</span> <span style=\"color:Red\">Binding</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type toolkit:DataGridRow}}, Path=DataContext.CurrentFC42State}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">True</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter</span> <span style=\"color:Red\">TargetName</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">EditButton</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Property</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">IsEnabled</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">False</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTrigger</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>The issue was that my last trigger above was originally the first of the three, meaning it would process, and then IsSelected would occur afterwards and turn it back on.</p>\r\n<p>Is there a more concise way of doing this trigger logic - always toggle button enabled on IsSelected, yet if selected, make sure the row's data context is in a particular state?</p>\r\n<p>-T</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-21T15:28:05.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]