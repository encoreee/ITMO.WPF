[
  {
    "Id": "198244",
    "ThreadId": "58574",
    "Html": "<p>I have been experimenting with the WPF DataGrid from Microsoft.&nbsp; What I am attempting to<br>do is to set the background color of the grid to red and the background color of the cells<br>in the grid to green.&nbsp; I am using two Styles.&nbsp; For the one I give the key GridStyle<br>and it has a Setter to set the Background property to red.&nbsp; For the other I give the key<br>GridCellStyle and set the background color to green.&nbsp; The XAML is given as follows and it works.<br>When a window is displayed containing the UserControl, the datagrid shows a red background and<br>the rows all have a green background.&nbsp; However, different behavior occurs when I try to use a<br>binding as shown below.<br><br><br>&lt;UserControl x:Class=&quot;Test.MyDataGrid&quot;<br>&nbsp;&nbsp;&nbsp; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>&nbsp;&nbsp;&nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>&nbsp;&nbsp;&nbsp; xmlns:WpfToolkit=&quot;http://schemas.microsoft.com/wpf/2008/toolkit&quot;&gt;<br>&nbsp;&nbsp;&nbsp; &lt;UserControl.Resources&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Style x:Key=&quot;GridStyle&quot; TargetType=&quot;{x:Type WpfToolkit:DataGrid}&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Background&quot; Value=&quot;Red&quot; /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Style&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Style x:Key=&quot;GridCellStyle&quot; TargetType=&quot;{x:Type WpfToolkit:DataGridCell}&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Background&quot; Value=&quot;Green&quot; /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Style&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/UserControl.Resources&gt;<br>&nbsp;&nbsp;&nbsp; &lt;WpfToolkit:DataGrid x:Name=&quot;outageGrid&quot; ItemsSource=&quot;{Binding Path=Outages}&quot; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Style=&quot;{StaticResource GridStyle}&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CellStyle=&quot;{StaticResource GridCellStyle}&quot;&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/WpfToolkit:DataGrid&gt;<br>&lt;/UserControl&gt;<br><br><br>Here is the XAML where the Value attributes have been replaced by bindings.<br>The first binding uses a property in the code behind called RedBackground.&nbsp; <br>The second binding uses a property called GreenBackground.&nbsp; The properties <br>are very simple.&nbsp; The first returns the red SolidColorBush with the statement: <br>return Brushes.Red;&nbsp; The second returns the green SolidColorBush with the statement: <br>return Brushes.Green;<br><br>When the code is executed the background of the grid does, in fact, change to red.&nbsp; However,<br>the background of the rows does not change.&nbsp; It remains white.<br><br>I verified that the RedBackground property is being called with a breakpoint.&nbsp; However,<br>the GreenBackground property is not being called because its breakpoint is never hit.<br><br>To summarize, if the Value in the GridCellStyle is hardcoded to &quot;Green&quot;, then the cell <br>background is displayed as green as expected.&nbsp; However, if the Value is written to use<br>a binding, then nothing happens.<br><br>&lt;UserControl x:Class=&quot;Test.MyDataGrid&quot;<br>&nbsp;&nbsp;&nbsp; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>&nbsp;&nbsp;&nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>&nbsp;&nbsp;&nbsp; xmlns:WpfToolkit=&quot;http://schemas.microsoft.com/wpf/2008/toolkit&quot;&gt;<br>&nbsp;&nbsp;&nbsp; &lt;UserControl.Resources&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Style x:Key=&quot;GridStyle&quot; TargetType=&quot;{x:Type WpfToolkit:DataGrid}&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Background&quot; Value=&quot;{Binding Path=RedBackground}&quot; /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Style&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Style x:Key=&quot;GridCellStyle&quot; TargetType=&quot;{x:Type WpfToolkit:DataGridCell}&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Background&quot; Value=&quot;{Binding Path=GreenBackground}&quot; /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Style&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/UserControl.Resources&gt;<br>&nbsp;&nbsp;&nbsp; &lt;WpfToolkit:DataGrid x:Name=&quot;outageGrid&quot; ItemsSource=&quot;{Binding Path=Outages}&quot; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Style=&quot;{StaticResource GridStyle}&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CellStyle=&quot;{StaticResource GridCellStyle}&quot;&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/WpfToolkit:DataGrid&gt;<br>&lt;/UserControl&gt;</p>\r\n<p>&nbsp;</p>\r\n<p>Any thoughts about this behavior?</p>\r\n<p>Thanks</p>\r\n<p>David</p>",
    "PostedDate": "2009-06-05T07:30:38.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198468",
    "ThreadId": "58574",
    "Html": "<p>After some experimentation I managed to figure out what is happening with this code. The key to setting the cell's color is to use the following setter for the GridCellStyle:</p>\r\n<p>&lt;Setter Property=&quot;Background&quot; Value=&quot;{Binding Path=GreenBackground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}}&quot;/&gt;</p>\r\n<p>The TargetType of GridCellStyle is WpfToolkit:DataGridCell.&nbsp; Although CellStyle is a property of DataGrid, the style itself is applied to each DataGridCell.&nbsp; The binding path is to a property called GreenBackground.&nbsp; GreenBackground is a property in the code behind for the UserControl.&nbsp; The rendering engine, however, was looking for the property in the DataGridCell that is being rendered.&nbsp; Because DataGridCell does not contain such a property, the background doesn't change.&nbsp; There are no warnings or error messages.&nbsp; The background simply doesn't change.</p>\r\n<p>Because DataGridCell is contained in a DataGrid which, in turn, is contained in a UserControl, you can use RelativeSource to specify the path to find the GreenBackground property.&nbsp; The trick is to look for the UserControl where the GreenBackground property is defined.&nbsp; This is accomplished by using the FindAncestor mode of RelativeSource.</p>",
    "PostedDate": "2009-06-05T19:34:26.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198557",
    "ThreadId": "58574",
    "Html": "<p>After some additional research I came across some statements that child controls inherit their DataContext from their parent.&nbsp; If the UserControl's DataContext is set, then would the DataGrid and DataGridCell also inherit the same DataContext?&nbsp; Thus it shouldn't be necessary to use RelativeSource.&nbsp; The Path should have been sufficient for the DataGridCell to find the bound property.</p>\r\n<p>Is my understanding of this correct or is there a bug in the DataGrid?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-06T08:30:12.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]