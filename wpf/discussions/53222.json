[
  {
    "Id": "179004",
    "ThreadId": "53222",
    "Html": "Is there a simple example available that shows how to bind the display value of a DataGrid ComboBox column to an enum? I am manually generating my columns, so the auto-generation feature doesn't help me. Thanks for your help.<br>\r\n",
    "PostedDate": "2009-04-14T06:50:32.007-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "179033",
    "ThreadId": "53222",
    "Html": "It's not exactly what you are looking for, but maybe this can be of help? I found it quite useful for a ComboBox outside of the DataGrid.<br>\r\n<br>\r\nhttp://infosysblogs.com/microsoft/2008/09/wpf_displaying_enums_in_combob.html<br>\r\n",
    "PostedDate": "2009-04-14T07:27:40.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "179109",
    "ThreadId": "53222",
    "Html": "Found my answer. This problem was a bit more complicated than I expected, so I'll post a fairly detailed description of the solution, which appears pretty much standard.<br>\r\n<br>\r\nFirst, WPF doesn't really automatically recognize enum properties. There is some fairly slick code in the column auto-generator that wires up enums, but if you aren't auto-generating, you are pretty much on your own. Combo boxes suffer from the same problem. So, you can't simply bind your combo box or combo box column to an enum property and expect to get a drop-down list. That takes a little bit of infrastructure, in the form of an ObjectDataProvider (an ODP).<br>\r\n<br>\r\nTake a simple User class, with properties for user name, password, and role. Role is an enum that can have one of two values; &quot;User&quot; or &quot;Administrator&quot;. I want to bind a combo-box column in my grid to the Role property.<br>\r\n<br>\r\nThe first thing I need to do is create an ODP as a window resource. The ODP will supply me with the list I need. It will do that by calling the static Enum.GetValues() method on our target enum. Note that we don't have to include the enum in the DataContext for the window or the control; the ODP will access it directly. But we do need to include a namespace declaration in the &lt;Window&gt; tag for the namespace where the enum can be found:<br>\r\n<br>\r\nxmlns:domain=&quot;clr-namespace:DataGridDemo.Domain&quot;<br>\r\n<br>\r\nThen, we include the ODP in the &lt;Window.Resources&gt; tag:<br>\r\n<br>\r\n<p>&lt;Window.Resources&gt;<br>\r\n    &lt;ObjectDataProvider x:Key=&quot;UserRoles&quot; MethodName=&quot;GetValues&quot; ObjectType=&quot;{x:Type sys:Enum}&quot; &gt;<br>\r\n        &lt;ObjectDataProvider.MethodParameters&gt;<br>\r\n            &lt;x:Type TypeName=&quot;domain:UserRole&quot; /&gt;<br>\r\n        &lt;/ObjectDataProvider.MethodParameters&gt;<br>\r\n    &lt;/ObjectDataProvider&gt;<br>\r\n&lt;/Window.Resources&gt;<br>\r\n<br>\r\nWith that done, we can set the ItemsSource property on our combo-box grid column (or combo box) to the list returned by the ODP:<br>\r\n<br>\r\n&lt;dg:DataGridComboBoxColumn Header=&quot;Role&quot; Width=&quot;*&quot;  ItemsSource=&quot;{Binding Source={StaticResource UserRoles}}&quot; <br>\r\n        SelectedValueBinding=&quot;{Binding Path=Role}&quot;  IsReadOnly=&quot;false&quot; /&gt;<br>\r\n<br>\r\nNote that we bind the SelectedValueBinding of the combo-box column to the enum property itself. A combo box binds pretty much the same way.<br>\r\n<br>\r\nI hope this helps somebody else down the road! If there is a better way to get this done, please post it as a response.</p>\r\n",
    "PostedDate": "2009-04-14T09:44:32.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]