[
  {
    "Id": "128314",
    "ThreadId": "38679",
    "Html": "If I try to set a datagridtextcolumn's width property to '*'. Then I get the compile error: &quot;Value should not be infinity Parameter name: desiredValue&quot;.  If this bug is not caught by the designer then it results in an unhandled exception at runtime.<br>\r\n",
    "PostedDate": "2008-10-28T08:35:25.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128724",
    "ThreadId": "38679",
    "Html": "<p style=\"margin:0in 0in 0pt\">I have run into same issue. The DataGrid no longer accepts * for width. Is there any way to fix it? </p>\r\n",
    "PostedDate": "2008-10-29T14:11:14.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128747",
    "ThreadId": "38679",
    "Html": "I'm not able to repro this on my machine.  Could you post the markup from a simple repro application?  This sounds like it could be a bug.  <br>\r\n<br>\r\nAlso, are you both using the designer?  If so, which version of Visual Studio are you using?  Thanks!\r\n",
    "PostedDate": "2008-10-29T16:36:45.543-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128916",
    "ThreadId": "38679",
    "Html": "I can provide more details:<br>\r\nIf the layout isn't constrained in width, a grid with a star column throws with &quot;Value should not be infinity. Parameter name: desiredValue&quot;.<br>\r\nThe details are that availableWidth = infinity, then the grid computes that the star column's desiredWidth is infinity as well.<br>\r\n<br>\r\nThere are lots of way to reproduce this:<br>\r\n- In the Visual Studio designer, be sure that the element you're designing doesn't have a width or a maxwidth. This is typically the case for UserControl. It may then work in your application (where it is constrained) but not in the VS designer (unconstrained).<br>\r\n- Place the grid inside a Canvas. Canvas offer unlimited space to its children.<br>\r\nHere's some code, if you need a repro:<br>\r\n&lt;Window<br>\r\n    xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n    xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n    xmlns:tk=&quot;<a href=\"http://schemas.microsoft.com/wpf/2008/toolkit\">http://schemas.microsoft.com/wpf/2008/toolkit</a>&quot;<br>\r\n    MinHeight=&quot;376&quot; MinWidth=&quot;386&quot;&gt;<br>\r\n    <br>\r\n    &lt;tk:DataGrid x:Name=&quot;grid&quot; AutoGenerateColumns=&quot;False&quot;&gt;<br>\r\n        &lt;tk:DataGrid.Columns&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;Auto&quot; Header=&quot;Nom (auto)&quot; Binding=&quot;{Binding Name}&quot; /&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;Auto&quot; Header=&quot;Prénom (auto)&quot; /&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;100&quot; Header=&quot;Téléphone (100)&quot; /&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;*&quot; Header=&quot;Description (*)&quot; /&gt;<br>\r\n        &lt;/tk:DataGrid.Columns&gt;<br>\r\n    &lt;/tk:DataGrid&gt;<br>\r\n&lt;/Window&gt;<br>\r\n<br>\r\nI would like to point out another bug with the star-sized columns. I didn't have the time to check out the details on this one, though. <br>\r\nApparently, when you have both &quot;Auto&quot; and &quot;*&quot; columns in the same grid (as in the example above), if the grid is empty the &quot;Auto&quot; columns are incorrectly sized. They are extremely small. You can see this bug in the repro above as well. As soon as you put some data in the grid, the problem disappears.\r\n",
    "PostedDate": "2008-10-30T06:58:50.043-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "129001",
    "ThreadId": "38679",
    "Html": "Thanks for reporting and for the details.  I am able to reproduce this and we now have a bug tracking the issue.  As a work around you can set the Width and Height on your window explicitly and you will not see the exception.  <br>\r\n<br>\r\nFor example, change the xaml above to:<br>\r\n<br>\r\n&lt;Window<br>\r\n    xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n    xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n    xmlns:tk=&quot;<a href=\"http://schemas.microsoft.com/wpf/2008/toolkit\">http://schemas.microsoft.com/wpf/2008/toolkit</a>&quot;<br>\r\n   <strong> Height=&quot;376&quot; Width=&quot;386&quot;</strong>&gt;<br>\r\n    <br>\r\n    &lt;tk:DataGrid x:Name=&quot;grid&quot; AutoGenerateColumns=&quot;False&quot;&gt;<br>\r\n        &lt;tk:DataGrid.Columns&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;Auto&quot; Header=&quot;Nom (auto)&quot; Binding=&quot;{Binding Name}&quot; /&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;Auto&quot; Header=&quot;Prénom (auto)&quot; /&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;100&quot; Header=&quot;Téléphone (100)&quot; /&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;*&quot; Header=&quot;Description (*)&quot; /&gt;<br>\r\n        &lt;/tk:DataGrid.Columns&gt;<br>\r\n    &lt;/tk:DataGrid&gt;<br>\r\n&lt;/Window&gt;\r\n",
    "PostedDate": "2008-10-30T11:07:53.073-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "129124",
    "ThreadId": "38679",
    "Html": "Yes, I reached the same conclusion: as a workaround, one can constraint the grid either with some Width somewhere in the hierarchy, or even just MaxWidth.<br>\r\n<br>\r\nNote that while it's OK to set a width on a window (and there's one by default), it is much less practical if we're talking about a UserControl, which should fit its (future) containers.<br>\r\n<br>\r\nPlease don't forget the bug about Auto being incorrectly sized when there's a star and the grid is empty!\r\n",
    "PostedDate": "2008-10-31T02:23:12.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "129662",
    "ThreadId": "38679",
    "Html": "<p style=\"margin:0in 0in 0pt\">Even this way is not working. I'm getting 'availibleStarSpace is not valid... at DataGridColumnCollection.ComputeStarColumnWidths(Double availableStarSpace)'. And I specified Window Width and Height. </p>\r\n<p style=\"margin:0in 0in 0pt\">In previous version of the DataGrid, I’ve used percentage width (Example: With=.20*) and it worked. Now it’s impossible. Percentage width gave more flexible layout, and columns was sized accordingly Window size.  </p>\r\n<p style=\"margin:0in 0in 0pt\">                                                                                                 Thanks. Lena</p>\r\n",
    "PostedDate": "2008-11-03T06:32:07.13-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "129959",
    "ThreadId": "38679",
    "Html": "<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:arial\">If DataGrid width is specified, it accepts * and percentage with also. Good control!</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:arial\">                                                                                                    Thanks. Lena</span></p>\r\n",
    "PostedDate": "2008-11-04T08:28:18.1-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130121",
    "ThreadId": "38679",
    "Html": "Another workaround would be to set the max width on the column rather than setting the width on user control / window.<br>\r\n<br>\r\n&lt;Window<br>\r\n    xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n    xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n    xmlns:tk=&quot;<a href=\"http://schemas.microsoft.com/wpf/2008/toolkit\">http://schemas.microsoft.com/wpf/2008/toolkit</a>&quot;<br>\r\n    MinHeight=&quot;376&quot; MinWidth=&quot;386&quot;&gt;<br>\r\n    <br>\r\n    &lt;tk:DataGrid x:Name=&quot;grid&quot; AutoGenerateColumns=&quot;False&quot;&gt;<br>\r\n        &lt;tk:DataGrid.Columns&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;Auto&quot; Header=&quot;Nom (auto)&quot; Binding=&quot;{Binding Name}&quot; /&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;Auto&quot; Header=&quot;Prénom (auto)&quot; /&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;100&quot; Header=&quot;Téléphone (100)&quot; /&gt;<br>\r\n            &lt;tk:DataGridTextColumn Width=&quot;*&quot; <strong>MaxWidth=&quot;500&quot;</strong> Header=&quot;Description (*)&quot; /&gt;<br>\r\n        &lt;/tk:DataGrid.Columns&gt;<br>\r\n    &lt;/tk:DataGrid&gt;<br>\r\n&lt;/Window&gt;<br>\r\n<br>\r\nI have set the MaxWidth as 500 here, but you could choose what ever is appropriate for you. This way the star column's width would be restricted to the set MaxWidth when the DataGrid is given infinite width like in designer and canvas (and wouldnt crash). And other places would continue to run appropriately as they now except for with MaxWidth constraint. The column in designer would appear big if you set the MaxWidth very high but that is by definition of star (take as much as is available).<br>\r\n",
    "PostedDate": "2008-11-04T19:35:43.82-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130136",
    "ThreadId": "38679",
    "Html": "I am getting the same problem as &quot;jdu&quot;.... like .... (&quot;SizeToHeader&quot; being incorrectly sized when there's a star and the grid is empty!\r\n).<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-04T21:09:56.737-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130394",
    "ThreadId": "38679",
    "Html": "Is there going to be a fix for this anytime soon?&nbsp; If not I will have to revert to the CTP version of the datagrid.<br>\r\n",
    "PostedDate": "2008-11-05T19:17:48.853-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130585",
    "ThreadId": "38679",
    "Html": "There won't be a fix available until .NET 4.0, which won't be available until at least in late 2009.  Do none of the work-arounds suggested work for your scenario?\r\n",
    "PostedDate": "2008-11-06T11:07:11.43-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130751",
    "ThreadId": "38679",
    "Html": "<p>The grid will not be updated anymore before late 2009?!<br>\r\n<br>\r\nI sincerely hope you will reconsider this... The grid still has several bugs, which prevent its use. I am really annoyed myself by the following ones:<br>\r\n- &quot;*&quot; raise exceptions on unbounded grid's width. _There's no good workaround for this._ I have a window, which works in the designer when it's loaded. But then I don't know what the designer do when it updates itself, but the grid crashes. This completely breaks my design-time experience. And I expect this is a quite common scenario... many users are less patient than the ones posting here, and will just drop your grid.<br>\r\n- Mixing &quot;*&quot; columns and &quot;Auto&quot; (or &quot;SizeToHeader&quot;) is broken when the grid is empty. This breaks user experience.<br>\r\n- Recycling virtualized mode without row selector is plain broken. When you scroll down, some random rows are offset to the right. They seem to have a row selector (although they shouldn't).<br>\r\n<br>\r\nThis is out-of-band, CTP stuff. You'll have to fix those bugs anyway... What prevents you from publishing a fixed release? Why do you have to wait one year (at least) until the 4.0 release to fix those bugs?</p>\r\n<p>I am willing to try new MS stuff, help fix bugs, make the extra effort to use poorly documented and sometimes still buggy libraries. But I am only doing so because I have the confidence that MS is responsive to our feedback. It's useless to publish a library mid-2008, encourage adoption (e.g. in MS blogs) and have a big blank until end-2009. The grid is not production-ready yet, please continue to make updates to this project.</p>\r\n",
    "PostedDate": "2008-11-07T01:06:52.397-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130965",
    "ThreadId": "38679",
    "Html": "We understand your frustration and will release an update if it's at all possible.  The team is heads down working on features for .NET 4.0 and finishing the new Ribbon control, and unfortunately there just aren't enough hours in the day to get it all done as soon as we'd like.  Due to a division-wide schedule that we're subject to for these other features, we likely won't have an opportunity to fix any DataGrid bugs for at least another 6 months.  <br>\r\n<br>\r\nI know that seems like a long time off, but you have to understand that the team working on DataGrid is also responsible for many other WPF features and simply cannot devote all of our time to this one control.  As much as we'd like to make it perfect now, the rest of the platform would suffer if we did that.  We understand that DataGrid in its current form is far from perfect, but it has been able to get most users up and running and we've released the source code so that if you run into anything major that we can't fix immediately, you can ahead and modify it yourself.  I assure you that we are working hard to get these bugs fixed as soon as we possibly can and will release an update if the timing works out.  <br>\r\n<br>\r\nThat being said, we can't make any promises about releasing updates before .NET 4.0 which is our only definite, planned update at this time.  Thank you for your patience and for bearing with us as we finalize this new control.  All of the feedback which we receive from you and our other customers and partners is being taken into account, filed as bugs, and fixed as soon as we can. <br>\r\n<br>\r\nThanks,<br>\r\nSamantha\r\n",
    "PostedDate": "2008-11-07T15:20:31.527-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131798",
    "ThreadId": "38679",
    "Html": "Samantha, thank you for your quick responses.<br>\r\n<br>\r\nI have a Window hosting a UserControl hosting a DataGrid.  Assigning a maxwidth on the columns where I am assigning '*' to width works as a work-around, meaning it does produce an unhandled exception.  <br>\r\n<br>\r\nHowever, the vertical scroll bar always appears on the DataGrid.  This is because the column doesn't re-size (to '*') correctly when the window or UserControl is re-sized (Where both are re-sizable).  The vertical scroll bar is not very aesthetically pleasing and hides an 'Open' Button we have housed in the last column.  Has anyone else experienced this and/or come up with a fix/work-around?  I can post a sample if needed.<br>\r\n<br>\r\nThat being said, a fix would REALLY be appreciated and would benefit a lot of people.<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-11T13:21:00.617-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "131857",
    "ThreadId": "38679",
    "Html": "Hi Cirem and Others,<br>\r\n<br>\r\nI would try to define the actual problem in my words. First of all I agree that DataGrid should not crash when there are * columns and if DataGrid is given infinite width. Having said that, by setting the width of the column to * we are asking the column to take away all the remaining available space (That is the definition of our star columns). The problem here is that * column is trying to take infinite space (because that is what is available to it), which crashes. But aren't we asking it to do the same? Anyways lets speak about the work arounds<br>\r\n<br>\r\nNow the two suggested workarounds were to <br>\r\n1) Fix the Width of the Window/UserControl<br>\r\n2) Set the MaxWidth of the Column<br>\r\nBoth these approaches work because basically they are asking the * column to limit its width (not to set itself to infinity). Approach #1 makes it hard for run time where you dont want to hard code the width, expecially with UserControls. Approach #2 makes it hard for the design time where the column appears as large as its MaxWidth. So let us try to solve this problem in a different way.....<br>\r\n<br>\r\nThe problem could be divided into two categories 1) DesignTime and 2)RunTime<br>\r\n1)  <strong>Design Time:</strong> The workaround I suggest here is to fix the width of the user control for design time, such that it doesnt affect the run time. This can be done as follows (concentrate on bold code)...<br>\r\n<br>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">&lt;UserControl x:Class=&quot;DataGridM1Demo.UserControl1&quot;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    xmlns:dg=&quot;http://schemas.microsoft.com/wpf/2008/toolkit&quot;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; <strong>Width=&quot;400&quot;&gt; &lt;!-- Set Width --&gt;</strong></p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    &lt;StackPanel&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        &lt;dg:DataGrid&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">            &lt;dg:DataGrid.Columns&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">                &lt;dg:DataGridTextColumn Width=&quot;*&quot; <strong>MaxWidth=&quot;500&quot;</strong> Header=&quot;hello&quot;&gt;&lt;/dg:DataGridTextColumn&gt; &lt;!-- Set Max Width --&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">            &lt;/dg:DataGrid.Columns&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        &lt;/dg:DataGrid&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    &lt;/StackPanel&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">&lt;/UserControl&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\"> </p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">namespace DataGridM1Demo</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">{</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    /// &lt;summary&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    /// Interaction logic for UserControl1.xaml</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    /// &lt;/summary&gt;</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    public partial class UserControl1 : UserControl</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    {</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        public UserControl1()</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        {</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">            InitializeComponent();<br>\r\n            //Clear the width if not design time.</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">            <strong>if (!System.ComponentModel.DesignerProperties.GetIsInDesignMode(this))</strong></p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\"><strong>            {</strong></p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\"><strong>                ClearValue(WidthProperty);</strong></p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\"><strong>            }</strong></p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">        }</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">    }</p>\r\n<p style=\"font-size:11pt;margin:0in;font-family:calibri\">}<br>\r\n<br>\r\nWhat it means is, if it is not design-time (i.e., run time) clear the value of Width property, hence hardcoded value doesn't get picked up at run time.<br>\r\n<br>\r\n2) <strong>Run Time:</strong> Personally I feel that at runtime DataGrid having a star column should not get infinite width , because they are contradicting in definitions. It is ok with Design Time especially because of the UserControl scenario. But if there is no other option for runtime either but to give infinite width (like putting it in a canvas), then probably you are looking for an <strong>Auto</strong> width column (which takes as much as needed), not a * column (which takes as much as available). Even if this is not an option (for some reason) then MaxWidth (set as in above) will come to rescue. <br>\r\n<br>\r\nUntil it gets fixed I would strongly suggest that DataGrid having * columns should not get infinite width at run time (and should be avoided at design time too if possible.)<br>\r\n<br>\r\nFinally, having known the definitions it would be great to get your suggestions on how you would like the DataGrid with * columns to behave when given infinite width.<br>\r\n<br>\r\nHope this helps!!</p>\r\n",
    "PostedDate": "2008-11-11T17:47:40.833-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132402",
    "ThreadId": "38679",
    "Html": "I have gotten past these issues.  My new problem is that often times the vertical scrollbar appears on the grid when it shouldn't.  Has anyone else encountered and come up with a solution/work-around?  I have tried controlling this behavior by handling the events of various PARTS of the DataGrid template, but to no avail.  <br>\r\n<br>\r\nHere are some files that replicate the issue:<br>\r\nAlso, to see it the bug you have to re-size the window (Although this isn't always the case in our actual project)<br>\r\n<br>\r\n'-------The Window------'<br>\r\n&lt;Window x:Class=&quot;Window1&quot; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; Title=&quot;Window1&quot; Height=&quot;400&quot; Width=&quot;600&quot; ResizeMode=&quot;CanResizeWithGrip&quot;&gt;<br>\r\n&lt;Grid x:Name=&quot;grdMain&quot;&gt;<br>\r\n&lt;Grid.ColumnDefinitions&gt;<br>\r\n&lt;ColumnDefinition Width=&quot;*&quot; /&gt;<br>\r\n&lt;ColumnDefinition Width=&quot;*&quot; /&gt;<br>\r\n&lt;ColumnDefinition Width=&quot;*&quot; /&gt;<br>\r\n&lt;/Grid.ColumnDefinitions&gt;<br>\r\n&lt;Grid.RowDefinitions&gt;<br>\r\n&lt;RowDefinition Height=&quot;*&quot; /&gt;<br>\r\n&lt;RowDefinition Height=&quot;*&quot; /&gt;<br>\r\n&lt;RowDefinition Height=&quot;*&quot; /&gt;<br>\r\n&lt;/Grid.RowDefinitions&gt;<br>\r\n&lt;/Grid&gt;<br>\r\n&lt;/Window&gt;<br>\r\nClass Window1 <br>\r\n<br>\r\nPublic Sub New()<br>\r\n<br>\r\n' This call is required by the Windows Form Designer.<br>\r\nInitializeComponent()<br>\r\n<br>\r\n' Add any initialization after the InitializeComponent() call.<br>\r\nDim UCDataGrid As New GridUserControl<br>\r\nUCDataGrid.SetValue(Grid.RowProperty, 1)<br>\r\nUCDataGrid.SetValue(Grid.ColumnProperty, 1)<br>\r\ngrdMain.Children.Add(UCDataGrid)<br>\r\nEnd Sub<br>\r\nEnd Class<br>\r\n<br>\r\n'--------------UserControl with some data----------------'<br>\r\n&lt;UserControl x:Class=&quot;GridUserControl&quot; <br>\r\nxmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; <br>\r\nxmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; <br>\r\nxmlns:DataGridError=&quot;clr-namespace:DataGridError&quot; <br>\r\nxmlns:Controls=&quot;clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit&quot; HorizontalAlignment=&quot;Stretch&quot; &gt;<br>\r\n&lt;UserControl.Resources&gt;<br>\r\n&lt;x:Array x:Key=&quot;incidentList&quot; Type=&quot;{x:Type DataGridError:ListIncidentItem}&quot;&gt;<br>\r\n&lt;DataGridError:ListIncidentItem IncidentNumber=&quot;12345&quot; PatientCareReportNum=&quot;5&quot; StreetAddress=&quot;905 N 23rd Ave, Duluth, MN 55805&quot; /&gt;<br>\r\n&lt;DataGridError:ListIncidentItem IncidentNumber=&quot;3456456456465456&quot; PatientCareReportNum=&quot;67&quot; StreetAddress=&quot;453 e 160th st&quot; /&gt;<br>\r\n&lt;DataGridError:ListIncidentItem IncidentNumber=&quot;23463&quot; PatientCareReportNum=&quot;687&quot; StreetAddress=&quot;453 e 160th st&quot; /&gt;<br>\r\n&lt;DataGridError:ListIncidentItem IncidentNumber=&quot;23463&quot; PatientCareReportNum=&quot;687&quot; StreetAddress=&quot;453 e 160th st&quot; /&gt;<br>\r\n&lt;DataGridError:ListIncidentItem IncidentNumber=&quot;23463&quot; PatientCareReportNum=&quot;687&quot; StreetAddress=&quot;453 e 160th st&quot; /&gt;<br>\r\n&lt;DataGridError:ListIncidentItem IncidentNumber=&quot;23463&quot; PatientCareReportNum=&quot;687&quot; StreetAddress=&quot;453 e 160th st&quot; /&gt;<br>\r\n&lt;DataGridError:ListIncidentItem IncidentNumber=&quot;23463&quot; PatientCareReportNum=&quot;687&quot; StreetAddress=&quot;453 e 160th st&quot; /&gt;<br>\r\n&lt;/x:Array&gt;<br>\r\n&lt;/UserControl.Resources&gt;<br>\r\n<br>\r\n&lt;Grid&gt;<br>\r\n&lt;Controls:DataGrid ItemsSource=&quot;{StaticResource incidentList}&quot; AutoGenerateColumns=&quot;false&quot; Margin=&quot;10&quot; AlternationCount=&quot;2&quot; IsReadOnly=&quot;True&quot; CanUserSortColumns=&quot;False&quot; HorizontalGridLinesBrush=&quot;#FFD6D6D6&quot; VerticalGridLinesBrush=&quot;#FFD6D6D6&quot; Style=&quot;{DynamicResource DataGridStyle1}&quot;&gt;<br>\r\n&lt;Controls:DataGrid.Columns&gt;<br>\r\n&lt;Controls:DataGridTextColumn Header=&quot;Incident Number&quot; Binding=&quot;{Binding IncidentNumber}&quot; MaxWidth=&quot;1000&quot; Width=&quot;*&quot; /&gt;<br>\r\n&lt;Controls:DataGridTextColumn Header=&quot;Patient Care Report Number&quot; Binding=&quot;{Binding PatientCareReportNum}&quot; MaxWidth=&quot;1000&quot; Width=&quot;*&quot; /&gt;<br>\r\n&lt;Controls:DataGridTextColumn Header=&quot;Address&quot; Binding=&quot;{Binding StreetAddress}&quot; MaxWidth=&quot;1000&quot; Width=&quot;*&quot; /&gt;<br>\r\n&lt;/Controls:DataGrid.Columns&gt;<br>\r\n&lt;/Controls:DataGrid&gt;<br>\r\n&lt;/Grid&gt;<br>\r\n&lt;/UserControl&gt;<br>\r\n<br>\r\n'-----------------Dummy Data Object (For your convenience  ;-)  )------------'<br>\r\nPublic Class ListIncidentItem<br>\r\n<br>\r\nPrivate myIncidentNumber As String<br>\r\nPrivate myPatientCareReportNum As String<br>\r\nPrivate myStreetAddress As String<br>\r\n<br>\r\nPublic Property IncidentNumber() As String<br>\r\nGet<br>\r\nReturn myIncidentNumber<br>\r\nEnd Get<br>\r\nSet(ByVal value As String)<br>\r\nmyIncidentNumber = value<br>\r\nEnd Set<br>\r\nEnd Property<br>\r\n<br>\r\nPublic Property PatientCareReportNum() As String<br>\r\nGet<br>\r\nReturn myPatientCareReportNum<br>\r\nEnd Get<br>\r\nSet(ByVal value As String)<br>\r\nmyPatientCareReportNum = value<br>\r\nEnd Set<br>\r\nEnd Property<br>\r\n<br>\r\nPublic Property StreetAddress() As String<br>\r\nGet<br>\r\nReturn myStreetAddress<br>\r\nEnd Get<br>\r\nSet(ByVal value As String)<br>\r\nmyStreetAddress = value<br>\r\nEnd Set<br>\r\nEnd Property<br>\r\nEnd Class<br>\r\n<br>\r\n<br>\r\n'Update: We should be able to control the width of the content anytime 'PART_ScrollContentPresenter' fires the ScrollChangedEvent and the scrollablewidth &gt; 0.<br>\r\nThis is what I'm trying now. Editing copy of template &gt; On loaded of window.<br>\r\n<br>\r\nDim mainScroll As ScrollViewer= dgMostRecentIncidentList.Template.FindName(&quot;DG_ScrollViewer&quot;, dgMostRecentIncidentList)<br>\r\nIf mainScroll.IsNotNull Then<br>\r\nAddHandler mainScroll.ScrollChanged, AddressOf MainScrollChanged<br>\r\nEnd If<br>\r\n<br>\r\nPrivate Sub MainScrollChanged(ByVal sender As Object, ByVal e As ScrollChangedEventArgs)<br>\r\n'TODO: Need to do something until scrollablewidth is 0!<br>\r\nEnd Sub<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-13T11:55:40.997-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132475",
    "ThreadId": "38679",
    "Html": "Hi VamseeP, thanks for your solution, but I have bit different problem. <br>\r\n<br>\r\nI am using &quot;*&quot; as width for one column and for rest of them I use &quot;SizeToHeader&quot; as width. When (first time) the Grid is empty, the columns with &quot;SizeToHeader&quot; get stretched in like....<br>\r\n<br>\r\n&lt;toolkit:DataGrid&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;toolkit:DataGrid.Columns&gt;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;toolkit:DataGridCheckBoxColumn Header=&quot;Name&quot; Width=&quot;SizeToHeader&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;toolkit:DataGridCheckBoxColumn Header=&quot;Description&quot; Width=&quot;*&quot;/&gt;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/toolkit:DataGrid.Columns&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/toolkit:DataGrid&gt;<br>\r\n<br>\r\n------------------------------------------------------<br>\r\nN |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>\r\na&nbsp; | Description&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>\r\nm |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>\r\ne&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>\r\n------------------------------------------------------<br>\r\n<br>\r\n<br>\r\nBut, if I change Width=&quot;SizeToHeader&quot; or &quot;100&quot; or do not use &quot;*&quot; for any column than&nbsp; it works fine.<br>\r\n<br>\r\nAny solution for this?<br>\r\n<br>\r\nThanks<br>\r\n<img><br>\r\n",
    "PostedDate": "2008-11-13T20:09:12.34-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "134612",
    "ThreadId": "38679",
    "Html": "Samantha, first, I have to say that a direct and honest reply from a software vendor as big as MS is refreshing. I'm so accustomed to worthless boilerplate responses that yours (coupled with ScottGu's general openness and some other things that I've seen happening) make me feel good about this product and the MS culture in general. Compared to working with the Apple's of the world, this is wonderful.<br>\r\n<br>\r\nNow, that said, I've never heard of a product cycle that didn't include some form of branching for bug fixing. Even though you're heads down coding for a 4.0 deadline (we all can relate), this is a released and supported product, at least I think it is. This is certainly a very cool product, but the infinite column size issue is painful. It took me hours to figure out the source of the problem (I assumed user error for a long time since I'm very new to WPF) and to then find an answer online. It was doubly frustrating since the basic concept works flawlessly in the core grid component and since I saw and copied many sample code fragments that apparently work with the CTP (finally this is how I got to realize that it must be a v1.0 bug and found this thread). As an aside, note that 10+ minutes were spent cussing while waiting for a &quot;Help Update&quot; that completely blocked all work after mistakenly pressing F1...now that is PAINFUL, though I'm aware that is an issue outside of your team.<br>\r\n<br>\r\nI've gotten it working, but only after fixing parent's width (thus it is not actually working as desired--VamseeP's &quot;clear at runtime&quot; solution didn't work for me) and again the productivity loss was pretty significant. If you multiply that by thousands of developers trying to get this v1.0 product working in their environments, then you've got a significant brain drain for what seems to amount to little more than a calculation precedence issue (trying to calculate an infinite column width before a &quot;real&quot; width is assigned to a parent). Likely this is a simple fix that could save countless customer frustration hours and some loss of good will. A twelve month turnaround for a basic bug (essentially a stopping bug in some environments since there's no &quot;real&quot; workaround that achieves the documented level of functionality) is extreme.<br>\r\n<br>\r\nIf somehow your team can't find the hours to devote to a maintenance release, do you accept code patches if some good samaritan were to isolate and fix the problem? Could this then be incorporated into a 1.01 release? &quot;Someone&quot; might be willing to devote some investigative time to the problem if they thought others might benefit. Forgive me if this is FAQ'ish, but I'm just not sure how &quot;open source&quot; your model is?<br>\r\n<br>\r\nThanks.<br>\r\n",
    "PostedDate": "2008-11-23T13:22:57.957-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "135160",
    "ThreadId": "38679",
    "Html": "<p>Hi ptyork,<br>\r\n<br>\r\nAgain, thanks very much for your direct feedback.  We do understand that this is a frustrating issue and are doing all we can to release an update as soon as possible.  I know that this one fix by itself seems a small undertaking, but you have to keep in mind that there are probably 50 other small fixes which are equally important to many developers and if we were to fix all of them, it would turn into a much bigger project.  We really appreciate your suggestion to accept a code patch and are looking into opening up this avenue for the future.  At the current time, though, the best a good samaritan could do is to post the fix to the forums or their own blog so that we could point other users who report this issue to it.  </p>\r\n<p>We hear you, we feel your pain, and we will do our best to release an update which fixes this bug and others as soon as we can.  At this time, the only update I can promise is in .NET 4.0.  That being said, we will look into doing another release prior to that time if at all possible.</p>\r\n<p>Thanks for hanging in there with us and please continue to report any issues you see!</p>\r\n<p>Samantha</p>\r\n",
    "PostedDate": "2008-11-25T08:29:16.64-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "135183",
    "ThreadId": "38679",
    "Html": "Thanks for your honest and clear answers Samantha. It really helps to know where we stand and what we can expect from MS. I build software for a living and I really need to know what I can use at which time.<br>\r\n<br>\r\nI think the labeling was somehow misleading. When MS announces the DataGrid v1 I expect a higher quality. This should have been called a &quot;preview&quot; or &quot;beta&quot; or &quot;ctp&quot;, and it should have been clear that there will be no fix or update for a relatively long time. This kind of information is important for business users.<br>\r\n<br>\r\nAnyway, your work is appreciated. WPF really needs a nice &quot;advanced&quot; control suite. I'm looking forward to the 4.0 release.\r\n",
    "PostedDate": "2008-11-25T09:19:34.003-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "171572",
    "ThreadId": "38679",
    "Html": "Update: The issue discussed above (where star columns get a DesiredWidth of infinity) has been fixed in the March 2009 release.\r\n",
    "PostedDate": "2009-03-24T14:59:06.743-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "196231",
    "ThreadId": "38679",
    "Html": "<p>The exception has been fixed but it's still not working properly. When placed in a user control with doesn't have a fixed width, setting &quot;*&quot; on column width will cause the column to be extremely wide (several thousand&nbsp;pixel), and this happens both at design time and run time. And this is so easy to repo, just put it in a user control&nbsp;without a fixed with. Is anyone be trapped in this issue as well? What can I do, this is such a popular demand from users.....</p>",
    "PostedDate": "2009-05-31T20:21:37.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "581136",
    "ThreadId": "38679",
    "Html": "<p>The problem can still be reproduced with the following code:</p>\r\n<p>&lt;Page x:Class=\"Wpf.Page1\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:tk=\"http://schemas.microsoft.com/wpf/2008/toolkit\"<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Title=\"Page1\"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;Grid&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tk:DataGrid&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tk:DataGrid.Columns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tk:DataGridTextColumn Header=\"0\" Width=\"*\"/&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tk:DataGridTextColumn Header=\"1\" Width=\"50\"/&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tk:DataGrid.Columns&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tk:DataGrid&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/Grid&gt;<br />&lt;/Page&gt;</p>",
    "PostedDate": "2011-03-15T20:06:28.12-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]