[
  {
    "Id": "123857",
    "ThreadId": "37330",
    "Html": "I'm trying to bind an IList&lt;string&gt; property of a source object to a WPF Control.&nbsp; The WPF DataGrid seemed like the obvious choice of control.<br>\r\n<br>\r\nI'm trying this:<br>\r\n<span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGrid</span></span><span style=\"font-size:13px\"> datagrid = </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGrid</span></span><span style=\"font-size:13px\">();<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">Binding</span></span><span style=\"font-size:13px\"> binding =&nbsp;</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">Binding</span></span><span style=\"font-size:13px\">(&quot;Nameoflistofstringproperty&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Source = someObject,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Mode = </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">BindingMode</span></span><span style=\"font-size:13px\">.TwoWay,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; UpdateSourceTrigger = </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">UpdateSourceTrigger</span></span><span style=\"font-size:13px\">.PropertyChanged<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br>\r\n</span></span></span><span style=\"font-size:13px\">datagrid.SetBinding(</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">ItemsControl</span></span><span style=\"font-size:13px\">.ItemsSourceProperty, binding);<br>\r\n<br>\r\nThe list property in the test object has two strings.&nbsp; What I see in the Control are two integers which are, I guess, the string lengths of the two strings.&nbsp; string.Length seems to be the only property on string, so I guess there is some magic in the DataGrid that picks the first property of the object in the list.<br>\r\n<br>\r\nDoes that mean that the List&lt;string&gt; needs to be replaced with eg.&nbsp; List&lt;Someclass&gt; with Someclass defined something like:<br>\r\nclass Someclass {<br>\r\n&nbsp;&nbsp; public string AStringField { get, set }<br>\r\n}<br>\r\n?<br>\r\n<br>\r\nOr is there a simpler way to make DataGrid create a single column with the string as the value?<br>\r\n<br>\r\nThanx!<br>\r\n<br>\r\n<br>\r\n- Steinar<br>\r\n</span>\r\n",
    "PostedDate": "2008-10-08T12:38:28.8-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "123910",
    "ThreadId": "37330",
    "Html": "If you just want to display the ToString() version of your list you can use a TemplateColumn like so:<br>\r\n<span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">\r\n<p>&lt;</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">dg</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">:</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">DataGridTemplateColumn</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&gt;<br>\r\n</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">dg</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">:</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">DataGridTemplateColumn.CellTemplate</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&gt;<br>\r\n</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">DataTemplate</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&gt;<br>\r\n</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">TextBlock</span></span><span style=\"font-size:13px;color:#ff0000\"><span style=\"font-size:13px;color:#ff0000\"> Text</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">=&quot;{</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">Binding</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">}&quot; /&gt;<br>\r\n</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">DataTemplate</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&gt;<br>\r\n</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">dg</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">:</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">DataGridTemplateColumn.CellTemplate</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&gt;<br>\r\n</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&lt;/</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">dg</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">:</span></span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">DataGridTemplateColumn</span></span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">&gt;\r\n<p>&nbsp;</p>\r\n</span></span></p>\r\n",
    "PostedDate": "2008-10-08T18:17:48.333-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "123950",
    "ThreadId": "37330",
    "Html": "<p>vinsibal, thank you!</p>\r\n<p>However, I need to be able to do this in C# code.  The DataGrid Control will be part of a dialog panel that's constructed when using reflection to examine the source object's properties, and attributes put on the properties.</p>\r\n<p>Unfortunately I haven't grasped yet, how XAML templates play together with C# code.  I need to do some more research here.</p>\r\n<p>Thanx again!</p>\r\n",
    "PostedDate": "2008-10-09T00:25:26.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126569",
    "ThreadId": "37330",
    "Html": "Two things:<br>\r\n&nbsp;1. I've tried translating this into C# code but so far been unsuccessful.&nbsp; I've succeeded in creating a DataGridTemplateColumn, but after that I don't know what to do with it:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGrid</span></span><span style=\"font-size:13px\"> datagrid = </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGrid</span></span><span style=\"font-size:13px\">();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; datagrid.VerticalAlignment = </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">VerticalAlignment</span></span><span style=\"font-size:13px\">.Stretch;<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataGridTemplateColumn</span></span><span style=\"font-size:13px\"> templateColumn = (</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGridTemplateColumn</span></span><span style=\"font-size:13px\">) </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">XamlReader</span></span><span style=\"font-size:13px\">.Load(</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">XmlReader</span></span><span style=\"font-size:13px\">.Create(</span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">StringReader</span></span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#a31515\"><span style=\"font-size:13px;color:#a31515\">@&quot;&lt;Controls:DataGridTemplateColumn xmlns:Controls=&quot;&quot;clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit&quot;&quot; xmlns:Windows=&quot;&quot;clr-namespace:System.Windows;assembly=PresentationFramework&quot;&quot; xmlns:Data=&quot;&quot;clr-namespace:System.Windows.Data;assembly=PresentationFramework&quot;&quot; xmlns:Controls1=&quot;&quot;clr-namespace:System.Windows.Controls;assembly=PresentationFramework&quot;&quot;&gt;&lt;Controls:DataGridTemplateColumn.CellTemplate&gt;&lt;Windows:DataTemplate&gt;&lt;Controls1:TextBlock Text=&quot;&quot;{Data:Binding}&quot;&quot; /&gt;&lt;/Windows:DataTemplate&gt;&lt;/Controls:DataGridTemplateColumn.CellTemplate&gt;&lt;/Controls:DataGridTemplateColumn&gt;&quot;</span></span><span style=\"font-size:13px\">)));<br>\r\n<br>\r\n&nbsp;2. I'm not sure if &quot;display the ToString version of my&nbsp; list&quot; is want to do.&nbsp; I want an IList&lt;string&gt; property on the source object of a data binding to display in a DataGrid column as the string value instead of the&nbsp; string length, and to be editable, so that changing the string in a cell will change the bound list member.&nbsp; It _does_ look like the TemplateColumn XAML fragment does the right thing though, if just {Binding} will display the string value of an element, and work when setting the value back as well<br>\r\n<br>\r\nBut if 2. is ok, I _still_ need to figure out how to apply the template in C# code.<br>\r\n<br>\r\nHm... I see that the XML fragment in the string constant looks quite different from your original example...?&nbsp; I think that happened when I pasted your fragment into a XAML editor.&nbsp; Well... at least the dg: namespace in your fragment needs to be defined in some way...?&nbsp; (but the &quot;&quot; defined by the XAML editor is possibly the wrong thing?)</span>\r\n",
    "PostedDate": "2008-10-21T08:50:44.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126584",
    "ThreadId": "37330",
    "Html": "I wrote earlier:<br><br>&gt; Hm... I see that the XML fragment in the string constant looks quite<br>&gt; different from your original example...? I think that happened when<br>&gt; I pasted your fragment into a XAML editor.  Well... at least the<br>&gt; dg: namespace in your fragment needs to be defined in some way...?<br>&gt; (but the &quot;&quot; defined by the XAML editor is possibly the wrong thing?)<br><br>My mistake: the namespace wasn't empty, I was just fooled by the<br>quoting of &quot; chars inside strings.<br><br>I'm guessing that the cell template thing is supposed to work like this:<br> - Create a DataGrid<br> - Create a DataGridTemplateColumn with the correct bindings<br> - Create a data binding from the IList&lt;string&gt; property<br> - Set the data binding on the DataGrid<br><br>Unfortunately when I do this, the DataGrid only contains a single column called Length.<br><br>The current code for creating the DataGrid looks like this (I've moved the XAML template to a text constant):<br><br>                const string dataGridTemplateConfiguration =<br>@&quot;&lt;Controls:DataGridTemplateColumn xmlns:Controls=&quot;&quot;clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit&quot;&quot; xmlns:Windows=&quot;&quot;clr-namespace:System.Windows;assembly=PresentationFramework&quot;&quot; xmlns:Data=&quot;&quot;clr-namespace:System.Windows.Data;assembly=PresentationFramework&quot;&quot; xmlns:Controls1=&quot;&quot;clr-namespace:System.Windows.Controls;assembly=PresentationFramework&quot;&quot;&gt;<br>    &lt;Controls:DataGridTemplateColumn.CellTemplate&gt;<br>        &lt;Windows:DataTemplate&gt;<br>            &lt;Controls1:TextBlock Text=&quot;&quot;{Data:Binding}&quot;&quot; /&gt;<br>        &lt;/Windows:DataTemplate&gt;<br>    &lt;/Controls:DataGridTemplateColumn.CellTemplate&gt;<br>&lt;/Controls:DataGridTemplateColumn&gt;&quot;;<br>                DataGrid datagrid = new DataGrid();<br>                datagrid.VerticalAlignment = VerticalAlignment.Stretch;<br>                DataGridTemplateColumn templateColumn = (DataGridTemplateColumn)XamlReader.Load(XmlReader.Create(new StringReader(dataGridTemplateConfiguration)));<br>                datagrid.Columns.Add(templateColumn);<br>                Binding binding = DataBindingUtilities.CreateOperatorPropertyBinding(op, operatorProperty.PropertyInfo);<br>                datagrid.SetBinding(ItemsControl.ItemsSourceProperty, binding);",
    "PostedDate": "2008-10-21T09:41:42.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126732",
    "ThreadId": "37330",
    "Html": "Does something along these lines help:<br>\r\n<br>\r\n<span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGridTemplateColumn</span></span><span style=\"font-size:13px\"> templateColumn = </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataGridTemplateColumn</span></span><span style=\"font-size:13px\">();<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataTemplate</span></span><span style=\"font-size:13px\"> cellTemplate = </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">DataTemplate</span></span><span style=\"font-size:13px\">();<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">FrameworkElementFactory</span></span><span style=\"font-size:13px\"> cellTemplateFactory = </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">FrameworkElementFactory</span></span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">typeof</span></span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">TextBlock</span></span><span style=\"font-size:13px\">));<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">Binding</span></span><span style=\"font-size:13px\"> binding = </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">Binding</span></span><span style=\"font-size:13px\">();<br>\r\ncellTemplateFactory.SetBinding(</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">TextBlock</span></span><span style=\"font-size:13px\">.TextProperty, binding);<br>\r\ncellTemplate.VisualTree = cellTemplateFactory;<br>\r\ncellTemplate.Seal();<br>\r\ntemplateColumn.CellTemplate = cellTemplate;<br>\r\nDataGrid_Standard.Columns.Add(templateColumn);<br>\r\nDataGrid_Standard.AutoGenerateColumns = </span><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">false</span></span><span style=\"font-size:13px\">;<br>\r\nDataGrid_Standard.ItemsSource = &lt;your data source&gt;</span><span style=\"font-size:13px\">;\r\n<p>&nbsp;</p>\r\n</span>\r\n",
    "PostedDate": "2008-10-21T18:41:26.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126862",
    "ThreadId": "37330",
    "Html": "From: vinsibal [email removed]:<br><br>&gt; Does something along these lines help:<br><br>Yes, thanx.  That lets me display the IList&lt;string&gt; property in a DataGrid column.<br><br>But it doesn't let me edit it.  I tried reusing the cellTemplate as an edit template, ie. do<br>  templateColumn.CellEditingTemplate = cellTemplate<br>but that (not surprisingly didn't make any difference).<br><br>Next I kept that setting and tried making the Binding TwoWay.  This made the dialog using the panel throw an exception when being opened, saying that a TwoWay binding needs a path setting.<br><br>I removed the TwoWay setting, and created a new template called cellEditTemplate:<br>                DataTemplate cellEditTemplate = new DataTemplate();<br>                FrameworkElementFactory cellEditTemplateFactory = new FrameworkElementFactory(typeof(TextBox));<br>                Binding cellEditBinding = new Binding();<br>                cellEditTemplateFactory.SetBinding(TextBox.TextProperty, cellEditBinding);<br>                cellEditTemplate.VisualTree = cellEditTemplateFactory;<br>                cellEditTemplate.Seal();<br>                templateColumn.CellEditingTemplate = cellEditTemplate;<br><br>With this the dialog opens, but when I try modifying a cell, I get the &quot;TwoWay binding needs a path setting&quot; exception.  And I don't know what would be a meaningful path setting for a string.",
    "PostedDate": "2008-10-22T05:48:27.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126864",
    "ThreadId": "37330",
    "Html": "&quot;Two-way binding requires Path or XPath.&quot; is the exception I see.<br><br>I've tried to setting the Path of the Binding used in the cellEditTemplate to new PropertyPath(&quot;&quot;) but I still got the same exception when attempting to edit a cell.",
    "PostedDate": "2008-10-22T06:02:52.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126870",
    "ThreadId": "37330",
    "Html": "Set the Path = &quot;.&quot;<br>\r\n<br>\r\nBut you'll still have a problem b/c the way the binding system works is that the properties on the data source need to be notified of the changes.&nbsp; Since you are using &quot;string&quot; as the property it will not know how to update when the binding updates in the TextBox.&nbsp; You can create a proxy class to implement the INotifyPropertyChanged interface and it should work for that.\r\n",
    "PostedDate": "2008-10-22T06:27:35.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126941",
    "ThreadId": "37330",
    "Html": "From: vinsibal<br><br>&gt; Set the Path = &quot;.&quot;<br><br>Almost there.  :-)<br><br>I did this:<br>                FrameworkElementFactory cellEditTemplateFactory = new FrameworkElementFactory(typeof(TextBox));<br>                Binding cellEditBinding = new Binding { Path = new PropertyPath(&quot;.&quot;), Mode = BindingMode.TwoWay };<br>                cellEditTemplateFactory.SetBinding(TextBox.TextProperty, cellEditBinding);<br>                cellEditTemplate.VisualTree = cellEditTemplateFactory;<br>                cellEditTemplate.Seal();<br>                templateColumn.CellEditingTemplate = cellEditTemplate;<br><br>Now I'm allowed to edit the cells, but the changed string values don't make it all the way to the IList&lt;string&gt; elements matching the cells in the source object IList&lt;string&gt; property, and when I change cells the old value pop back.<br><br>I tried setting the Path on the cellTemplate Binding, as well as on the cellEditTemplate Binding, but that didn't help.<br><br>&gt; But you'll still have a problem b/c the way the binding system<br>&gt; works is that the properties on the data source need to be<br>&gt; notified of the changes.  Since you are using &quot;string&quot; as the<br>&gt; property it will not know how to update when the binding<br>&gt; updates in the TextBox.  You can create a proxy class to<br>&gt; implement the INotifyPropertyChanged interface and it should<br>&gt; work for that.<br><br>I've thought of different approaches for that for later.  We already have a proxy implementing INotifyPropertyChanged, wrapping the the source object (because we couldn't introduce that dependency into the assemblies defining the types of the source objects).<br><br>It's possible that we could extend this proxy in various ways for the IList&lt;string&gt; properties.  I've mainly thought in the lines of replacing the IList&lt;T&gt; with SomeCollection&lt;T&gt;, where SomeCollection implements INotifyCollectionChanged, and in particular of changing IList&lt;string&gt; to SomeCollection&lt;OfAClassThatHasASingleStringProperty&gt;.  What have kept me back is the serious increase in complexity this would cause.",
    "PostedDate": "2008-10-22T09:39:02.463-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126964",
    "ThreadId": "37330",
    "Html": "&quot;Now I'm allowed to edit the cells, but the changed string values don't make it all the way to the IList&lt;string&gt; elements matching the cells in the source object IList&lt;string&gt; property, and when I change cells the old value pop back.<br>\r\n<br>\r\nI tried setting the Path on the cellTemplate Binding, as well as on the cellEditTemplate Binding, but that didn't help.&quot;<br>\r\n<br>\r\nUntil you address the notificaiton callback issue, editing will not work as expected.\r\n",
    "PostedDate": "2008-10-22T10:35:10.443-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126977",
    "ThreadId": "37330",
    "Html": "From: vinsibal<br><br>&gt; Until you address the notificaiton callback issue, editing will not work as expected.<br><br>Hm... ok...?  It does work for me when I bind a property that is IList&lt;T&gt; where T is a class with properties, but doesn't implement INotifyPropertyChanged.<br><br>Are you saying I _have_ to wrap the string of an IList&lt;string&gt; property and make the property into an IList&lt;Wrapper&gt; property where Wrapper is some wrapper class holding a string?<br><br>I believe this is doable in the proxy that already wraps the source object, but very complicating to the code, and not very efficient.<br><br>Or is there a different way of adressing the callback issue?  Note that for now it's ok for me that I'm able to edit the string values, I don't need to be notified when something else changes the property.",
    "PostedDate": "2008-10-22T11:07:59.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126998",
    "ThreadId": "37330",
    "Html": "From: SteinarB [email removed]:<br><br>&gt; Or is there a different way of adressing the callback issue?<br>&gt; Note that for now it's ok for me that I'm able to edit the<br>&gt; string values, I don't need to be notified when something else<br>&gt; changes the property.<br><br>To put it in a different way:  I thought implementing IPropertyNotifyChanged had to do with notifying other listeners, or notifying the DataGrid when something else changes the source property?<br><br>Right now I see in the debugger that the changes in the cell TextBox does not make into the bound source property, so implementing IPropertyNotifyChanged should/would not help anything... unless I'm misunderstanding...?",
    "PostedDate": "2008-10-22T12:16:28.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "127364",
    "ThreadId": "37330",
    "Html": "Sorry about that.&nbsp; The issue isn't about not implementing INotifyPropertyChanged.&nbsp; The issue is binding to the object string and trying to update that object by editing the TextBox.Text.&nbsp; If it were any&nbsp;List&lt;T&gt; where T is the object that is bound in the column, if you update the cell by editing it, it&nbsp;will not know how to convert that back to a new object of T.&nbsp; So the recommendation when used with the DataGrid is to bind to properties of the object and not the object itself.\r\n",
    "PostedDate": "2008-10-23T16:18:04.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "514303",
    "ThreadId": "37330",
    "Html": "\r\n<p>I'm running into the same issue two years later, was there ever a solution to this? Should I use the listbox instead?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks!</p>\r\n",
    "PostedDate": "2010-10-28T17:20:30.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "515892",
    "ThreadId": "37330",
    "Html": "\r\n<p>What we did was something like this:</p>\r\n<p>&nbsp;class ValueContainer {<br>\r\n&nbsp;&nbsp; string Value { set; get; }<br>\r\n&nbsp;};</p>\r\n<p>and then bind an IList&lt;ValueContainer&gt; the DataGrid.ItemsSource.&nbsp;</p>\r\n<p>Then you will get a single column with the name Value, and be able to edit collection items in text boxes.</p>\r\n",
    "PostedDate": "2010-11-02T05:42:04.98-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "515986",
    "ThreadId": "37330",
    "Html": "\r\n<p>Hey Steinarb</p>\r\n<p>I ended up implementing something like that to fix the behavior, wrote a class that contained the string as a property</p>\r\n<p>Thanks for your response!!!</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-02T08:55:03.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]