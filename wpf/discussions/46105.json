[
  {
    "Id": "153884",
    "ThreadId": "46105",
    "Html": "Following with the M-V-VM pattern i would really like to bind my own ObservableCollection&lt;DateRange or even DateTime&gt; to the BlackoutDates property... Is there plans to make BlackoutDates a Dep property? It would be nice for this property to take a collection of DateTime objects since DateRange is pretty specific to the control... it also makes the M-V-VM a bit harder to follow... especially if you have a table of DateTime objects in your database...<br>\r\n<br>\r\n",
    "PostedDate": "2009-02-03T11:24:25.38-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "250612",
    "ThreadId": "46105",
    "Html": "<p>Agreed.&nbsp; The current set of calendar controls are about impossible to fit in with MVVM.&nbsp; Or style, or do anything useful with them.</p>",
    "PostedDate": "2009-10-28T05:34:33.547-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "267622",
    "ThreadId": "46105",
    "Html": "<p>agreed</p>",
    "PostedDate": "2009-12-15T09:18:37.733-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "414677",
    "ThreadId": "46105",
    "Html": "<p>any chance this might happen in the next release?</p>\r\n<p>Also, because BlackoutDates is read-only you have to add one CalendarDateRange at a time. And because it's an ObservableCollection, every time you add, it's going to refresh the UI. If you have more than ~100 blackout dates, performance suffers pretty bad. For myself, I've added an AddDateRanges method to the CalendarBlackoutDatesCollection class that bypasses the UI refresh until the end, but it seems to me y'all should reconsider this design.</p>",
    "PostedDate": "2010-03-05T09:41:30.847-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]