[
  {
    "Id": "136466",
    "ThreadId": "41159",
    "Html": "<span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">The default keyboard navigation of Tab key in DataGrid is move focus from one DataGridCell to another.</span>\r\n<p align=left style=\"text-align:left\"><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">But I need the focus can be moved to the next DataGridRow when [Tab] key is pressed.</span></p>\r\n<p align=left style=\"text-align:left\"><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">I tried to use KeyboardNavigation.TabNavigation attached property, but when Tab key is pressed, <br>\r\n</span></p>\r\n<p align=left style=\"text-align:left\"><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">the focus is moved out of DataGrid, not to the next DataGridRow.<br>\r\n</span></p>\r\n<p align=left style=\"text-align:left\"><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"font-size:10pt;font-family:consolas;color:blue\">&lt;</span><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">Style</span><span style=\"font-size:10pt;font-family:consolas;color:red\"> x</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">:</span><span style=\"font-size:10pt;font-family:consolas;color:red\">Key</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">=&quot;defaultRowStyle&quot;</span><span style=\"font-size:10pt;font-family:consolas;color:red\"> TargetType</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">=&quot;{</span><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">x</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">:</span><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">Type</span><span style=\"font-size:10pt;font-family:consolas;color:red\"> dg</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">:</span><span style=\"font-size:10pt;font-family:consolas;color:red\">DataGridRow</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">}&quot;&gt;</span></span></p>\r\n<p align=left style=\"text-align:left\"><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"font-size:10pt;font-family:consolas;color:blue\">&lt;</span><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">Setter</span><span style=\"font-size:10pt;font-family:consolas;color:red\"> Property</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">=&quot;Header&quot;</span><span style=\"font-size:10pt;font-family:consolas;color:red\"> Value</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">=&quot;{</span><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">Binding</span><span style=\"font-size:10pt;font-family:consolas;color:red\"> Id</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">}&quot;/&gt;</span></span></p>\r\n<p align=left style=\"text-align:left\"><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"font-size:10pt;font-family:consolas;color:blue\">&lt;</span><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">Setter</span><span style=\"font-size:10pt;font-family:consolas;color:red\"> Property</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">=&quot;KeyboardNavigation.TabNavigation&quot;</span><span style=\"font-size:10pt;font-family:consolas;color:red\"> Value</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">=&quot;None&quot;/&gt;</span></span></p>\r\n<p><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"font-size:10pt;font-family:consolas;color:blue\">&lt;/</span><span style=\"font-size:10pt;font-family:consolas;color:rgb(163, 21, 21)\">Style</span><span style=\"font-size:10pt;font-family:consolas;color:blue\">&gt;</span></span></p>\r\n<p> <span style=\"font-size:10pt;font-family:consolas;color:blue\"></span></p>\r\n<p><span style=\"font-size:10pt;font-family:consolas;color:blue\">How can I control the focus move direction?</span></p>\r\n<p><span style=\"font-size:10pt;font-family:consolas;color:blue\">I think one solution may work is to write code in PreviewKeyUp.<br>\r\n</span></p>\r\n",
    "PostedDate": "2008-11-30T19:40:56.213-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136502",
    "ThreadId": "41159",
    "Html": "As I recall, the DataGrid uses WPF's command subsystem for all its keyboard shortcuts. So while I haven't tried it, you should be able to set up a new command with an InputGesture(Key=Tab) that advances the selection to the next row.<br>\r\n<br>\r\nHope this helps.<br>\r\n",
    "PostedDate": "2008-12-01T01:13:37.307-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "136517",
    "ThreadId": "41159",
    "Html": "Thank you. Now I can use the event handler of PreviewKeyDown to change focus when Tab/Shift+Tab is pressed.<br>\r\nI don't know whether there are any side effects.<br>\r\nNow the code is just a trial and it does not take the Editing mode of Cell into account.<br>\r\n<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void DataGrid1_PreviewKeyDown(object sender, KeyEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (e.Key == Key.Tab)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool previous = ((e.KeyboardDevice.Modifiers &amp; ModifierKeys.Shift) == ModifierKeys.Shift);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Start navigation from the current focus to allow moving focus on other focusable elements inside the cell<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIElement startElement = Keyboard.FocusedElement as UIElement;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ContentElement startContentElement = (startElement == null) ? Keyboard.FocusedElement as ContentElement : null;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((startElement != null) || (startContentElement != null))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.Handled = true;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FocusNavigationDirection direction = previous ? FocusNavigationDirection.Up : FocusNavigationDirection.Down;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TraversalRequest request = new TraversalRequest(direction);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; request.Wrapped = true; // Navigate only within datagrid<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Move focus to the the next or previous tab stop.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (((startElement != null) &amp;&amp; startElement.MoveFocus(request)) ||<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((startContentElement != null) &amp;&amp; startContentElement.MoveFocus(request)))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIElement currentElement = Keyboard.FocusedElement as UIElement;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataGridRow currentRow = FindVisualParent&lt;DataGridRow&gt;(currentElement);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (currentRow != null) currentRow.IsSelected = true;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static T FindVisualParent&lt;T&gt;(UIElement element) where T : UIElement<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIElement parent = element;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (parent != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T correctlyTyped = parent as T;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (correctlyTyped != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return correctlyTyped;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parent = VisualTreeHelper.GetParent(parent) as UIElement;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return null;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\r\n",
    "PostedDate": "2008-12-01T02:17:13.35-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]