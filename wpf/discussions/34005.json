[
  {
    "Id": "112704",
    "ThreadId": "34005",
    "Html": "I have successfully created my DataGrid and have data binding and styles/templates already set up, however there is one thing I can not figure out.&nbsp; After I set up each column 's DataTemplate (using TextBlock's so they're not editable) I still always have an extra blank row at the bottom of my datagrid.&nbsp; <br>\r\n<br>\r\nI tried turning off &quot;CanUserAddRows&quot; but to no avail.&nbsp; I fell like there should be a property called &quot;IsEditable&quot; that I can turn off.&nbsp; Does anyone know how to remove this extra row so that I'm only showing the data that I am binding to?<br>\r\n",
    "PostedDate": "2008-08-21T10:03:08.147-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "112716",
    "ThreadId": "34005",
    "Html": "In the final version of the DataGrid there will be an available property, IsReadOnly that can accomplish what you are trying to do.&nbsp; In the meantime what you can do is set the NewItemPlaceholderPosition to None which will remove that extra row.&nbsp; Something like this:<br>\r\n<br>\r\n<span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">\r\n<p>ICollectionView</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px\"> view = </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">CollectionViewSource</span></span><span style=\"font-size:13px\">.GetDefaultView(DataGrid_Standard.ItemsSource);<br>\r\niecv = (</span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">IEditableCollectionView</span></span><span style=\"font-size:13px\">)view;<br>\r\niecv.NewItemPlaceholderPosition = </span><span style=\"font-size:13px;color:#2b91af\"><span style=\"font-size:13px;color:#2b91af\">NewItemPlaceholderPosition</span></span><span style=\"font-size:13px\">.None;\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<br>\r\n",
    "PostedDate": "2008-08-21T10:55:35.18-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "112717",
    "ThreadId": "34005",
    "Html": "Also, setting CanUserAddRows to false should remove the NewItemPlaceholder but as you've seen it doesn't.&nbsp; This is a known issue and should be fixed in the final version.\r\n",
    "PostedDate": "2008-08-21T10:59:27.007-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "112745",
    "ThreadId": "34005",
    "Html": "Thanks, that worked great!<br>\r\n<br>\r\n<br>\r\nHere's what ended up working with VB:<br>\r\n<br>\r\nImports System.ComponentModel<br>\r\n...<br>\r\n&nbsp;Private Sub MyWindow_Loaded(ByVal sender As Object, ByVal e As System.Windows.RoutedEventArgs) Handles Me.Loaded<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim view As ICollectionView = CollectionViewSource.GetDefaultView(DataGrid_Standard<span style=\"font-size:13px\"></span>.ItemsSource)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim iecv As IEditableCollectionView = CType(view, IEditableCollectionView)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iecv.NewItemPlaceholderPosition = NewItemPlaceholderPosition.None<br>\r\nEnd Sub<br>\r\n",
    "PostedDate": "2008-08-21T12:50:45.603-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "112973",
    "ThreadId": "34005",
    "Html": "<p>kketcher,<br>\r\n<br>\r\nThanks. Glad I read this because&nbsp;after I did&nbsp;I noticed my grid was doing the same thing with an empty row at the bottom. I also am using Data Templates to keep the cells read only. Weird thing is I first tried setting&nbsp;(CanUserAddRows=&quot;False&quot;) in my Xaml and this turned off the empty row at the bottom. I didn't have to do anything with&nbsp;NewItemPlaceholderPosition. Maybe because I am binding to a DataSet table?</p>\r\n<p>One thing about keeping the cells non-edit. I have SelectionUnit=&quot;FullRow&quot; and everything works great but I can't get rid of the cell border when the user highlights that cell's row.&nbsp; Any ideas?</p>\r\n<p><span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\"></span></span>&nbsp;</p>\r\n",
    "PostedDate": "2008-08-22T08:13:20.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "117704",
    "ThreadId": "34005",
    "Html": "Thanks for the workaround. <br>\r\n<br>\r\nI am using the DataGrid inside a DataTemplate.&nbsp; I have found that binding to the Initialized event works pretty well in this case:<br>\r\n&lt;dg:DataGrid Initialized=&quot;DataGrid_Initialized&quot; ItemsSource=&quot;{Binding Path=Users}&quot; AutoGenerateColumns=&quot;False&quot; CanUserAddRows=&quot;False&quot; CanUserDeleteRows=&quot;False&quot; &gt;<br>\r\n...<br>\r\n&lt;/DataGrid&gt;<br>\r\n<br>\r\nprivate void DataGrid_Initialized(object sender, EventArgs e)<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICollectionView view = CollectionViewSource.GetDefaultView(((Microsoft.Windows.Controls.DataGrid)sender).ItemsSource);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var iecv = (IEditableCollectionView)view;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iecv.NewItemPlaceholderPosition = NewItemPlaceholderPosition.None; <br>\r\n}<br>\r\n",
    "PostedDate": "2008-09-10T17:00:44.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "124679",
    "ThreadId": "34005",
    "Html": "Here's the fix i'm using, it may be helpful to someone.<br>\r\n<p>public class DataGridFix : DataGrid<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;static DataGridFix()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataGridFix.ItemsSourceProperty.OverrideMetadata(typeof(DataGridFix), new FrameworkPropertyMetadata(new PropertyChangedCallback(ItemsSourcePropertyChanged)));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataGridFix.CanUserAddRowsProperty.OverrideMetadata(typeof(DataGridFix), new FrameworkPropertyMetadata(new PropertyChangedCallback(ItemsSourcePropertyChanged)));</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;private static void ItemsSourcePropertyChanged(DependencyObject target, DependencyPropertyChangedEventArgs args)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dg = (Microsoft.Windows.Controls.DataGrid)target;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!dg.CanUserAddRows)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var view = CollectionViewSource.GetDefaultView(((Microsoft.Windows.Controls.DataGrid)target).ItemsSource);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var iecv = (IEditableCollectionView)view;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iecv.NewItemPlaceholderPosition = NewItemPlaceholderPosition.None;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</p>\r\n<p>}</p>\r\n",
    "PostedDate": "2008-10-13T04:21:23.747-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]