[
  {
    "Id": "181608",
    "ThreadId": "53930",
    "Html": "I like the way the user navigates in the grid. <br>\r\n<br>\r\nMy data isn't XML based or DB based. It's a memory collection.<br>\r\n<br>\r\nThe population performance of the grid is poor with the relative small set of 300 items.<br>\r\n<br>\r\n(Once populated the performance is acceptable to me)<br>\r\n<br>\r\nIf I remove the scrollviewer the performance is slightly better. My very superflous performance profiling seems to point to the layout code.<br>\r\n<br>\r\nSome example:<br>\r\n<br>\r\nXAML:<br>\r\n<br>\r\n&lt;Window x:Class=&quot;DataGridTest.Window1&quot;<br>\r\n    xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n    xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n    xmlns:Controls=&quot;clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit&quot;<br>\r\n    Title=&quot;Window1&quot; MinHeight=&quot;300&quot; MinWidth=&quot;300&quot;&gt;<br>\r\n   &lt;StackPanel&gt;<br>\r\n      &lt;Button Content=&quot;Go&quot; Click=&quot;Button_Click&quot;/&gt;<br>\r\n      &lt;ScrollViewer VerticalScrollBarVisibility=&quot;Auto&quot;&gt;<br>\r\n         &lt;Controls:DataGrid Name=&quot;Test&quot;&gt;<br>\r\n         &lt;/Controls:DataGrid&gt;<br>\r\n      &lt;/ScrollViewer&gt;<br>\r\n   &lt;/StackPanel&gt;<br>\r\n&lt;/Window&gt;<br>\r\n<br>\r\n<br>\r\nC#:<br>\r\n<br>\r\n<p>using System;<br>\r\nusing System.Collections.ObjectModel;<br>\r\nusing System.Linq;<br>\r\nusing System.Windows;</p>\r\n<p>namespace DataGridTest<br>\r\n{<br>\r\n   public partial class Window1<br>\r\n   {<br>\r\n      public Window1()<br>\r\n      {<br>\r\n         InitializeComponent();<br>\r\n      }</p>\r\n<p>      void Button_Click(object sender, RoutedEventArgs e)<br>\r\n      {</p>\r\n<p>         var items = Enumerable<br>\r\n            .Range(0, 400)<br>\r\n            .Select(i =&gt; new TestData())<br>\r\n            .ToArray();</p>\r\n<p>         Test.ItemsSource = new ObservableCollection&lt;TestData&gt;(items);</p>\r\n<p>      }<br>\r\n   }</p>\r\n<p>   public class TestData<br>\r\n   {<br>\r\n      static readonly Random s_rand = new Random();</p>\r\n<p>      public string V0 { get; set; }<br>\r\n      public string V1 { get; set; }<br>\r\n      public string V2 { get; set; }<br>\r\n      public string V3 { get; set; }<br>\r\n      public string V4 { get; set; }<br>\r\n      public string V5 { get; set; }<br>\r\n      public string V6 { get; set; }<br>\r\n      public string V7 { get; set; }<br>\r\n      public string V8 { get; set; }<br>\r\n      public string V9 { get; set; }</p>\r\n<p>      public TestData()<br>\r\n      {<br>\r\n         V0 = s_rand.Next(1000, 2000).ToString();<br>\r\n         V1 = s_rand.Next(1000, 2000).ToString();<br>\r\n         V2 = s_rand.Next(1000, 2000).ToString();<br>\r\n         V3 = s_rand.Next(1000, 2000).ToString();<br>\r\n         V4 = s_rand.Next(1000, 2000).ToString();<br>\r\n         V5 = s_rand.Next(1000, 2000).ToString();<br>\r\n         V6 = s_rand.Next(1000, 2000).ToString();<br>\r\n         V7 = s_rand.Next(1000, 2000).ToString();<br>\r\n         V8 = s_rand.Next(1000, 2000).ToString();<br>\r\n         V9 = s_rand.Next(1000, 2000).ToString();<br>\r\n      }<br>\r\n   }<br>\r\n}</p>\r\n",
    "PostedDate": "2009-04-20T23:25:33.387-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "181619",
    "ThreadId": "53930",
    "Html": "I use changeset: 26281\r\n",
    "PostedDate": "2009-04-20T23:46:46.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "181637",
    "ThreadId": "53930",
    "Html": "If I understand your problem correctly, you may want to try to disable row virtualization and see if that helps. (It will come at a penalty when the grid is initially populated, though.)<br>\r\n",
    "PostedDate": "2009-04-21T00:49:40.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "181643",
    "ThreadId": "53930",
    "Html": "Mikj -<br>\r\n<br>\r\nThanks for your answer. I tried:<br>\r\n<br>\r\n         &lt;Controls:DataGrid Name=&quot;Test&quot; EnableRowVirtualization=&quot;False&quot; /&gt;<br>\r\n<br>\r\nTo populate 400 items it takes roughly 5 seconds on my machine.<br>\r\n<br>\r\nMy machine is not super hot but definitely not bad.<br>\r\n<br>\r\nMårten<br>\r\n<br>\r\n",
    "PostedDate": "2009-04-21T00:55:35.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "182013",
    "ThreadId": "53930",
    "Html": "Hi Mårten,<br>\r\n<br>\r\nI am able to repro this on my machine also, and I'm not sure what the problem might be.  We use a lot of samples internally where we generate 1000s of rows similar to the way you're doing it and have not seen performance this bad before.  I'm filing a bug for us to investigate this, and we will get back to you when we're able to figure out what's going on.<br>\r\n<br>\r\nThanks,<br>\r\nSamantha<br>\r\n",
    "PostedDate": "2009-04-21T14:03:17.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "182036",
    "ThreadId": "53930",
    "Html": "Samantha - <br>\r\n<br>\r\nThanks for your answer. I'd really like to use the DataGrid if possible. At the moment I'm using the ListView but I'm not happy about the navigation in the list view and have to emulate the proper behavior. The ListView performance isn't optimal either in my use case but its better.<br>\r\n<br>\r\nI would be very happy if this could be resolved so I could use the DataGrid.<br>\r\n<br>\r\nPS. I tried to do some basic profiling but as I lack both WPF competence and knowledge of the DataGrid I felt unable to pinpoint the issue myself.<br>\r\n<br>\r\nMårten<br>\r\n",
    "PostedDate": "2009-04-21T14:57:47.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "192119",
    "ThreadId": "53930",
    "Html": "<p>Don't feel bad. This is a common mistake made with list controls. There are two issues here:</p>\r\n<p>The first is the extra ScrollViewer. The DataGrid's default template already contains a ScrollViewer. So, you can remove that from your markup.</p>\r\n<p>The second is that the parent panel is a StackPanel. The StackPanel (in this case laying out its children vertically) will allow the children to size-to-content in the vertical dimension. That means that the child has all the space it wants and is unconstrained. The child, in this case is DataGrid, and when unconstrained, its layout panel created and layed out ever single item that the DataGrid was bound to. What you want to have happen is for a constraint to be applied to the DataGrid so that its layout panel will only create and layout the items that are in view. To do that, change the StackPanel to a Grid (or some other panel that achieves the same result).</p>\r\n<p>&nbsp;&nbsp; &lt;Grid&gt;<br>&nbsp;&nbsp;&nbsp; &lt;Grid.RowDefinitions&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;RowDefinition Height=&quot;Auto&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;RowDefinition /&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/Grid.RowDefinitions&gt;<br>&nbsp;&nbsp;&nbsp; &lt;Button Content=&quot;Go&quot; Click=&quot;Button_Click&quot;/&gt;<br>&nbsp;&nbsp;&nbsp; &lt;Controls:DataGrid Name=&quot;Test&quot; Grid.Row=&quot;1&quot;&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/Controls:DataGrid&gt;<br>&nbsp; &lt;/Grid&gt;</p>\r\n<p>Ben</p>",
    "PostedDate": "2009-05-19T15:48:26.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "192661",
    "ThreadId": "53930",
    "Html": "<p>Ben, thank you for your reply.</p>\r\n<p>I don't feel bad. The example I posted was the simplest one where I could reproduce the performance issue. The real scenario of course looks different and is more complex.</p>\r\n<p>I designed a new example which more closely shows what I want to achieve. The outer scrollviewer is there as the scrollviewer offered by the listbox doesn't have the behavior I'd like.</p>\r\n<p>When expanding the items that have close to 400&nbsp;item it takes roughly 2 sec on my machine. While not an eternity the delay makes the application fail to give the user experience I'd like.</p>\r\n<p>I've tried updating the styles to remove unnecessary scrollviewer and other containers from the visual tree. I got&nbsp;a small improvement. If you can figure out a workaround in order to get the desired behavior and get decent performance I'd be very grateful.</p>\r\n<p>FYI I attached an image of the application we are building (an internal tool). In the example I use listviews instead of the grid. I'm using this semi advanced application to learn best practices on how to design WPF application. Layout performance is something that I wasn't aware that you actually have to pay attention to.</p>\r\n<p>Edit: Hmm how do I attach images to posts?</p>\r\n<p>&nbsp;&lt;Window x:Class=&quot;PerfTest.Window1&quot;<br>&nbsp;&nbsp;&nbsp; xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>&nbsp;&nbsp;&nbsp; xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>&nbsp;&nbsp;&nbsp; xmlns:Controls=&quot;clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit&quot;<br>&nbsp;&nbsp;&nbsp; Title=&quot;Window1&quot; Height=&quot;600&quot; Width=&quot;800&quot;&gt;<br>&nbsp;&nbsp; &lt;Window.Resources&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DataTemplate x:Key=&quot;TestCaseTemplate&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Border Margin=&quot;0,4,0,4&quot; BorderThickness=&quot;0,1,0,0&quot; BorderBrush=&quot;Gray&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Expander Margin=&quot;0,4,0,0&quot; Padding=&quot;0,4,0,4&quot; Header=&quot;{Binding Path=V0, Mode=OneWay}&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Controls:DataGrid VirtualizingStackPanel.IsVirtualizing=&quot;True&quot; VirtualizingStackPanel.VirtualizationMode=&quot;Recycling&quot; ItemsSource=&quot;{Binding Path=Properties, Mode=OneWay}&quot; ColumnWidth=&quot;200&quot;&nbsp; /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Expander&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Border&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/DataTemplate&gt;<br>&nbsp;&nbsp; &lt;/Window.Resources&gt;<br>&nbsp;&nbsp;&nbsp; &lt;Grid&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Grid.RowDefinitions&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;RowDefinition Height=&quot;Auto&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;RowDefinition/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Grid.RowDefinitions&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button Grid.Row=&quot;0&quot; Content=&quot;Test&quot; Click=&quot;Button_Click&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ScrollViewer Grid.Row=&quot;1&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ListBox Grid.Row=&quot;1&quot; ItemsSource=&quot;{Binding Mode=OneWay}&quot; ItemTemplate=&quot;{StaticResource TestCaseTemplate}&quot; HorizontalContentAlignment=&quot;Stretch&quot; &gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ListBox&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ScrollViewer&gt;<br>&nbsp;&nbsp; &lt;/Grid&gt;<br>&lt;/Window&gt;</p>\r\n<p>using System;<br>using System.Linq;</p>\r\n<p>namespace PerfTest<br>{<br>&nbsp;&nbsp; public partial class Window1<br>&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static readonly Random Randomizer = new Random(740531);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Window1()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void Button_Click(object sender, System.Windows.RoutedEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataContext = Generate&lt;TestCase&gt;(10, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static T[] Generate&lt;T&gt;(int minCount, int maxCount)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; where T : new()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var count = Randomizer.Next(minCount, maxCount);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Enumerable<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Range(0, count)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Select(i =&gt; new T())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .ToArray();</p>\r\n<p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp; public class TestCase <br>&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string V0 { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string V1 { get; set; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public TestProperty[] Properties { get; set; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public TestCase()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Properties = Window1.Generate&lt;TestProperty&gt;(100, 400);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V0 = &quot;Count : &quot; +&nbsp; Properties.Length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V1 = Window1.Randomizer.Next(1000, 2000).ToString();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp; public class TestProperty<br>&nbsp;&nbsp; {</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string V0 { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string V1 { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string V2 { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string V3 { get; set; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string V4 { get; set; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public TestProperty()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V0 = Window1.Randomizer.Next(1000, 2000).ToString();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V1 = Window1.Randomizer.Next(1000, 2000).ToString();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V2 = Window1.Randomizer.Next(1000, 2000).ToString();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V3 = Window1.Randomizer.Next(1000, 2000).ToString();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V4 = Window1.Randomizer.Next(1000, 2000).ToString();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp; }</p>\r\n<p>}</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-05-20T22:43:31.523-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "192929",
    "ThreadId": "53930",
    "Html": "<p>Now you have two instances where your vertical constraint is infinity, thus doubly breaking virtualization.</p>\r\n<p>The first instance is the ScrollViewer around the ListBox. The ScrollViewer will layout the ListBox unconstrained, causing all items in the ListBox to be instantiated. Since you didn't customize the ScrollViewer in the sample, I can't tell what the ListBox's ScrollViewer does or does not do that you don't like, but you can customize some of the parameters of ScrollViewer directly on ListBox using ScrollViewer's attached properties. For instance, you can set ScrollViewer.VerticalScrollBarVisibility on ListBox and it will affect the ListBox's ScrollViewer. If that isn't sufficient, consider changing the template of ListBox.</p>\r\n<p>The second instance is the DataGrid being in a ListBoxItem (which is generated by the ListBox for each item in its ItemsSource). Because the ListBox lays out its children using a VirtualizingStackPanel, each child is unconstrained in the vertical dimension. That means that all of the DataGrid's children will be instantiated. In this case if there are many children in the DataGrid, you might consider applying a vertical constraint by setting Height on the DataGrid so that it becomes constrained.</p>\r\n<p>Ben</p>",
    "PostedDate": "2009-05-21T13:10:50.897-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]