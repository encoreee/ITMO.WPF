[
  {
    "Id": "133861",
    "ThreadId": "40339",
    "Html": "Wouldn't it very convenient with an end date and start  date at the calendar?<br>\r\n<br>\r\nThereby dates not displayed also are 'Blackoutdates' instead of <br>\r\nCalendar.BlackoutDates.Add(new CalendarDateRange(DateTime.Now, DateTime.MaxValue); <br>\r\nfor giving the Calendar an expiration date.<br>\r\nIt could be a convenience method at CalendarBlackoutDatesCollection::DatesBefore and CalendarBlackoutDatesCollection::DatesAfter like the CalendarBlackoutDatesCollection::AddDatesInPast. \r\n",
    "PostedDate": "2008-11-20T01:03:48.903-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "134028",
    "ThreadId": "40339",
    "Html": "If I understand your qualm correctly, you are confused about why we have Blackoutdates as well as DisplayDateStart and DisplayDateEnd.<br>\r\nOne rationale for this is that DisplayDates can coerce to fit a SelectedDate outside of the initial display range and that Blackoutdates are dates that cannot be chosen. They serve different purposes... one superficially limits browsing, the other explicity prevents particular dates from being selected. If one really wanted to prevent the dates outside the initial display range from being selected they can blackout those dates fairly easily. This design decision was also required to maintain parity with our Silverlight control which came first. As for your you convenience method suggestions, those were considered and are good suggestions, but we opted to keep the API smaller and let the developer handle these simpler scenarios.<br>\r\n<br>\r\n-Eric Fabricant, MSFT\r\n",
    "PostedDate": "2008-11-20T13:28:54.783-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "461977",
    "ThreadId": "40339",
    "Html": "<p>Hi Eric,</p>\r\n<p>I'm trying to come to grips with the way SelectedDateStart and SelectedDateEnd work, and how I might constrain the dates inside a DatePicker.</p>\r\n<p>How would I constrain the DatePicker such that the user cannot enter a date before today or after one week from now? Setting SelectedDateStart and SelectedDateEnd obviously don't stop the user from <em>typing</em> a date outside of that range. Do I really have to add <em>every single day</em> (from DateTime.MinValue to DateTime.MaxValue) other than the seven valid dates to the BlackoutDates collection? I'm amazed that there's no &quot;Minimum&quot; and &quot;Maximum&quot; (or even &quot;MinDate&quot; and &quot;MaxDate&quot;) properties like there were on the Windows Forms DateTimePicker control.</p>\r\n<p>Cheers,<br>Matt</p>",
    "PostedDate": "2010-06-30T20:58:43.543-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]