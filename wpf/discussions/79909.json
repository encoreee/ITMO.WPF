[
  {
    "Id": "273755",
    "ThreadId": "79909",
    "Html": "<p>I have a datagrid defined as follows:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;v:MyDataGrid ItemsSource=&quot;{Binding List}&quot; SelectionMode=&quot;Single&quot; SelectedIndex=&quot;{Binding SelectedIndex}&quot; IsReadOnly=&quot;True&quot; SelectionUnit=&quot;FullRow&quot;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ui:DataGridBehavior.ColumnDefinitions=&quot;{Binding ColumnDe\r\nfinitions}&quot;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FrozenColumnCount=&quot;{Binding ColumnDefinitions.FrozenColumnCount}&quot;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&gt;</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&lt;toolkit:DataGrid ItemsSource=&quot;{Binding List}&quot; SelectionMode=&quot;Single&quot; SelectedIndex=&quot;{Binding SelectedIndex}&quot; IsReadOnly=&quot;True&quot; SelectionUnit=&quot;FullRow&quot;&gt;</p>\r\n<p>...</p>\r\n<p>As you can see, ItemsSource and SelectedIndex are bound to List, resp. SelectedIndex of the viewmodel (with INotifyPropertyChanged implemented)</p>\r\n<p>There is a 2 way binding for SelectedIndex and it works: when I change the property in my viewmodel as a result of a command (for example), the row is selected correctly.</p>\r\n<p>The problem is that when the control is initially loaded, the selection does not work. The list is displayed (ItemsSource contains the correct value), but no row is selected even though SelectedIndex contains the correct value.</p>\r\n<p>The problem also exhibits itself when the ItemsSource and SelectedIndex are rebound.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Anybody has an idea on how to circumvent this problem?</p>\r\n<p>&nbsp;</p>\r\n<p>I noticed&nbsp;<a href=\"http://wpf.codeplex.com/WorkItem/View.aspx?WorkItemId=10659\">http://wpf.codeplex.com/WorkItem/View.aspx?WorkItemId=10659</a>, which seems to be much of the same thing.</p>",
    "PostedDate": "2010-01-06T05:15:53.583-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "273790",
    "ThreadId": "79909",
    "Html": "<p>I might as well anwer my own question.</p>\r\n<p>I am using the datagrid in 'pure mvvm&quot; mode, including the necessary plumbing to allow the Columns collection to be bound to a viewmodel (which does not reference the control).</p>\r\n<p>There is a problem when using SelectedIndex to set the row selection in 2 cases:</p>\r\n<p>- when an ItemsSource is changed (if Selectedndex==0, it is not shown). Since we cannot specify the binding order on properties, this is a problem</p>\r\n<p>- when the ItemsSource is initially bound when the Columns collection is empty. Adding columns doesn't make the selection appear.</p>\r\n<p>The workaround is to derive from Datagrid as follows:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> MyDataGrid : DataGrid\r\n    {\r\n        <span style=\"color:Blue\">public</span> MyDataGrid()\r\n        {\r\n            Loaded += MyDataGrid_Loaded;    <span style=\"color:Green\">// BUGBUG</span>\r\n            Unloaded += MyDataGrid_Unloaded;\r\n            Columns.CollectionChanged += Columns_CollectionChanged;\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> Columns_CollectionChanged(<span style=\"color:Blue\">object</span> sender, NotifyCollectionChangedEventArgs e)\r\n        {\r\n            <span style=\"color:Green\">// BUGBUG: if the columns collection is updated after the itemssource, the selection isn't shown</span>\r\n            <span style=\"color:Blue\">if</span> (SelectedIndex &gt;= 0)\r\n                Dispatcher.Invoke((Action)<span style=\"color:Blue\">delegate</span>\r\n                {\r\n                    <span style=\"color:Blue\">var</span> index = SelectedIndex;\r\n                    SelectedIndex = -1;\r\n                    SelectedIndex = index;\r\n                    UpdateLayout();\r\n                }, DispatcherPriority.Background);\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> MyDataGrid_Loaded(<span style=\"color:Blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            <span style=\"color:Green\">// BUGBUG: for some reason, the DataGrid will not update correctly when the datasource is populated while the control isn't loaded yet.</span>\r\n            <span style=\"color:Green\">// this seems to be a valid workaround.</span>\r\n            Items.Refresh();\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> MyDataGrid_Unloaded(<span style=\"color:Blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            INotifyCollectionChanged nco = ItemsSource <span style=\"color:Blue\">as</span> INotifyCollectionChanged;\r\n            <span style=\"color:Blue\">if</span> (nco != <span style=\"color:Blue\">null</span>)\r\n                nco.CollectionChanged -= ItemsSource_CollectionChanged;\r\n        }\r\n\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue)\r\n        {\r\n            <span style=\"color:Green\">// keep track of itemssource changes and refresh the corresponding view if the collection changes.</span>\r\n            <span style=\"color:Green\">// this allows us to signal global operations (like show/hide row details) at the ItemsSource level, and keep the view in sync.</span>\r\n            INotifyCollectionChanged nco = oldValue <span style=\"color:Blue\">as</span> INotifyCollectionChanged;\r\n            <span style=\"color:Blue\">if</span> (nco != <span style=\"color:Blue\">null</span>)\r\n                nco.CollectionChanged -= ItemsSource_CollectionChanged;\r\n            nco = newValue <span style=\"color:Blue\">as</span> INotifyCollectionChanged;\r\n            <span style=\"color:Blue\">if</span> (nco != <span style=\"color:Blue\">null</span>)\r\n                nco.CollectionChanged += ItemsSource_CollectionChanged;\r\n            <span style=\"color:Blue\">base</span>.OnItemsSourceChanged(oldValue, newValue);\r\n        }\r\n\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> ItemsSource_CollectionChanged(<span style=\"color:Blue\">object</span> sender, NotifyCollectionChangedEventArgs e)\r\n        {\r\n            Items.Refresh();\r\n            <span style=\"color:Green\">// BUGBUG: if the itemssource is updated, the selection corresponding to selectedIndex isn't shown</span>\r\n            UpdateLayout();\r\n        }\r\n    }\r\n\r\n</pre>\r\n</div>\r\n<p>I hope, quite frankly, that the next update of the DataGrid will be of higher quality and more MVVM-friendly.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;public class MyDataGrid : DataGrid</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public MyDataGrid()</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Loaded += MyDataGrid_Loaded; &nbsp; &nbsp;// BUGBUG</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Unloaded += MyDataGrid_Unloaded;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Columns.CollectionChanged += Columns_CollectionChanged;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private void Columns_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// BUGBUG: if the columns collection is updated after the itemssource, the selection isn't shown</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (SelectedIndex &gt;= 0)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Dispatcher.Invoke((Action)delegate</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var index = SelectedIndex;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SelectedIndex = -1;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SelectedIndex = index;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;UpdateLayout();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}, DispatcherPriority.Background);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private void MyDataGrid_Loaded(object sender, RoutedEventArgs e)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// BUGBUG: for some reason, the DataGrid will not update correctly when the datasource is populated while the control isn't loaded yet.</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// this seems to be a valid workaround.</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Items.Refresh();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private void MyDataGrid_Unloaded(object sender, RoutedEventArgs e)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;INotifyCollectionChanged nco = ItemsSource as INotifyCollectionChanged;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (nco != null)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nco.CollectionChanged -= ItemsSource_CollectionChanged;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;protected override void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// keep track of itemssource changes and refresh the corresponding view if the collection changes.</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// this allows us to signal global operations (like show/hide row details) at the ItemsSource level, and keep the view in sync.</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;INotifyCollectionChanged nco = oldValue as INotifyCollectionChanged;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (nco != null)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nco.CollectionChanged -= ItemsSource_CollectionChanged;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nco = newValue as INotifyCollectionChanged;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (nco != null)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;nco.CollectionChanged += ItemsSource_CollectionChanged;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;base.OnItemsSourceChanged(oldValue, newValue);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private void ItemsSource_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Items.Refresh();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// BUGBUG: if the itemssource is updated, the selection corresponding to selectedIndex isn't shown</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;UpdateLayout();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;}Frankl</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-01-06T06:52:45.173-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]