[
  {
    "Id": "418784",
    "ThreadId": "205130",
    "Html": "<p>Seems like it should be really simple, but I can't find anything to do this. So what is the best way to hide and show rows. I have a checkbox that needs to show and hide rows when it is toggled. So far the only place I've found where you can set the visibility on the DataGridRow object which isn't easily accessible - found it in the LoadingRow event, which only happens once, so I can't trigger it again when the checkbox value changes. Should this go in the style for the DataGridRow? If so, what does the default style look like? I tried to use Blend to figure it out, but it's not showing up in there.</p>",
    "PostedDate": "2010-03-16T10:33:41.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "419164",
    "ThreadId": "205130",
    "Html": "<p>I found a solution that works rather well...</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\"><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">StackPanel</span><span style=\"color:Blue\">&gt;</span>\r\n  <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">StackPanel.Resources</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">BooleanToVisibilityConverter</span> <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">BooleanToVisibilityConverter</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Style</span> <span style=\"color:Red\">TargetType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type toolkit:DataGridRow}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Style.Triggers</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTrigger</span> <span style=\"color:Red\">Binding</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=ID}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">1</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n           <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter</span> <span style=\"color:Red\">Property</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Visibility</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding ElementName=ShowRows, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTrigger</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Style.Triggers</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Style</span><span style=\"color:Blue\">&gt;</span>\r\n  <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">StackPanel.Resources</span><span style=\"color:Blue\">&gt;</span>\r\n\r\n  <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">CheckBox</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">ShowRows</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>Show Rows<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">CheckBox</span><span style=\"color:Blue\">&gt;</span>\r\n  <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">toolkit</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGrid</span> <span style=\"color:Red\">Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">dataGrid1</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">StackPanel</span><span style=\"color:Blue\">&gt;</span>\r\n\r\n</pre>\r\n</div>\r\n<br></span></pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-03-17T04:59:06.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442178",
    "ThreadId": "205130",
    "Html": "<p>This works ok. &nbsp;However, the DataGrid does not resize accordingly to any hidden rows.</p>\r\n<p>I had a solution where I created a control template for the DataGridRow and set the visibility of the border which contains all the inner elements of the row to Collapsed. &nbsp;This also resized the DataGrid accordingly EXCEPT for when only row was &quot;hidden&quot;. &nbsp;In that case, annoyingly, it behaved as your solution does and leaves the DataGrid at the same size.</p>\r\n<p>Anyone have any thoughts?</p>",
    "PostedDate": "2010-05-12T10:55:47.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442198",
    "ThreadId": "205130",
    "Html": "Here's the code for what I was talking about.\r\n\r\n-- Window1.xaml --\r\n\r\n<pre>\r\n&lt;Window x:Class=&quot;WpfApplication1.Window1&quot;\r\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\r\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\r\n    xmlns:t=&quot;clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit&quot;\r\n    xmlns:Primitives=&quot;clr-namespace:Microsoft.Windows.Controls.Primitives;assembly=WPFToolkit&quot;\r\n    Title=&quot;Window1&quot; Height=&quot;300&quot; Width=&quot;300&quot;&gt;\r\n    &lt;Window.Resources&gt;\r\n        &lt;Style x:Key=&quot;{x:Type t:DataGridRow}&quot; TargetType=&quot;{x:Type t:DataGridRow}&quot;&gt;\r\n            &lt;Setter Property=&quot;SnapsToDevicePixels&quot; Value=&quot;true&quot;/&gt;\r\n            &lt;Setter Property=&quot;Validation.ErrorTemplate&quot; Value=&quot;{x:Null}&quot; /&gt;\r\n            &lt;Setter Property=&quot;ValidationErrorTemplate&quot;&gt;\r\n                &lt;Setter.Value&gt;\r\n                    &lt;ControlTemplate&gt;\r\n                        &lt;TextBlock Margin=&quot;2,0,0,0&quot; VerticalAlignment=&quot;Center&quot; Foreground=&quot;Red&quot; Text=&quot;!&quot; /&gt;\r\n                    &lt;/ControlTemplate&gt;\r\n                &lt;/Setter.Value&gt;\r\n            &lt;/Setter&gt;\r\n            &lt;Setter Property=&quot;Template&quot;&gt;\r\n                &lt;Setter.Value&gt;\r\n                    &lt;ControlTemplate TargetType=&quot;{x:Type t:DataGridRow}&quot;&gt;\r\n                        &lt;Border x:Name=&quot;DGR_Border&quot;\r\n                  Background=&quot;{TemplateBinding Background}&quot;\r\n                  BorderBrush=&quot;{TemplateBinding BorderBrush}&quot;\r\n                  BorderThickness=&quot;{TemplateBinding BorderThickness}&quot;\r\n                  SnapsToDevicePixels=&quot;True&quot;&gt;\r\n                            &lt;Primitives:SelectiveScrollingGrid&gt;\r\n                                &lt;Grid.ColumnDefinitions&gt;\r\n                                    &lt;ColumnDefinition Width=&quot;Auto&quot;/&gt;\r\n                                    &lt;ColumnDefinition Width=&quot;*&quot;/&gt;\r\n                                &lt;/Grid.ColumnDefinitions&gt;\r\n                                &lt;Grid.RowDefinitions&gt;\r\n                                    &lt;RowDefinition Height=&quot;*&quot;/&gt;\r\n                                    &lt;RowDefinition Height=&quot;Auto&quot;/&gt;\r\n                                &lt;/Grid.RowDefinitions&gt;\r\n                                &lt;Primitives:DataGridCellsPresenter\r\n                    Grid.Column=&quot;1&quot;\r\n                    ItemsPanel=&quot;{TemplateBinding ItemsPanel}&quot;\r\n                    SnapsToDevicePixels=&quot;{TemplateBinding SnapsToDevicePixels}&quot;/&gt;\r\n                                &lt;Primitives:DataGridDetailsPresenter\r\n                    Primitives:SelectiveScrollingGrid.SelectiveScrollingOrientation=&quot;{Binding RelativeSource={RelativeSource AncestorType={x:Type t:DataGrid}}, Path=AreRowDetailsFrozen, Converter={x:Static t:DataGrid.RowDetailsScrollingConverter}, ConverterParameter={x:Static t:SelectiveScrollingOrientation.Vertical}}&quot;\r\n                    Grid.Column=&quot;1&quot; Grid.Row=&quot;1&quot;\r\n                    Visibility=&quot;{TemplateBinding DetailsVisibility}&quot; /&gt;\r\n                                &lt;Primitives:DataGridRowHeader \r\n                    Primitives:SelectiveScrollingGrid.SelectiveScrollingOrientation=&quot;Vertical&quot; Grid.RowSpan=&quot;2&quot;\r\n                    Visibility=&quot;{Binding RelativeSource={RelativeSource AncestorType={x:Type t:DataGrid}}, Path=HeadersVisibility, Converter={x:Static t:DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static t:DataGridHeadersVisibility.Row}}&quot;/&gt;\r\n                            &lt;/Primitives:SelectiveScrollingGrid&gt;\r\n                        &lt;/Border&gt;\r\n                        &lt;ControlTemplate.Triggers&gt;\r\n                            &lt;DataTrigger Binding=&quot;{Binding IsVisible,UpdateSourceTrigger=PropertyChanged}&quot; Value=&quot;False&quot;&gt;\r\n                                &lt;Setter TargetName=&quot;DGR_Border&quot; Property=&quot;Visibility&quot; Value=&quot;Collapsed&quot;/&gt;\r\n                            &lt;/DataTrigger&gt;\r\n                        &lt;/ControlTemplate.Triggers&gt;\r\n                    &lt;/ControlTemplate&gt;\r\n                &lt;/Setter.Value&gt;\r\n            &lt;/Setter&gt;\r\n        &lt;/Style&gt;\r\n    &lt;/Window.Resources&gt;\r\n    &lt;StackPanel&gt;\r\n        &lt;t:DataGrid x:Name=&quot;dg&quot; AutoGenerateColumns=&quot;False&quot; CanUserAddRows=&quot;False&quot;&gt;\r\n            &lt;t:DataGrid.Columns&gt;\r\n                &lt;t:DataGridTextColumn Binding=&quot;{Binding Name}&quot; /&gt;\r\n            &lt;/t:DataGrid.Columns&gt;\r\n        &lt;/t:DataGrid&gt;\r\n        &lt;StackPanel&gt;\r\n            &lt;Button Content=&quot;Modify&quot; Click=&quot;Button_Click&quot; /&gt;\r\n            &lt;Button Content=&quot;Modify 2&quot; Click=&quot;Button_Click_1&quot; /&gt;\r\n        &lt;/StackPanel&gt;\r\n    &lt;/StackPanel&gt;\r\n&lt;/Window&gt;\r\n</pre>\r\n\r\n-- Window1.xaml.cs --\r\n\r\n<pre>\r\nusing System.Collections.ObjectModel;\r\nusing System.ComponentModel;\r\nusing System.Windows;\r\n\r\nnamespace WpfApplication1\r\n{\r\n    /// &lt;summary&gt;\r\n    /// Interaction logic for MainWindow.xaml\r\n    /// &lt;/summary&gt;\r\n    public partial class Window1 : Window\r\n    {\r\n        ObservableCollection&lt;Model&gt; model;\r\n\r\n        public Window1()\r\n        {\r\n            InitializeComponent();\r\n\r\n            model = new ObservableCollection&lt;Model&gt;();\r\n            model.Add(new Model() { Name = &quot;Matthew&quot; });\r\n            model.Add(new Model() { Name = &quot;Mark&quot; });\r\n            model.Add(new Model() { Name = &quot;Luke&quot; });\r\n            model.Add(new Model() { Name = &quot;John&quot; });\r\n\r\n            dg.ItemsSource = model;\r\n        }\r\n\r\n        private void Button_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            if (model[3].IsVisible)\r\n                model[3].IsVisible = false;\r\n            else\r\n                model[3].IsVisible = true;\r\n        }\r\n\r\n        private void Button_Click_1(object sender, RoutedEventArgs e)\r\n        {\r\n            if (model[2].IsVisible)\r\n            {\r\n                model[2].IsVisible = false;\r\n                model[3].IsVisible = false;\r\n            }\r\n            else\r\n            {\r\n                model[2].IsVisible = true;\r\n                model[3].IsVisible = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    class Model : INotifyPropertyChanged\r\n    {\r\n        public string Name { get; set; }\r\n\r\n        bool _isVisible = true;\r\n        public bool IsVisible\r\n        {\r\n            get { return _isVisible; }\r\n            set\r\n            {\r\n                if (_isVisible != value)\r\n                {\r\n                    _isVisible = value;\r\n                    OnPropertyChanged(&quot;IsVisible&quot;);\r\n                }\r\n            }\r\n        }\r\n\r\n        void OnPropertyChanged(string pName)\r\n        {\r\n            PropertyChangedEventHandler eh = this.PropertyChanged;\r\n            if (eh != null)\r\n                eh(this, new PropertyChangedEventArgs(pName));\r\n        }\r\n\r\n        public event PropertyChangedEventHandler PropertyChanged;\r\n\r\n    }\r\n}\r\n</pre>",
    "PostedDate": "2010-05-12T11:36:17.803-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]