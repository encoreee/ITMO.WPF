[
  {
    "Id": "128703",
    "ThreadId": "38790",
    "Html": "I created a simple test application that used the DataGrid with row headers that were set through data templates and binding.&nbsp; However, the row headers were always blank.&nbsp; I finally went and downloaded Snoop [<a href=\"http://blois.us/Snoop/\">http://blois.us/Snoop/</a>]&nbsp; and analyzed the application.&nbsp; It turns out that the DataContext on my TextBlock was empty.&nbsp; The Parent, a ContentPresenter, also didn't have a DataContext, but the Parent of that, a StackPanel, did.&nbsp; So, I was able to solve my problem by writing some fancy data binding that went up through the parents to get the DataContext.<br>\r\n<br>\r\nI guess the main question I have is:&nbsp; Why is the TextBlock losing the DataContext?&nbsp; Shouldn't all children controls have the same DataContext as their Parent by default?<br>\r\n<br>\r\nFor those interested, here is the XAML code for the app (Is there a way to put it in a codeblock?):<br>\r\n&lt;Window x:Class=&quot;WpfApplication1.Window1&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:toolkit=&quot;http://schemas.microsoft.com/wpf/2008/toolkit&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:Linq=&quot;clr-namespace:System.Xml.Linq;assembly=System.Xml.Linq&quot;<br>\r\n&nbsp;&nbsp;&nbsp; Title=&quot;Window1&quot; Height=&quot;300&quot; Width=&quot;300&quot;&gt;<br>\r\n&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;toolkit:DataGrid&nbsp; HeadersVisibility=&quot;All&quot; AutoGenerateColumns=&quot;False&quot; ItemsSource=&quot;{Binding Elements}&quot; SelectionUnit=&quot;Cell&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Column definitions for the data grid --&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;toolkit:DataGrid.Columns&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;toolkit:DataGridTextColumn Header=&quot;Name&quot; Binding=&quot;{Binding Name}&quot; CanUserSort=&quot;False&quot; IsReadOnly=&quot;True&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;toolkit:DataGridTextColumn Header=&quot;Value&quot; Binding=&quot;{Binding Value}&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;toolkit:DataGridTextColumn Header=&quot;Parent&quot; Binding=&quot;{Binding Parent}&quot; IsReadOnly=&quot;True&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/toolkit:DataGrid.Columns&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Template for displaying the row headers. --&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;toolkit:DataGrid.RowHeaderTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DataTemplate DataType=&quot;{x:Type Linq:XElement}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- The TextBlock is somehow losing the DataContext, so we have to go back to the parent controls and acquire the DataContext. --&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Find the DataContext by hardcoding the path back through the TemplatedParents.&nbsp; (First parent is ContentProvider, Second is StackPanel) --&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TextBlock Text=&quot;{Binding RelativeSource={x:Static RelativeSource.Self}, Mode=OneWay, Path=TemplatedParent.TemplatedParent.DataContext.Name}&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/DataTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/toolkit:DataGrid.RowHeaderTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/toolkit:DataGrid&gt;<br>\r\n&lt;/Window&gt;<br>\r\n<br>\r\nThe original line I had that didn't work, but should have, was:<br>\r\n&lt;TextBlock Text=&quot;{Binding Mode=OneWay, Path=Name}&quot; /&gt;<br>\r\n<br>\r\nHere is the C# code that constructs the XElement list that the DataGrid is bound to:<br>\r\npublic partial class Window1 : Window<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Window1()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataContext = this;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XElement newElement = new XElement(&quot;Element&quot; + i);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newElement.Value = &quot;Value&quot; + i;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Elements.Add(newElement);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private List&lt;XElement&gt; elements = new List&lt;XElement&gt;();<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public List&lt;XElement&gt; Elements<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return elements; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { elements = value; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n",
    "PostedDate": "2008-10-29T12:49:44.75-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]